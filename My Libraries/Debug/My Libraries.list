
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001264  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002dc  20000004  08001618  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002e0  08001618  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002c4e  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000bae  00000000  00000000  00022c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000250  00000000  00000000  00023830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001b8  00000000  00000000  00023a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e583  00000000  00000000  00023c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00003613  00000000  00000000  000321bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050546  00000000  00000000  000357ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00085d14  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000067c  00000000  00000000  00085d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080013e4 	.word	0x080013e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080013e4 	.word	0x080013e4

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	080013fc 	.word	0x080013fc

08000334 <CRC16>:

/*************************	 Code	*************************/



unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen ){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

unsigned char uchCRCHi = 0xFF ; 			/* high byte of CRC initialized */
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
unsigned char uchCRCLo = 0xFF ; 			/* low byte of CRC initialized */
 8000344:	23ff      	movs	r3, #255	; 0xff
 8000346:	73bb      	strb	r3, [r7, #14]
unsigned uIndex ; 							/* will index into CRC lookup table */
while (usDataLen--){ 						/* pass through message buffer */
 8000348:	e013      	b.n	8000372 <CRC16+0x3e>
uIndex = uchCRCLo ^ *puchMsg++; 			/* calculate the CRC */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	60bb      	str	r3, [r7, #8]
uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <CRC16+0x64>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	4053      	eors	r3, r2
 8000366:	73bb      	strb	r3, [r7, #14]
uchCRCHi = auchCRCLo[uIndex];
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <CRC16+0x68>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
while (usDataLen--){ 						/* pass through message buffer */
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	807a      	strh	r2, [r7, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	b21a      	sxth	r2, r3
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	b21b      	sxth	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b21b      	sxth	r3, r3
 800038a:	b29b      	uxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	0800140c 	.word	0x0800140c
 800039c:	0800150c 	.word	0x0800150c

080003a0 <DMA1_Stream1_IRQHandler>:



/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/

void DMA1_Stream1_IRQHandler (void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF1){
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <DMA1_Stream1_IRQHandler+0x50>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d01a      	beq.n	80003e6 <DMA1_Stream1_IRQHandler+0x46>
		I2C1->CR1 |= I2C_CR1_STOP;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <DMA1_Stream1_IRQHandler+0x54>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <DMA1_Stream1_IRQHandler+0x54>)
 80003b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ba:	6013      	str	r3, [r2, #0]
		I2C1->CR2 &= ~I2C_CR2_DMAEN;
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <DMA1_Stream1_IRQHandler+0x54>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <DMA1_Stream1_IRQHandler+0x54>)
 80003c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003c6:	6053      	str	r3, [r2, #4]
		i2cSendStates = 0;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <DMA1_Stream1_IRQHandler+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
		I2C1NumberOfTransaction++;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <DMA1_Stream1_IRQHandler+0x5c>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <DMA1_Stream1_IRQHandler+0x5c>)
 80003d8:	701a      	strb	r2, [r3, #0]
		DMA1->LIFCR |= DMA_LIFCR_CTCIF1;
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <DMA1_Stream1_IRQHandler+0x50>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <DMA1_Stream1_IRQHandler+0x50>)
 80003e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e4:	6093      	str	r3, [r2, #8]
	}

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40026000 	.word	0x40026000
 80003f4:	40005400 	.word	0x40005400
 80003f8:	2000008d 	.word	0x2000008d
 80003fc:	20000022 	.word	0x20000022

08000400 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

	if (I2C1->SR1 & I2C_SR1_SB){
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b00      	cmp	r3, #0
 800040e:	d00d      	beq.n	800042c <I2C1_EV_IRQHandler+0x2c>
		(void) I2C1->SR1;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 8000412:	695b      	ldr	r3, [r3, #20]
		StartGTimer(GTimer1);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 ff5b 	bl	80012d0 <StartGTimer>
		I2C1->DR = AddrDevice;
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 800041c:	224e      	movs	r2, #78	; 0x4e
 800041e:	611a      	str	r2, [r3, #16]
		I2C1->CR2 |= I2C_CR2_DMAEN;
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a09      	ldr	r2, [pc, #36]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 8000426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800042a:	6053      	str	r3, [r2, #4]
	}

	if (I2C1->SR1 & I2C_SR1_ADDR){
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f003 0302 	and.w	r3, r3, #2
 8000434:	2b00      	cmp	r3, #0
 8000436:	d006      	beq.n	8000446 <I2C1_EV_IRQHandler+0x46>
		(void) I2C1->SR1;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 800043a:	695b      	ldr	r3, [r3, #20]
		(void) I2C1->SR2;
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <I2C1_EV_IRQHandler+0x4c>)
 800043e:	699b      	ldr	r3, [r3, #24]
		StopGTimer(GTimer1);
 8000440:	2000      	movs	r0, #0
 8000442:	f000 ff61 	bl	8001308 <StopGTimer>
	}

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40005400 	.word	0x40005400

08000450 <InitLedFSM>:
uint8_t _statePis;				// Переменная предыдущего состояния автомата
uint8_t entryPis1;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

	statePis = _statePis = 0;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <InitLedFSM+0x20>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <InitLedFSM+0x20>)
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <InitLedFSM+0x24>)
 8000460:	701a      	strb	r2, [r3, #0]
	entryPis1 = 0;
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <InitLedFSM+0x28>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]

}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000091 	.word	0x20000091
 8000474:	2000008f 	.word	0x2000008f
 8000478:	20000090 	.word	0x20000090

0800047c <ProcessLedFSM>:

void ProcessLedFSM (void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	if (statePis != _statePis) entryPis1 = 1; else entryPis1 = 0;
 8000480:	4b31      	ldr	r3, [pc, #196]	; (8000548 <ProcessLedFSM+0xcc>)
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b31      	ldr	r3, [pc, #196]	; (800054c <ProcessLedFSM+0xd0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	d003      	beq.n	8000494 <ProcessLedFSM+0x18>
 800048c:	4b30      	ldr	r3, [pc, #192]	; (8000550 <ProcessLedFSM+0xd4>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	e002      	b.n	800049a <ProcessLedFSM+0x1e>
 8000494:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <ProcessLedFSM+0xd4>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]

	_statePis = statePis;
 800049a:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <ProcessLedFSM+0xcc>)
 800049c:	781a      	ldrb	r2, [r3, #0]
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <ProcessLedFSM+0xd0>)
 80004a0:	701a      	strb	r2, [r3, #0]

	switch (statePis){
 80004a2:	4b29      	ldr	r3, [pc, #164]	; (8000548 <ProcessLedFSM+0xcc>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d02b      	beq.n	8000502 <ProcessLedFSM+0x86>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	dc49      	bgt.n	8000542 <ProcessLedFSM+0xc6>
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <ProcessLedFSM+0x3c>
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d00a      	beq.n	80004cc <ProcessLedFSM+0x50>
			StopGTimer(GTimer2);
		}
		break;
	}

}
 80004b6:	e044      	b.n	8000542 <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 f8df 	bl	800067c <GetMessage>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d039      	beq.n	8000538 <ProcessLedFSM+0xbc>
			statePis = 1;
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <ProcessLedFSM+0xcc>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
		break;
 80004ca:	e035      	b.n	8000538 <ProcessLedFSM+0xbc>
		if (entryPis1 == 1){
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <ProcessLedFSM+0xd4>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d108      	bne.n	80004e6 <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <ProcessLedFSM+0xd8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <ProcessLedFSM+0xd8>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 fef5 	bl	80012d0 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 ff1e 	bl	8001328 <GetGTimerVal>
 80004ec:	4603      	mov	r3, r0
 80004ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004f2:	d323      	bcc.n	800053c <ProcessLedFSM+0xc0>
			statePis = 2;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <ProcessLedFSM+0xcc>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 ff04 	bl	8001308 <StopGTimer>
		break;
 8000500:	e01c      	b.n	800053c <ProcessLedFSM+0xc0>
		if (entryPis1 == 1){
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <ProcessLedFSM+0xd4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d108      	bne.n	800051c <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <ProcessLedFSM+0xd8>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <ProcessLedFSM+0xd8>)
 8000510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000514:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 feda 	bl	80012d0 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 800051c:	2001      	movs	r0, #1
 800051e:	f000 ff03 	bl	8001328 <GetGTimerVal>
 8000522:	4603      	mov	r3, r0
 8000524:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000528:	d30a      	bcc.n	8000540 <ProcessLedFSM+0xc4>
			statePis = 1;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <ProcessLedFSM+0xcc>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000530:	2001      	movs	r0, #1
 8000532:	f000 fee9 	bl	8001308 <StopGTimer>
		break;
 8000536:	e003      	b.n	8000540 <ProcessLedFSM+0xc4>
		break;
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <ProcessLedFSM+0xc6>
		break;
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <ProcessLedFSM+0xc6>
		break;
 8000540:	bf00      	nop
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000008f 	.word	0x2000008f
 800054c:	20000091 	.word	0x20000091
 8000550:	20000090 	.word	0x20000090
 8000554:	40020800 	.word	0x40020800

08000558 <main>:



/*************************	 Code	*************************/

int main (void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

	InitGPIO();
 800055c:	f000 fda2 	bl	80010a4 <InitGPIO>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0x6c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <main+0x6c>)
 8000566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800056a:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BR15;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0x6c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0x6c>)
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000576:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0x6c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <main+0x6c>)
 800057e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000582:	6193      	str	r3, [r2, #24]
	InitRCC();
 8000584:	f000 fca0 	bl	8000ec8 <InitRCC>
	UpdateNVICActiveAndPriority();
 8000588:	f000 fd44 	bl	8001014 <UpdateNVICActiveAndPriority>
	InitGTimer();
 800058c:	f000 fe88 	bl	80012a0 <InitGTimer>
	InitTIM10();
 8000590:	f000 fe10 	bl	80011b4 <InitTIM10>
	InitMessage();
 8000594:	f000 f818 	bl	80005c8 <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 8000598:	f242 7314 	movw	r3, #10004	; 0x2714
 800059c:	f242 7213 	movw	r2, #10003	; 0x2713
 80005a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80005a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a8:	f000 f990 	bl	80008cc <InitModbusFSM>
	InitLedFSM();
 80005ac:	f7ff ff50 	bl	8000450 <InitLedFSM>
	SendMessage(LedOnMsg);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 f823 	bl	80005fc <SendMessage>

	while(1){

		ProcessModbusSlaveFSM();
 80005b6:	f000 fb37 	bl	8000c28 <ProcessModbusSlaveFSM>
		ProcessLedFSM();
 80005ba:	f7ff ff5f 	bl	800047c <ProcessLedFSM>
		ProcessMessage();
 80005be:	f000 f833 	bl	8000628 <ProcessMessage>
		ProcessModbusSlaveFSM();
 80005c2:	e7f8      	b.n	80005b6 <main+0x5e>
 80005c4:	40020800 	.word	0x40020800

080005c8 <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e007      	b.n	80005e4 <InitMessage+0x1c>
		Messages[i] = '0';
 80005d4:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <InitMessage+0x30>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b1d      	cmp	r3, #29
 80005e8:	ddf4      	ble.n	80005d4 <InitMessage+0xc>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000094 	.word	0x20000094

080005fc <SendMessage>:

void SendMessage (int Msg){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

	if (Messages[Msg] == '0'){
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <SendMessage+0x28>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b30      	cmp	r3, #48	; 0x30
 800060e:	d104      	bne.n	800061a <SendMessage+0x1e>

		Messages[Msg] = '1';
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <SendMessage+0x28>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	2231      	movs	r2, #49	; 0x31
 8000618:	701a      	strb	r2, [r3, #0]
	}
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000094 	.word	0x20000094

08000628 <ProcessMessage>:

void ProcessMessage (void){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e018      	b.n	8000666 <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <ProcessMessage+0x50>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b32      	cmp	r3, #50	; 0x32
 800063e:	d104      	bne.n	800064a <ProcessMessage+0x22>
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <ProcessMessage+0x50>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <ProcessMessage+0x50>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b31      	cmp	r3, #49	; 0x31
 8000654:	d104      	bne.n	8000660 <ProcessMessage+0x38>
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <ProcessMessage+0x50>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	2232      	movs	r2, #50	; 0x32
 800065e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b1d      	cmp	r3, #29
 800066a:	dde3      	ble.n	8000634 <ProcessMessage+0xc>
	}
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000094 	.word	0x20000094

0800067c <GetMessage>:

uint8_t GetMessage (int Msg){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <GetMessage+0x30>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b32      	cmp	r3, #50	; 0x32
 800068e:	d106      	bne.n	800069e <GetMessage+0x22>
		Messages[Msg] = '0';
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <GetMessage+0x30>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	701a      	strb	r2, [r3, #0]
		return 1;
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <GetMessage+0x24>
	}
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000094 	.word	0x20000094

080006b0 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 80006be:	4b58      	ldr	r3, [pc, #352]	; (8000820 <InitModbusUSART+0x170>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a57      	ldr	r2, [pc, #348]	; (8000820 <InitModbusUSART+0x170>)
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <InitModbusUSART+0x174>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a55      	ldr	r2, [pc, #340]	; (8000824 <InitModbusUSART+0x174>)
 80006d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80006d4:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 80006d6:	4b53      	ldr	r3, [pc, #332]	; (8000824 <InitModbusUSART+0x174>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4a52      	ldr	r2, [pc, #328]	; (8000824 <InitModbusUSART+0x174>)
 80006dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e0:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <InitModbusUSART+0x174>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	4a4f      	ldr	r2, [pc, #316]	; (8000824 <InitModbusUSART+0x174>)
 80006e8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80006ec:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <InitModbusUSART+0x174>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	4a4c      	ldr	r2, [pc, #304]	; (8000824 <InitModbusUSART+0x174>)
 80006f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f8:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <InitModbusUSART+0x174>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a49      	ldr	r2, [pc, #292]	; (8000824 <InitModbusUSART+0x174>)
 8000700:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000704:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 8000706:	4b47      	ldr	r3, [pc, #284]	; (8000824 <InitModbusUSART+0x174>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a46      	ldr	r2, [pc, #280]	; (8000824 <InitModbusUSART+0x174>)
 800070c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000710:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 8000712:	4b44      	ldr	r3, [pc, #272]	; (8000824 <InitModbusUSART+0x174>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a43      	ldr	r2, [pc, #268]	; (8000824 <InitModbusUSART+0x174>)
 8000718:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800071c:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 800071e:	4b41      	ldr	r3, [pc, #260]	; (8000824 <InitModbusUSART+0x174>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a40      	ldr	r2, [pc, #256]	; (8000824 <InitModbusUSART+0x174>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000728:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <InitModbusUSART+0x174>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	4a3d      	ldr	r2, [pc, #244]	; (8000824 <InitModbusUSART+0x174>)
 8000730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000734:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <InitModbusUSART+0x174>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a3a      	ldr	r2, [pc, #232]	; (8000824 <InitModbusUSART+0x174>)
 800073c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000740:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <InitModbusUSART+0x174>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a37      	ldr	r2, [pc, #220]	; (8000824 <InitModbusUSART+0x174>)
 8000748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074c:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f242 7214 	movw	r2, #10004	; 0x2714
 8000754:	4293      	cmp	r3, r2
 8000756:	d15e      	bne.n	8000816 <InitModbusUSART+0x166>

		USART->BRR = Speed;													// Установка скорости
 8000758:	4a33      	ldr	r2, [pc, #204]	; (8000828 <InitModbusUSART+0x178>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 800075e:	4b32      	ldr	r3, [pc, #200]	; (8000828 <InitModbusUSART+0x178>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a31      	ldr	r2, [pc, #196]	; (8000828 <InitModbusUSART+0x178>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	60d3      	str	r3, [r2, #12]

		if(ParityControl == ParityControlOn){
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000770:	4293      	cmp	r3, r2
 8000772:	d10b      	bne.n	800078c <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <InitModbusUSART+0x178>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <InitModbusUSART+0x178>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <InitModbusUSART+0x178>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <InitModbusUSART+0x178>)
 8000786:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800078a:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000792:	4293      	cmp	r3, r2
 8000794:	d105      	bne.n	80007a2 <InitModbusUSART+0xf2>
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <InitModbusUSART+0x178>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <InitModbusUSART+0x178>)
 800079c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007a0:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f242 7212 	movw	r2, #10002	; 0x2712
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d105      	bne.n	80007b8 <InitModbusUSART+0x108>
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <InitModbusUSART+0x178>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <InitModbusUSART+0x178>)
 80007b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007b6:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f242 7213 	movw	r2, #10003	; 0x2713
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10b      	bne.n	80007da <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <InitModbusUSART+0x178>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <InitModbusUSART+0x178>)
 80007c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007cc:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <InitModbusUSART+0x178>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <InitModbusUSART+0x178>)
 80007d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d8:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <InitModbusUSART+0x178>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <InitModbusUSART+0x178>)
 80007e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e4:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <InitModbusUSART+0x178>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <InitModbusUSART+0x178>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <InitModbusUSART+0x178>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <InitModbusUSART+0x178>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	60d3      	str	r3, [r2, #12]

		USART->CR3 |= USART_CR3_DMAT;										// Разрешаем запросы к DMA от модуля USART
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <InitModbusUSART+0x178>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <InitModbusUSART+0x178>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6153      	str	r3, [r2, #20]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <InitModbusUSART+0x178>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <InitModbusUSART+0x178>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	60d3      	str	r3, [r2, #12]

	}

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40011400 	.word	0x40011400

0800082c <InitDMAforUSART>:

void InitDMAforUSART (void){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <InitDMAforUSART+0x90>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <InitDMAforUSART+0x90>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800083a:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream7->CR |= DMA_SxCR_CHSEL_0 |
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <InitDMAforUSART+0x94>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <InitDMAforUSART+0x94>)
 8000842:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8000846:	6013      	str	r3, [r2, #0]
						DMA_SxCR_CHSEL_2;

	DMA2_Stream7->PAR = (uint32_t) & USART->DR;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <InitDMAforUSART+0x94>)
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <InitDMAforUSART+0x98>)
 800084c:	609a      	str	r2, [r3, #8]
	DMA2_Stream7->M0AR = (uint32_t) & ModbusSendData[0];
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <InitDMAforUSART+0x94>)
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <InitDMAforUSART+0x9c>)
 8000852:	60da      	str	r2, [r3, #12]

	DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <InitDMAforUSART+0x94>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <InitDMAforUSART+0x94>)
 800085a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800085e:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <InitDMAforUSART+0x94>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <InitDMAforUSART+0x94>)
 8000866:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800086a:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <InitDMAforUSART+0x94>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <InitDMAforUSART+0x94>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000876:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PINC;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <InitDMAforUSART+0x94>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <InitDMAforUSART+0x94>)
 800087e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000882:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_PL;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <InitDMAforUSART+0x94>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <InitDMAforUSART+0x94>)
 800088a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800088e:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <InitDMAforUSART+0x94>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <InitDMAforUSART+0x94>)
 8000896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089a:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_CIRC;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <InitDMAforUSART+0x94>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <InitDMAforUSART+0x94>)
 80008a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <InitDMAforUSART+0x94>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <InitDMAforUSART+0x94>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]

}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40023800 	.word	0x40023800
 80008c0:	400264b8 	.word	0x400264b8
 80008c4:	40011404 	.word	0x40011404
 80008c8:	200000c0 	.word	0x200000c0

080008cc <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fee5 	bl	80006b0 <InitModbusUSART>
	InitDMAforUSART();
 80008e6:	f7ff ffa1 	bl	800082c <InitDMAforUSART>
	state = _state = 0;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <InitModbusFSM+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <InitModbusFSM+0x54>)
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <InitModbusFSM+0x58>)
 80008f6:	701a      	strb	r2, [r3, #0]
	entry = 0;
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <InitModbusFSM+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <InitModbusFSM+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <InitModbusFSM+0x60>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <InitModbusFSM+0x64>)
 800090a:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <InitModbusFSM+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <InitModbusFSM+0x6c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000b6 	.word	0x200000b6
 8000924:	200000ba 	.word	0x200000ba
 8000928:	200000b4 	.word	0x200000b4
 800092c:	200000b5 	.word	0x200000b5
 8000930:	200000bb 	.word	0x200000bb
 8000934:	200002c5 	.word	0x200002c5
 8000938:	200002c4 	.word	0x200002c4

0800093c <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b59      	ldr	r3, [pc, #356]	; (8000aac <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	429a      	cmp	r2, r3
 800094c:	d003      	beq.n	8000956 <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e002      	b.n	800095c <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]

	_state = state;
 800095c:	4b52      	ldr	r3, [pc, #328]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000962:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000964:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b04      	cmp	r3, #4
 800096a:	f200 8099 	bhi.w	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
 800096e:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	08000989 	.word	0x08000989
 8000978:	080009ab 	.word	0x080009ab
 800097c:	080009cd 	.word	0x080009cd
 8000980:	08000a0b 	.word	0x08000a0b
 8000984:	08000a8d 	.word	0x08000a8d

	case 0:

		if (entry == 1){
 8000988:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d102      	bne.n	8000996 <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 8000990:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
		}

		if(GetMessage(ModbusReciveSymbol)){
 8000996:	2016      	movs	r0, #22
 8000998:	f7ff fe70 	bl	800067c <GetMessage>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d07b      	beq.n	8000a9a <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>
			state = 1;
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
		}

		break;
 80009a8:	e077      	b.n	8000a9a <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>

	case 1:

		if (entry == 1){
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d102      	bne.n	80009b8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x7c>
			ReceptionStatus = ReceptionEnabled;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	801a      	strh	r2, [r3, #0]
		if(CurrentItemOfBuf >= ModbusBufSize){

			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 80009b8:	2017      	movs	r0, #23
 80009ba:	f7ff fe5f 	bl	800067c <GetMessage>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d06c      	beq.n	8000a9e <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>
			state = 2;
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	701a      	strb	r2, [r3, #0]
		}

		break;
 80009ca:	e068      	b.n	8000a9e <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>

	case 2:

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b12      	cmp	r3, #18
 80009d2:	d003      	beq.n	80009dc <ProcessSlaveModbusMessageReceptionRTUFSM+0xa0>
 80009d4:	4b39      	ldr	r3, [pc, #228]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa8>
			state = 3;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 80009e2:	e05d      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e006      	b.n	80009fe <ProcessSlaveModbusMessageReceptionRTUFSM+0xc2>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	3301      	adds	r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3f3      	bcc.n	80009f0 <ProcessSlaveModbusMessageReceptionRTUFSM+0xb4>
		break;
 8000a08:	e04a      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 3:

		CRCVal = 0;
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	801a      	strh	r2, [r3, #0]
		CRCRecVal = 0;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	801a      	strh	r2, [r3, #0]

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf - 2);					// Вычисляем CRC16
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3b02      	subs	r3, #2
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	4826      	ldr	r0, [pc, #152]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000a24:	f7ff fc86 	bl	8000334 <CRC16>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000a2e:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3b02      	subs	r3, #2
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000a5a:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d10a      	bne.n	8000a7e <ProcessSlaveModbusMessageReceptionRTUFSM+0x142>
			SendMessage(ModbusMessageReceived);								// Сообщение Modbus получено
 8000a68:	201b      	movs	r0, #27
 8000a6a:	f7ff fdc7 	bl	80005fc <SendMessage>
			_CurrentItemOfBuf = CurrentItemOfBuf;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8000a74:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		else {
			SendMessage(ModbusCRCNotOk);
			state = 4;
		}

		break;
 8000a7c:	e010      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			SendMessage(ModbusCRCNotOk);
 8000a7e:	201a      	movs	r0, #26
 8000a80:	f7ff fdbc 	bl	80005fc <SendMessage>
			state = 4;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	701a      	strb	r2, [r3, #0]
		break;
 8000a8a:	e009      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 4:

		SendMessage(ModbusError);
 8000a8c:	2015      	movs	r0, #21
 8000a8e:	f7ff fdb5 	bl	80005fc <SendMessage>
		state = 0;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]

		break;
 8000a98:	e002      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 8000a9a:	bf00      	nop
 8000a9c:	e000      	b.n	8000aa0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 8000a9e:	bf00      	nop

	}

}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000ba 	.word	0x200000ba
 8000aac:	200000b6 	.word	0x200000b6
 8000ab0:	200000b4 	.word	0x200000b4
 8000ab4:	200002c4 	.word	0x200002c4
 8000ab8:	200002dc 	.word	0x200002dc
 8000abc:	200001c4 	.word	0x200001c4
 8000ac0:	200000b8 	.word	0x200000b8
 8000ac4:	200001c0 	.word	0x200001c0
 8000ac8:	200000bc 	.word	0x200000bc

08000acc <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d003      	beq.n	8000ae6 <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e002      	b.n	8000aec <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b45      	ldr	r3, [pc, #276]	; (8000c08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000af2:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 8000af4:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d87e      	bhi.n	8000bfa <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
 8000afc:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x38>)
 8000afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b02:	bf00      	nop
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b4f 	.word	0x08000b4f
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000bc7 	.word	0x08000bc7

	case 0:
		if (entryMessageGenSlave == 1){
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10e      	bne.n	8000b3a <ProcessMessageGenerationSlaveModbusRTUFSM+0x6e>

			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	e006      	b.n	8000b30 <ProcessMessageGenerationSlaveModbusRTUFSM+0x64>

				ModbusSendData[i] = 0;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3f3      	bcc.n	8000b22 <ProcessMessageGenerationSlaveModbusRTUFSM+0x56>

			}

		}

		if (GetMessage(ModbusMessageReceived)){
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	f7ff fd9e 	bl	800067c <GetMessage>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d054      	beq.n	8000bf0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>
			stateMessageGenSlave = 1;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
		}
			break;
 8000b4c:	e050      	b.n	8000bf0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>

	case 1:

		if (ModbusData[1] == 0x05){
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <ProcessMessageGenerationSlaveModbusRTUFSM+0x14c>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d14e      	bne.n	8000bf4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

			WriteSingleCoil();
 8000b56:	f000 f8bf 	bl	8000cd8 <WriteSingleCoil>
		}

		break;
 8000b5a:	e04b      	b.n	8000bf4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

	case 2:

		CRCRecVal = CRC16(ModbusSendData, _CurrentItemOfBuf - 2);
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	3b02      	subs	r3, #2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	4829      	ldr	r0, [pc, #164]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000b6a:	f7ff fbe3 	bl	8000334 <CRC16>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000b74:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-2] |= CRCRecVal;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3b02      	subs	r3, #2
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000b7e:	5cd1      	ldrb	r1, [r2, r3]
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3b02      	subs	r3, #2
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	b2d1      	uxtb	r1, r2
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000b92:	54d1      	strb	r1, [r2, r3]

		CRCRecVal = CRCRecVal >> 8;
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000b9e:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-1] |= CRCRecVal;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000ba8:	5cd1      	ldrb	r1, [r2, r3]
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	b2d1      	uxtb	r1, r2
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000bbc:	54d1      	strb	r1, [r2, r3]

		stateMessageGenSlave = 3;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	701a      	strb	r2, [r3, #0]

		break;
 8000bc4:	e019      	b.n	8000bfa <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>

	case 3:


		if (entryMessageGenSlave == 1){
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d114      	bne.n	8000bf8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>

			USART->SR &= ~USART_SR_TC;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bd8:	6013      	str	r3, [r2, #0]

			DMA2_Stream7->NDTR = _CurrentItemOfBuf;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000be0:	605a      	str	r2, [r3, #4]

			DMA2_Stream7->CR |= DMA_SxCR_EN;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6013      	str	r3, [r2, #0]

		}

		break;
 8000bee:	e003      	b.n	8000bf8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>
			break;
 8000bf0:	bf00      	nop
 8000bf2:	e002      	b.n	8000bfa <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000bf4:	bf00      	nop
 8000bf6:	e000      	b.n	8000bfa <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000bf8:	bf00      	nop

	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000bb 	.word	0x200000bb
 8000c08:	200000b5 	.word	0x200000b5
 8000c0c:	200002c5 	.word	0x200002c5
 8000c10:	200000c0 	.word	0x200000c0
 8000c14:	200000bc 	.word	0x200000bc
 8000c18:	200001c4 	.word	0x200001c4
 8000c1c:	200001c0 	.word	0x200001c0
 8000c20:	40011400 	.word	0x40011400
 8000c24:	400264b8 	.word	0x400264b8

08000c28 <ProcessModbusSlaveFSM>:


void ProcessModbusSlaveFSM (void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	ProcessSlaveModbusMessageReceptionRTUFSM();
 8000c2c:	f7ff fe86 	bl	800093c <ProcessSlaveModbusMessageReceptionRTUFSM>
	ProcessMessageGenerationSlaveModbusRTUFSM();
 8000c30:	f7ff ff4c 	bl	8000acc <ProcessMessageGenerationSlaveModbusRTUFSM>

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <USART6_IRQHandler>:


/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/


void ModbusUSART_IRQHandler (void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <USART6_IRQHandler+0x54>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0320 	and.w	r3, r3, #32
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d016      	beq.n	8000c76 <USART6_IRQHandler+0x3e>

		ReceptionStatus = ReceptionEnabled;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <USART6_IRQHandler+0x58>)
 8000c4a:	2264      	movs	r2, #100	; 0x64
 8000c4c:	801a      	strh	r2, [r3, #0]
		MRTUcount = 0;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <USART6_IRQHandler+0x5c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	801a      	strh	r2, [r3, #0]

		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <USART6_IRQHandler+0x54>)
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <USART6_IRQHandler+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <USART6_IRQHandler+0x64>)
 8000c62:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <USART6_IRQHandler+0x60>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <USART6_IRQHandler+0x60>)
 8000c6e:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol);						// Активируем сообщение ModbusReciveSymbol
 8000c70:	2016      	movs	r0, #22
 8000c72:	f7ff fcc3 	bl	80005fc <SendMessage>
	}

	if (USART->SR & USART_SR_ORE){
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <USART6_IRQHandler+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <USART6_IRQHandler+0x50>
		state = 4;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <USART6_IRQHandler+0x68>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	701a      	strb	r2, [r3, #0]
	}

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40011400 	.word	0x40011400
 8000c90:	200002dc 	.word	0x200002dc
 8000c94:	200002c8 	.word	0x200002c8
 8000c98:	200002c4 	.word	0x200002c4
 8000c9c:	200001c4 	.word	0x200001c4
 8000ca0:	200000ba 	.word	0x200000ba

08000ca4 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler (void){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

	if (DMA2->HISR & DMA_HISR_TCIF7){
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <DMA2_Stream7_IRQHandler+0x2c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d008      	beq.n	8000cc6 <DMA2_Stream7_IRQHandler+0x22>

		stateMessageGenSlave = 0;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <DMA2_Stream7_IRQHandler+0x30>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]

		DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <DMA2_Stream7_IRQHandler+0x2c>)
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <DMA2_Stream7_IRQHandler+0x2c>)
 8000cc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cc4:	60d3      	str	r3, [r2, #12]

	}

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40026400 	.word	0x40026400
 8000cd4:	200000bb 	.word	0x200000bb

08000cd8 <WriteSingleCoil>:

/*************************	 Modbus Function (Modbus функции)	*************************/


/* Запись состояния одного выхода (Код функции 0x05) */
void WriteSingleCoil (void){
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0

	if (ModbusData[3] == 0x50){
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	2b50      	cmp	r3, #80	; 0x50
 8000ce4:	d145      	bne.n	8000d72 <WriteSingleCoil+0x9a>

		if (ModbusData[4] == 0xff && ModbusData[5] == 0x00){
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000ce8:	791b      	ldrb	r3, [r3, #4]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d11e      	bne.n	8000d2c <WriteSingleCoil+0x54>
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11a      	bne.n	8000d2c <WriteSingleCoil+0x54>

			GPIOC->BSRR |= GPIO_BSRR_BS14;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <WriteSingleCoil+0xa8>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <WriteSingleCoil+0xa8>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e008      	b.n	8000d1a <WriteSingleCoil+0x42>
				ModbusSendData[i] = ModbusData[i];
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	491b      	ldr	r1, [pc, #108]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000d0e:	5c89      	ldrb	r1, [r1, r2]
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <WriteSingleCoil+0xac>)
 8000d12:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3301      	adds	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <WriteSingleCoil+0xb0>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3b02      	subs	r3, #2
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbf0      	blt.n	8000d08 <WriteSingleCoil+0x30>
			}
				stateMessageGenSlave = 2;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <WriteSingleCoil+0xb4>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	701a      	strb	r2, [r3, #0]
			}

			if (ModbusData[4] == 0x00 && ModbusData[5] == 0xff){
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11e      	bne.n	8000d72 <WriteSingleCoil+0x9a>
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d11a      	bne.n	8000d72 <WriteSingleCoil+0x9a>

			GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <WriteSingleCoil+0xa8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <WriteSingleCoil+0xa8>)
 8000d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d46:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71bb      	strb	r3, [r7, #6]
 8000d4c:	e008      	b.n	8000d60 <WriteSingleCoil+0x88>
				ModbusSendData[i] = ModbusData[i];
 8000d4e:	79ba      	ldrb	r2, [r7, #6]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <WriteSingleCoil+0xa4>)
 8000d54:	5c89      	ldrb	r1, [r1, r2]
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <WriteSingleCoil+0xac>)
 8000d58:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	71bb      	strb	r3, [r7, #6]
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <WriteSingleCoil+0xb0>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3b02      	subs	r3, #2
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <WriteSingleCoil+0x76>
			}
				stateMessageGenSlave = 2;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <WriteSingleCoil+0xb4>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	701a      	strb	r2, [r3, #0]
			}

	}

}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	200001c4 	.word	0x200001c4
 8000d80:	40020800 	.word	0x40020800
 8000d84:	200000c0 	.word	0x200000c0
 8000d88:	200000bc 	.word	0x200000bc
 8000d8c:	200000bb 	.word	0x200000bb

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <__NVIC_EnableIRQ+0x34>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <InitRCC+0x140>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <InitRCC+0x140>)
 8000ed2:	f023 030f 	bic.w	r3, r3, #15
 8000ed6:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <InitRCC+0x140>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a4a      	ldr	r2, [pc, #296]	; (8001008 <InitRCC+0x140>)
 8000ede:	f043 0303 	orr.w	r3, r3, #3
 8000ee2:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <InitRCC+0x144>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <InitRCC+0x144>)
 8000eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eee:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <InitRCC+0x148>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <InitRCC+0x148>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 8000efc:	bf00      	nop
 8000efe:	4b44      	ldr	r3, [pc, #272]	; (8001010 <InitRCC+0x148>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <InitRCC+0x148>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <InitRCC+0x148>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f14:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <InitRCC+0x148>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <InitRCC+0x148>)
 8000f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f20:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <InitRCC+0x148>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <InitRCC+0x148>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <InitRCC+0x148>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a37      	ldr	r2, [pc, #220]	; (8001010 <InitRCC+0x148>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <InitRCC+0x148>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a34      	ldr	r2, [pc, #208]	; (8001010 <InitRCC+0x148>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <InitRCC+0x148>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <InitRCC+0x148>)
 8000f4c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f54:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <InitRCC+0x148>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <InitRCC+0x148>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <InitRCC+0x148>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <InitRCC+0x148>)
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <InitRCC+0x148>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <InitRCC+0x148>)
 8000f74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f78:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <InitRCC+0x148>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <InitRCC+0x148>)
 8000f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f84:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 8000f86:	bf00      	nop
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <InitRCC+0x148>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f9      	beq.n	8000f88 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <InitRCC+0x148>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <InitRCC+0x148>)
 8000f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f9e:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <InitRCC+0x148>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <InitRCC+0x148>)
 8000fa6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000faa:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <InitRCC+0x148>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <InitRCC+0x148>)
 8000fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb6:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <InitRCC+0x148>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <InitRCC+0x148>)
 8000fbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fc2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <InitRCC+0x148>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <InitRCC+0x148>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <InitRCC+0x148>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <InitRCC+0x148>)
 8000fd2:	f023 0303 	bic.w	r3, r3, #3
 8000fd6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <InitRCC+0x148>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <InitRCC+0x148>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 8000fe4:	bf00      	nop
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <InitRCC+0x148>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d1f9      	bne.n	8000fe6 <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <InitRCC+0x148>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <InitRCC+0x148>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 8000ffe:	f7ff f919 	bl	8000234 <SystemCoreClockUpdate>

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00
 800100c:	40007000 	.word	0x40007000
 8001010:	40023800 	.word	0x40023800

08001014 <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

	__NVIC_SetPriorityGrouping(4);											// 16 групп прерываний и 16 подгрупп
 8001018:	2004      	movs	r0, #4
 800101a:	f7ff feb9 	bl	8000d90 <__NVIC_SetPriorityGrouping>

	__NVIC_EnableIRQ(USART6_IRQn);											// Разрешаем прерывания от USART для Modbus
 800101e:	2047      	movs	r0, #71	; 0x47
 8001020:	f7ff feda 	bl	8000dd8 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);									// Разрешаем прерывания от 10-го таймера
 8001024:	2019      	movs	r0, #25
 8001026:	f7ff fed7 	bl	8000dd8 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA2_Stream7_IRQn);									// Разрешаем прерывания от DMA обслуживающего USART Modbus
 800102a:	2046      	movs	r0, #70	; 0x46
 800102c:	f7ff fed4 	bl	8000dd8 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(I2C1_EV_IRQn);											// Разрешаем прерывания событий I2C1
 8001030:	201f      	movs	r0, #31
 8001032:	f7ff fed1 	bl	8000dd8 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA1_Stream1_IRQn);									// Разрешаем прерывания от DMA1_Stream1, обслуживающего I2C1
 8001036:	200c      	movs	r0, #12
 8001038:	f7ff fece 	bl	8000dd8 <__NVIC_EnableIRQ>

	__NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(1, 0, 2));			// Устанавливаем Modbus прерывание в первую группу, первым приоритетом
 800103c:	2202      	movs	r2, #2
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff ff0f 	bl	8000e64 <NVIC_EncodePriority>
 8001046:	4603      	mov	r3, r0
 8001048:	4619      	mov	r1, r3
 800104a:	2047      	movs	r0, #71	; 0x47
 800104c:	f7ff fee0 	bl	8000e10 <__NVIC_SetPriority>
	__NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(2, 1, 3));	// Прервания 10го таймера за прерыванием Modbus
 8001050:	2203      	movs	r2, #3
 8001052:	2101      	movs	r1, #1
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff ff05 	bl	8000e64 <NVIC_EncodePriority>
 800105a:	4603      	mov	r3, r0
 800105c:	4619      	mov	r1, r3
 800105e:	2019      	movs	r0, #25
 8001060:	f7ff fed6 	bl	8000e10 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(1, 1, 3));
 8001064:	2203      	movs	r2, #3
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fefb 	bl	8000e64 <NVIC_EncodePriority>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	2046      	movs	r0, #70	; 0x46
 8001074:	f7ff fecc 	bl	8000e10 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(3, 0, 2));
 8001078:	2202      	movs	r2, #2
 800107a:	2100      	movs	r1, #0
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff fef1 	bl	8000e64 <NVIC_EncodePriority>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	200c      	movs	r0, #12
 8001088:	f7ff fec2 	bl	8000e10 <__NVIC_SetPriority>
	__NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(3, 2, 3));
 800108c:	2203      	movs	r2, #3
 800108e:	2102      	movs	r1, #2
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff fee7 	bl	8000e64 <NVIC_EncodePriority>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	201f      	movs	r0, #31
 800109c:	f7ff feb8 	bl	8000e10 <__NVIC_SetPriority>

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <InitGPIO>:

void InitGPIO (void){
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <InitGPIO+0x108>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <InitGPIO+0x108>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <InitGPIO+0x108>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a3c      	ldr	r2, [pc, #240]	; (80011ac <InitGPIO+0x108>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <InitGPIO+0x108>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a39      	ldr	r2, [pc, #228]	; (80011ac <InitGPIO+0x108>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <InitGPIO+0x10c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a37      	ldr	r2, [pc, #220]	; (80011b0 <InitGPIO+0x10c>)
 80010d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010d6:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <InitGPIO+0x10c>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <InitGPIO+0x10c>)
 80010de:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80010e2:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <InitGPIO+0x10c>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <InitGPIO+0x10c>)
 80010ea:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80010ee:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <InitGPIO+0x10c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a2e      	ldr	r2, [pc, #184]	; (80011b0 <InitGPIO+0x10c>)
 80010f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80010fa:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <InitGPIO+0x10c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <InitGPIO+0x10c>)
 8001102:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001106:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <InitGPIO+0x10c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <InitGPIO+0x10c>)
 800110e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001112:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <InitGPIO+0x10c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <InitGPIO+0x10c>)
 800111a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800111e:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <InitGPIO+0x10c>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <InitGPIO+0x10c>)
 8001126:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800112a:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <InitGPIO+0x10c>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <InitGPIO+0x10c>)
 8001132:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001136:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <InitGPIO+0x10c>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <InitGPIO+0x10c>)
 800113e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001142:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <InitGPIO+0x10c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <InitGPIO+0x10c>)
 800114a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800114e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <InitGPIO+0x10c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <InitGPIO+0x10c>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT15;						// Настройка порта PC15 на выход push-pull
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <InitGPIO+0x10c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <InitGPIO+0x10c>)
 8001162:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001166:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <InitGPIO+0x10c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <InitGPIO+0x10c>)
 800116e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001172:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;				// Настройка на высокую выходную скорость
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <InitGPIO+0x10c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <InitGPIO+0x10c>)
 800117a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800117e:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD15;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <InitGPIO+0x10c>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <InitGPIO+0x10c>)
 8001186:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800118a:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE15;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <InitGPIO+0x10c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <InitGPIO+0x10c>)
 8001192:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001196:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE15_0;					// Настройка порта PC15 на выход
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <InitGPIO+0x10c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <InitGPIO+0x10c>)
 800119e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800

080011b4 <InitTIM10>:

/*************************	 Code	*************************/

/*************************	 Функции аппаратной инициализации таймера	*************************/

void InitTIM10 (void){
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <InitTIM10+0x58>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <InitTIM10+0x58>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->PSC = 96 - 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <InitTIM10+0x5c>)
 80011c6:	225f      	movs	r2, #95	; 0x5f
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->ARR = 500;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <InitTIM10+0x5c>)
 80011cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM10->DIER |= TIM_DIER_UIE;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <InitTIM10+0x5c>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <InitTIM10+0x5c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	60d3      	str	r3, [r2, #12]

	MRTUcount = 0;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <InitTIM10+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	801a      	strh	r2, [r3, #0]
	ReceptionStatus = ReceptionStopped;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <InitTIM10+0x64>)
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	801a      	strh	r2, [r3, #0]

	TIM10->CR1 |= TIM_CR1_CEN;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <InitTIM10+0x5c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <InitTIM10+0x5c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]

	TIM10->EGR |= TIM_EGR_UG;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <InitTIM10+0x5c>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <InitTIM10+0x5c>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6153      	str	r3, [r2, #20]

}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40014400 	.word	0x40014400
 8001214:	200002c8 	.word	0x200002c8
 8001218:	200002dc 	.word	0x200002dc

0800121c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e00f      	b.n	8001248 <TIM1_UP_TIM10_IRQHandler+0x2c>

				if (GTimerState[i] == TimerRunning){
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <TIM1_UP_TIM10_IRQHandler+0x70>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <TIM1_UP_TIM10_IRQHandler+0x26>

					GTimerVal[i]++;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800123a:	3201      	adds	r2, #1
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <TIM1_UP_TIM10_IRQHandler+0x74>)
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	3301      	adds	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d9ec      	bls.n	8001228 <TIM1_UP_TIM10_IRQHandler+0xc>
				}
			}

	if (ReceptionStatus == ReceptionEnabled){
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d10f      	bne.n	8001276 <TIM1_UP_TIM10_IRQHandler+0x5a>

		MRTUcount++;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001260:	801a      	strh	r2, [r3, #0]

		if (MRTUcount >= 5){
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d905      	bls.n	8001276 <TIM1_UP_TIM10_IRQHandler+0x5a>
			SendMessage(ModbusRTUTimeOut);
 800126a:	2017      	movs	r0, #23
 800126c:	f7ff f9c6 	bl	80005fc <SendMessage>
			ReceptionStatus = ReceptionStopped;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	801a      	strh	r2, [r3, #0]
		}

	}

	TIM10->SR &= ~TIM_SR_UIF;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <TIM1_UP_TIM10_IRQHandler+0x80>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6113      	str	r3, [r2, #16]

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002d8 	.word	0x200002d8
 8001290:	200002cc 	.word	0x200002cc
 8001294:	200002dc 	.word	0x200002dc
 8001298:	200002c8 	.word	0x200002c8
 800129c:	40014400 	.word	0x40014400

080012a0 <InitGTimer>:

/*************************	 Функции глобальных таймеров	*************************/

void InitGTimer(void){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < MaxGTimers; i++){
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	e006      	b.n	80012ba <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <InitGTimer+0x2c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MaxGTimers; i++){
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3301      	adds	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d9f5      	bls.n	80012ac <InitGTimer+0xc>
	}

}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200002d8 	.word	0x200002d8

080012d0 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <StartGTimer+0x30>)
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d108      	bne.n	80012f6 <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <StartGTimer+0x34>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <StartGTimer+0x30>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	54d1      	strb	r1, [r2, r3]
	}

}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	200002d8 	.word	0x200002d8
 8001304:	200002cc 	.word	0x200002cc

08001308 <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <StopGTimer+0x1c>)
 8001316:	2100      	movs	r1, #0
 8001318:	54d1      	strb	r1, [r2, r3]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	200002d8 	.word	0x200002d8

08001328 <GetGTimerVal>:
		GTimerState[GTimerID] = TimerRunning;
	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a03      	ldr	r2, [pc, #12]	; (8001344 <GetGTimerVal+0x1c>)
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	200002cc 	.word	0x200002cc

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800134c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134e:	e003      	b.n	8001358 <LoopCopyDataInit>

08001350 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001352:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001354:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001356:	3104      	adds	r1, #4

08001358 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800135c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001360:	d3f6      	bcc.n	8001350 <CopyDataInit>
  ldr  r2, =_sbss
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001364:	e002      	b.n	800136c <LoopFillZerobss>

08001366 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001366:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001368:	f842 3b04 	str.w	r3, [r2], #4

0800136c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001370:	d3f9      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001372:	f7fe ff31 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f000 f811 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff f8ed 	bl	8000558 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001380:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001384:	08001614 	.word	0x08001614
  ldr  r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800138c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001390:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001394:	200002e0 	.word	0x200002e0

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4d0d      	ldr	r5, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2600      	movs	r6, #0
 80013a8:	42a6      	cmp	r6, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4d0b      	ldr	r5, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 f818 	bl	80013e4 <_init>
 80013b4:	1b64      	subs	r4, r4, r5
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2600      	movs	r6, #0
 80013ba:	42a6      	cmp	r6, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c4:	4798      	blx	r3
 80013c6:	3601      	adds	r6, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ce:	4798      	blx	r3
 80013d0:	3601      	adds	r6, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	0800160c 	.word	0x0800160c
 80013d8:	0800160c 	.word	0x0800160c
 80013dc:	0800160c 	.word	0x0800160c
 80013e0:	08001610 	.word	0x08001610

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
