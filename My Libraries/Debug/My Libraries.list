
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800198c  0800198c  0001198c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bc0  08001bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002dc  20000004  08001bc8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002e0  08001bc8  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002c4e  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000bae  00000000  00000000  00022c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000250  00000000  00000000  00023830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001b8  00000000  00000000  00023a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e583  00000000  00000000  00023c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00003626  00000000  00000000  000321bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050546  00000000  00000000  000357e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00085d27  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000067c  00000000  00000000  00085d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001974 	.word	0x08001974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001974 	.word	0x08001974

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	0800198c 	.word	0x0800198c

08000334 <CRC16>:

/*************************	 Code	*************************/



unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen ){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

unsigned char uchCRCHi = 0xFF ; 			/* high byte of CRC initialized */
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
unsigned char uchCRCLo = 0xFF ; 			/* low byte of CRC initialized */
 8000344:	23ff      	movs	r3, #255	; 0xff
 8000346:	73bb      	strb	r3, [r7, #14]
unsigned uIndex ; 							/* will index into CRC lookup table */
while (usDataLen--){ 						/* pass through message buffer */
 8000348:	e013      	b.n	8000372 <CRC16+0x3e>
uIndex = uchCRCLo ^ *puchMsg++; 			/* calculate the CRC */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	60bb      	str	r3, [r7, #8]
uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <CRC16+0x64>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	4053      	eors	r3, r2
 8000366:	73bb      	strb	r3, [r7, #14]
uchCRCHi = auchCRCLo[uIndex];
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <CRC16+0x68>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
while (usDataLen--){ 						/* pass through message buffer */
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	807a      	strh	r2, [r7, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	b21a      	sxth	r2, r3
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	b21b      	sxth	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b21b      	sxth	r3, r3
 800038a:	b29b      	uxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	0800199c 	.word	0x0800199c
 800039c:	08001a9c 	.word	0x08001a9c

080003a0 <InitI2C1>:

uint8_t Schet;

/*************************	 Code	*************************/

void InitI2C1 (void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

/* I2C1 GPIO Configuration */

	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003a4:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <InitI2C1+0x180>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <InitI2C1+0x180>)
 80003aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1;				// Configuring the I / O Direction Mode for the Alternate Function
 80003b0:	4b5b      	ldr	r3, [pc, #364]	; (8000520 <InitI2C1+0x180>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a5a      	ldr	r2, [pc, #360]	; (8000520 <InitI2C1+0x180>)
 80003b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6;					// Configuring the output type of the open-drain
 80003bc:	4b58      	ldr	r3, [pc, #352]	; (8000520 <InitI2C1+0x180>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a57      	ldr	r2, [pc, #348]	; (8000520 <InitI2C1+0x180>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED6;
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <InitI2C1+0x180>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a54      	ldr	r2, [pc, #336]	; (8000520 <InitI2C1+0x180>)
 80003ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003d2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_0;			// Configuring the output speed is low
 80003d4:	4b52      	ldr	r3, [pc, #328]	; (8000520 <InitI2C1+0x180>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a51      	ldr	r2, [pc, #324]	; (8000520 <InitI2C1+0x180>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003de:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD6;
 80003e0:	4b4f      	ldr	r3, [pc, #316]	; (8000520 <InitI2C1+0x180>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a4e      	ldr	r2, [pc, #312]	; (8000520 <InitI2C1+0x180>)
 80003e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD6_0;					// Configuring the I / O pull-up
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <InitI2C1+0x180>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a4b      	ldr	r2, [pc, #300]	; (8000520 <InitI2C1+0x180>)
 80003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f6:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL6;					// Enable AF4 (I2C1...3) on port PB6
 80003f8:	4b49      	ldr	r3, [pc, #292]	; (8000520 <InitI2C1+0x180>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a48      	ldr	r2, [pc, #288]	; (8000520 <InitI2C1+0x180>)
 80003fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000402:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_2;
 8000404:	4b46      	ldr	r3, [pc, #280]	; (8000520 <InitI2C1+0x180>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a45      	ldr	r2, [pc, #276]	; (8000520 <InitI2C1+0x180>)
 800040a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040e:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~GPIO_MODER_MODER7;
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <InitI2C1+0x180>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a42      	ldr	r2, [pc, #264]	; (8000520 <InitI2C1+0x180>)
 8000416:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER7_1;				// Configuring the I / O Direction Mode for the Alternate Function
 800041c:	4b40      	ldr	r3, [pc, #256]	; (8000520 <InitI2C1+0x180>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a3f      	ldr	r2, [pc, #252]	; (8000520 <InitI2C1+0x180>)
 8000422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000426:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT7;					// Configuring the output type of the open-drain
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <InitI2C1+0x180>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <InitI2C1+0x180>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED7;
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <InitI2C1+0x180>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <InitI2C1+0x180>)
 800043a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED7_0;			// Configuring the output speed is low
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <InitI2C1+0x180>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a36      	ldr	r2, [pc, #216]	; (8000520 <InitI2C1+0x180>)
 8000446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800044a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD7;
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <InitI2C1+0x180>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <InitI2C1+0x180>)
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD7_0;					// Configuring the I / O pull-up
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <InitI2C1+0x180>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <InitI2C1+0x180>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL7;					// Enable AF4 (I2C1...3) on port PB6
 8000464:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <InitI2C1+0x180>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <InitI2C1+0x180>)
 800046a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800046e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7_2;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <InitI2C1+0x180>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <InitI2C1+0x180>)
 8000476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800047a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;					// Enable I2C1 clocking
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <InitI2C1+0x184>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <InitI2C1+0x184>)
 8000482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->OAR2 &= ~I2C_OAR2_ENDUAL;						// Disable Dual addressing mode
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <InitI2C1+0x188>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <InitI2C1+0x188>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 &= ~I2C_CR1_ENGC;							// Disable General call
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <InitI2C1+0x188>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a23      	ldr	r2, [pc, #140]	; (8000528 <InitI2C1+0x188>)
 800049a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;					// Enable clock stretching
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <InitI2C1+0x188>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <InitI2C1+0x188>)
 80004a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004aa:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_SMBUS;						// Enable I2C mode
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <InitI2C1+0x188>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <InitI2C1+0x188>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6013      	str	r3, [r2, #0]

	I2C1->CR2 &= ~I2C_CR2_FREQ;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <InitI2C1+0x188>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <InitI2C1+0x188>)
 80004be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004c2:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= 48;									// Set 48 MHz frequency
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <InitI2C1+0x188>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <InitI2C1+0x188>)
 80004ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004ce:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~I2C_CCR_FS;							// Sm mode I2C
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <InitI2C1+0x188>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <InitI2C1+0x188>)
 80004d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004da:	61d3      	str	r3, [r2, #28]

	I2C1->CCR &= ~I2C_CCR_CCR;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <InitI2C1+0x188>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <InitI2C1+0x188>)
 80004e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80004e6:	f023 030f 	bic.w	r3, r3, #15
 80004ea:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 240;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <InitI2C1+0x188>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <InitI2C1+0x188>)
 80004f2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80004f6:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE = 3;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <InitI2C1+0x188>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	621a      	str	r2, [r3, #32]

	I2C1->CR2 |= I2C_CR2_ITEVTEN;						// Разрешаем прерывания по событиям отравки и др. (Event interrupt enable)
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <InitI2C1+0x188>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <InitI2C1+0x188>)
 8000504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000508:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= I2C_CR1_PE;							// I2C1 Enable
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <InitI2C1+0x188>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <InitI2C1+0x188>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]

}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400
 8000524:	40023800 	.word	0x40023800
 8000528:	40005400 	.word	0x40005400

0800052c <InitDMAI2C1>:

void InitDMAI2C1 (void){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <InitDMAI2C1+0x90>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <InitDMAI2C1+0x90>)
 8000536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800053a:	6313      	str	r3, [r2, #48]	; 0x30

	DMA1_Stream1->CR &= ~DMA_SxCR_CHSEL;
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <InitDMAI2C1+0x94>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <InitDMAI2C1+0x94>)
 8000542:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000546:	6013      	str	r3, [r2, #0]

//	DMA1_Stream1->M0AR = (uint32_t) & BuferLCDInit[0];
	DMA1_Stream1->PAR = (uint32_t) & I2C1->DR;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <InitDMAI2C1+0x94>)
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <InitDMAI2C1+0x98>)
 800054c:	609a      	str	r2, [r3, #8]

	DMA1_Stream1->NDTR = 2;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <InitDMAI2C1+0x94>)
 8000550:	2202      	movs	r2, #2
 8000552:	605a      	str	r2, [r3, #4]

	DMA1_Stream1->CR &= ~DMA_SxCR_MSIZE;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <InitDMAI2C1+0x94>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <InitDMAI2C1+0x94>)
 800055a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800055e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_PSIZE;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <InitDMAI2C1+0x94>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <InitDMAI2C1+0x94>)
 8000566:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056a:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR |= DMA_SxCR_MINC;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <InitDMAI2C1+0x94>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <InitDMAI2C1+0x94>)
 8000572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000576:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_PINC;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <InitDMAI2C1+0x94>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <InitDMAI2C1+0x94>)
 800057e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR &= ~DMA_SxCR_PL;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <InitDMAI2C1+0x94>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <InitDMAI2C1+0x94>)
 800058a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800058e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_DIR_0;
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <InitDMAI2C1+0x94>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <InitDMAI2C1+0x94>)
 8000596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059a:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_CIRC;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <InitDMAI2C1+0x94>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <InitDMAI2C1+0x94>)
 80005a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <InitDMAI2C1+0x94>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <InitDMAI2C1+0x94>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]

}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40026028 	.word	0x40026028
 80005c4:	40005410 	.word	0x40005410

080005c8 <InitI2C1FSM>:

void InitI2C1FSM (void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	InitI2C1();
 80005cc:	f7ff fee8 	bl	80003a0 <InitI2C1>
	InitDMAI2C1();
 80005d0:	f7ff ffac 	bl	800052c <InitDMAI2C1>

	i2cSendStates = 0;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <InitI2C1FSM+0x1c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	_i2cSendStates = 0;
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <InitI2C1FSM+0x20>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008d 	.word	0x2000008d
 80005e8:	20000025 	.word	0x20000025

080005ec <ProcessI2CWriteFSM>:

void ProcessI2CWriteFSM (void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	if ( i2cSendStates != _i2cSendStates) i2cEntry = 1; else i2cEntry = 0;
 80005f0:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <ProcessI2CWriteFSM+0xe0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d003      	beq.n	8000604 <ProcessI2CWriteFSM+0x18>
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <ProcessI2CWriteFSM+0xe4>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e002      	b.n	800060a <ProcessI2CWriteFSM+0x1e>
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <ProcessI2CWriteFSM+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]

	_i2cSendStates = i2cSendStates;
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <ProcessI2CWriteFSM+0xe0>)
 8000610:	701a      	strb	r2, [r3, #0]

	switch (i2cSendStates){
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b03      	cmp	r3, #3
 8000618:	d853      	bhi.n	80006c2 <ProcessI2CWriteFSM+0xd6>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <ProcessI2CWriteFSM+0x34>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000631 	.word	0x08000631
 8000624:	08000673 	.word	0x08000673
 8000628:	0800068f 	.word	0x0800068f
 800062c:	080006ab 	.word	0x080006ab

	case 0:

		if (i2cEntry == 1){
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <ProcessI2CWriteFSM+0xe4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d105      	bne.n	8000644 <ProcessI2CWriteFSM+0x58>
			DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <ProcessI2CWriteFSM+0xe8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <ProcessI2CWriteFSM+0xe8>)
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	6013      	str	r3, [r2, #0]
//			I2C1LeftBorder = 0;
		}

		if (GetMessage(I2C1StartTransaction)){
 8000644:	200a      	movs	r0, #10
 8000646:	f000 fae1 	bl	8000c0c <GetMessage>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d033      	beq.n	80006b8 <ProcessI2CWriteFSM+0xcc>
			i2cSendStates = 1;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->M0AR = (uint32_t) & I2C1Data[I2C1LeftBorder];
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <ProcessI2CWriteFSM+0xec>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <ProcessI2CWriteFSM+0xf0>)
 800065e:	441a      	add	r2, r3
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <ProcessI2CWriteFSM+0xe8>)
 8000662:	60da      	str	r2, [r3, #12]
			DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <ProcessI2CWriteFSM+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <ProcessI2CWriteFSM+0xe8>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
		}

		break;
 8000670:	e022      	b.n	80006b8 <ProcessI2CWriteFSM+0xcc>

	case 1:

		if (i2cEntry == 1){
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <ProcessI2CWriteFSM+0xe4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d120      	bne.n	80006bc <ProcessI2CWriteFSM+0xd0>
			I2C1->CR1 |= I2C_CR1_START;								// Генерируем СТАРТ условие
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <ProcessI2CWriteFSM+0xf4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <ProcessI2CWriteFSM+0xf4>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6013      	str	r3, [r2, #0]
			i2cSendStates = 2;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 8000688:	2202      	movs	r2, #2
 800068a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800068c:	e016      	b.n	80006bc <ProcessI2CWriteFSM+0xd0>

	case 2:

		if (GetGTimerVal(GTimer1) > 1000){
 800068e:	2000      	movs	r0, #0
 8000690:	f001 f912 	bl	80018b8 <GetGTimerVal>
 8000694:	4603      	mov	r3, r0
 8000696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800069a:	d911      	bls.n	80006c0 <ProcessI2CWriteFSM+0xd4>
			i2cSendStates = 3;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <ProcessI2CWriteFSM+0xdc>)
 800069e:	2203      	movs	r2, #3
 80006a0:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 f8f8 	bl	8001898 <StopGTimer>
		}

		break;
 80006a8:	e00a      	b.n	80006c0 <ProcessI2CWriteFSM+0xd4>

	case 3:

		GPIOC->BSRR |= GPIO_BSRR_BS15;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <ProcessI2CWriteFSM+0xf8>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <ProcessI2CWriteFSM+0xf8>)
 80006b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b4:	6193      	str	r3, [r2, #24]

		break;
 80006b6:	e004      	b.n	80006c2 <ProcessI2CWriteFSM+0xd6>
		break;
 80006b8:	bf00      	nop
 80006ba:	e002      	b.n	80006c2 <ProcessI2CWriteFSM+0xd6>
		break;
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <ProcessI2CWriteFSM+0xd6>
		break;
 80006c0:	bf00      	nop
	}

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000008d 	.word	0x2000008d
 80006cc:	20000025 	.word	0x20000025
 80006d0:	20000021 	.word	0x20000021
 80006d4:	40026028 	.word	0x40026028
 80006d8:	20000020 	.word	0x20000020
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40005400 	.word	0x40005400
 80006e4:	40020800 	.word	0x40020800

080006e8 <DMA1_Stream1_IRQHandler>:



/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/

void DMA1_Stream1_IRQHandler (void){
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF1){
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <DMA1_Stream1_IRQHandler+0x50>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01a      	beq.n	800072e <DMA1_Stream1_IRQHandler+0x46>
		I2C1->CR1 |= I2C_CR1_STOP;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <DMA1_Stream1_IRQHandler+0x54>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <DMA1_Stream1_IRQHandler+0x54>)
 80006fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000702:	6013      	str	r3, [r2, #0]
		I2C1->CR2 &= ~I2C_CR2_DMAEN;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <DMA1_Stream1_IRQHandler+0x54>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <DMA1_Stream1_IRQHandler+0x54>)
 800070a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800070e:	6053      	str	r3, [r2, #4]
		i2cSendStates = 0;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <DMA1_Stream1_IRQHandler+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		I2C1NumberOfTransaction++;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <DMA1_Stream1_IRQHandler+0x5c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <DMA1_Stream1_IRQHandler+0x5c>)
 8000720:	701a      	strb	r2, [r3, #0]
		DMA1->LIFCR |= DMA_LIFCR_CTCIF1;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <DMA1_Stream1_IRQHandler+0x50>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <DMA1_Stream1_IRQHandler+0x50>)
 8000728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072c:	6093      	str	r3, [r2, #8]
	}

}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40026000 	.word	0x40026000
 800073c:	40005400 	.word	0x40005400
 8000740:	2000008d 	.word	0x2000008d
 8000744:	20000022 	.word	0x20000022

08000748 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	if (I2C1->SR1 & I2C_SR1_SB){
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00d      	beq.n	8000774 <I2C1_EV_IRQHandler+0x2c>
		(void) I2C1->SR1;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 800075a:	695b      	ldr	r3, [r3, #20]
		StartGTimer(GTimer1);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 f87f 	bl	8001860 <StartGTimer>
		I2C1->DR = AddrDevice;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 8000764:	224e      	movs	r2, #78	; 0x4e
 8000766:	611a      	str	r2, [r3, #16]
		I2C1->CR2 |= I2C_CR2_DMAEN;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 800076e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000772:	6053      	str	r3, [r2, #4]
	}

	if (I2C1->SR1 & I2C_SR1_ADDR){
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	2b00      	cmp	r3, #0
 800077e:	d006      	beq.n	800078e <I2C1_EV_IRQHandler+0x46>
		(void) I2C1->SR1;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 8000782:	695b      	ldr	r3, [r3, #20]
		(void) I2C1->SR2;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <I2C1_EV_IRQHandler+0x4c>)
 8000786:	699b      	ldr	r3, [r3, #24]
		StopGTimer(GTimer1);
 8000788:	2000      	movs	r0, #0
 800078a:	f001 f885 	bl	8001898 <StopGTimer>
	}

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400

08000798 <InitLcdFSM>:

/*************************	 Функции для дисплея 16xx (16xx Display function)	*************************/

void InitLcdFSM (void){
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

	lcdStates = 0;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <InitLcdFSM+0x20>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	_lcdStates = 0;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <InitLcdFSM+0x24>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	I2C1LeftBorder = 0;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <InitLcdFSM+0x28>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]

}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000024 	.word	0x20000024
 80007c0:	20000020 	.word	0x20000020

080007c4 <ProcessLcdFSM>:

void ProcessLcdFSM (void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

	if (lcdStates != _lcdStates) lcdEntry = 1; else lcdEntry = 0;
 80007ca:	4b77      	ldr	r3, [pc, #476]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b77      	ldr	r3, [pc, #476]	; (80009ac <ProcessLcdFSM+0x1e8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d003      	beq.n	80007de <ProcessLcdFSM+0x1a>
 80007d6:	4b76      	ldr	r3, [pc, #472]	; (80009b0 <ProcessLcdFSM+0x1ec>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e002      	b.n	80007e4 <ProcessLcdFSM+0x20>
 80007de:	4b74      	ldr	r3, [pc, #464]	; (80009b0 <ProcessLcdFSM+0x1ec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	_lcdStates = lcdStates;
 80007e4:	4b70      	ldr	r3, [pc, #448]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b70      	ldr	r3, [pc, #448]	; (80009ac <ProcessLcdFSM+0x1e8>)
 80007ea:	701a      	strb	r2, [r3, #0]

	switch (lcdStates){
 80007ec:	4b6e      	ldr	r3, [pc, #440]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	f200 80d5 	bhi.w	80009a0 <ProcessLcdFSM+0x1dc>
 80007f6:	a201      	add	r2, pc, #4	; (adr r2, 80007fc <ProcessLcdFSM+0x38>)
 80007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fc:	0800080d 	.word	0x0800080d
 8000800:	08000841 	.word	0x08000841
 8000804:	080008e7 	.word	0x080008e7
 8000808:	08000993 	.word	0x08000993

	case 0:
		if (GetMessage(LCDStartInit)){
 800080c:	200b      	movs	r0, #11
 800080e:	f000 f9fd 	bl	8000c0c <GetMessage>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	f000 80be 	beq.w	8000996 <ProcessLcdFSM+0x1d2>

			for (uint8_t i = 0; i < 32; i++){
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e008      	b.n	8000832 <ProcessLcdFSM+0x6e>
				I2C1Data[i] = BuferLCDInit[i];
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4963      	ldr	r1, [pc, #396]	; (80009b4 <ProcessLcdFSM+0x1f0>)
 8000826:	5c89      	ldrb	r1, [r1, r2]
 8000828:	4a63      	ldr	r2, [pc, #396]	; (80009b8 <ProcessLcdFSM+0x1f4>)
 800082a:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 32; i++){
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3301      	adds	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b1f      	cmp	r3, #31
 8000836:	d9f3      	bls.n	8000820 <ProcessLcdFSM+0x5c>
			}
			lcdStates = 1;
 8000838:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800083e:	e0aa      	b.n	8000996 <ProcessLcdFSM+0x1d2>

	case 1:

		if (lcdEntry == 1){
 8000840:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <ProcessLcdFSM+0x1ec>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d108      	bne.n	800085a <ProcessLcdFSM+0x96>
			I2C1LeftBorder = 0;
 8000848:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <ProcessLcdFSM+0x1f8>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->NDTR = 2;
 800084e:	4b5c      	ldr	r3, [pc, #368]	; (80009c0 <ProcessLcdFSM+0x1fc>)
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
			SendMessage(I2C1StartTransaction);
 8000854:	200a      	movs	r0, #10
 8000856:	f000 f999 	bl	8000b8c <SendMessage>
		}

		if (I2C1NumberOfTransaction == 1){
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <ProcessLcdFSM+0x200>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d102      	bne.n	8000868 <ProcessLcdFSM+0xa4>
			StartGTimer(LCDTimer);
 8000862:	2002      	movs	r0, #2
 8000864:	f000 fffc 	bl	8001860 <StartGTimer>
		}

		if (I2C1NumberOfTransaction == 2){
 8000868:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <ProcessLcdFSM+0x200>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10b      	bne.n	8000888 <ProcessLcdFSM+0xc4>
			StopGTimer(LCDTimer);
 8000870:	2002      	movs	r0, #2
 8000872:	f001 f811 	bl	8001898 <StopGTimer>
			I2C1LeftBorder = 4;
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <ProcessLcdFSM+0x1f8>)
 8000878:	2204      	movs	r2, #4
 800087a:	701a      	strb	r2, [r3, #0]
			SendMessage(I2C1StartTransaction);
 800087c:	200a      	movs	r0, #10
 800087e:	f000 f985 	bl	8000b8c <SendMessage>
			StartGTimer(LCDTimer);
 8000882:	2002      	movs	r0, #2
 8000884:	f000 ffec 	bl	8001860 <StartGTimer>
		}

		if (GetGTimerVal(LCDTimer) > 10){
 8000888:	2002      	movs	r0, #2
 800088a:	f001 f815 	bl	80018b8 <GetGTimerVal>
 800088e:	4603      	mov	r3, r0
 8000890:	2b0a      	cmp	r3, #10
 8000892:	f240 8082 	bls.w	800099a <ProcessLcdFSM+0x1d6>
			if (I2C1NumberOfTransaction == 1){
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <ProcessLcdFSM+0x200>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10b      	bne.n	80008b6 <ProcessLcdFSM+0xf2>
				StopGTimer(LCDTimer);
 800089e:	2002      	movs	r0, #2
 80008a0:	f000 fffa 	bl	8001898 <StopGTimer>
				I2C1LeftBorder = 2;
 80008a4:	4b45      	ldr	r3, [pc, #276]	; (80009bc <ProcessLcdFSM+0x1f8>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	701a      	strb	r2, [r3, #0]
				SendMessage(I2C1StartTransaction);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 f96e 	bl	8000b8c <SendMessage>
				StartGTimer(LCDTimer);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f000 ffd5 	bl	8001860 <StartGTimer>
			}
			if (I2C1NumberOfTransaction == 3){
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <ProcessLcdFSM+0x200>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d108      	bne.n	80008d0 <ProcessLcdFSM+0x10c>
				StopGTimer(LCDTimer);
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 ffea 	bl	8001898 <StopGTimer>
				I2C1LeftBorder = 6;
 80008c4:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <ProcessLcdFSM+0x1f8>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	701a      	strb	r2, [r3, #0]
				SendMessage(I2C1StartTransaction);
 80008ca:	200a      	movs	r0, #10
 80008cc:	f000 f95e 	bl	8000b8c <SendMessage>
//				StartGTimer(LCDTimer);
			}
			if (I2C1NumberOfTransaction == 4){
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <ProcessLcdFSM+0x200>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d160      	bne.n	800099a <ProcessLcdFSM+0x1d6>
				DMA1_Stream1->NDTR = 4;
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <ProcessLcdFSM+0x1fc>)
 80008da:	2204      	movs	r2, #4
 80008dc:	605a      	str	r2, [r3, #4]
				lcdStates = 2;
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
//				StartGTimer(LCDTimer);
			}
		}
		break;
 80008e4:	e059      	b.n	800099a <ProcessLcdFSM+0x1d6>

	case 2:

		if (lcdEntry == 1){
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <ProcessLcdFSM+0x1ec>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d105      	bne.n	80008fa <ProcessLcdFSM+0x136>
			I2C1LeftBorder = 8;
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <ProcessLcdFSM+0x1f8>)
 80008f0:	2208      	movs	r2, #8
 80008f2:	701a      	strb	r2, [r3, #0]
			SendMessage(I2C1StartTransaction);
 80008f4:	200a      	movs	r0, #10
 80008f6:	f000 f949 	bl	8000b8c <SendMessage>
		}

		switch (I2C1NumberOfTransaction){
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <ProcessLcdFSM+0x200>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3b04      	subs	r3, #4
 8000900:	2b07      	cmp	r3, #7
 8000902:	d84c      	bhi.n	800099e <ProcessLcdFSM+0x1da>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ProcessLcdFSM+0x148>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	0800098f 	.word	0x0800098f
 8000910:	0800092d 	.word	0x0800092d
 8000914:	0800093b 	.word	0x0800093b
 8000918:	08000949 	.word	0x08000949
 800091c:	08000957 	.word	0x08000957
 8000920:	08000965 	.word	0x08000965
 8000924:	08000973 	.word	0x08000973
 8000928:	08000981 	.word	0x08000981

					case 4:

						break;
					case 5:
						I2C1LeftBorder = 8;
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <ProcessLcdFSM+0x1f8>)
 800092e:	2208      	movs	r2, #8
 8000930:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 8000932:	200a      	movs	r0, #10
 8000934:	f000 f92a 	bl	8000b8c <SendMessage>
						break;
 8000938:	e02a      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 6:
						I2C1LeftBorder = 12;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <ProcessLcdFSM+0x1f8>)
 800093c:	220c      	movs	r2, #12
 800093e:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 8000940:	200a      	movs	r0, #10
 8000942:	f000 f923 	bl	8000b8c <SendMessage>
						break;
 8000946:	e023      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 7:
						I2C1LeftBorder = 16;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <ProcessLcdFSM+0x1f8>)
 800094a:	2210      	movs	r2, #16
 800094c:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 800094e:	200a      	movs	r0, #10
 8000950:	f000 f91c 	bl	8000b8c <SendMessage>

						break;
 8000954:	e01c      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 8:
						I2C1LeftBorder = 20;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <ProcessLcdFSM+0x1f8>)
 8000958:	2214      	movs	r2, #20
 800095a:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 800095c:	200a      	movs	r0, #10
 800095e:	f000 f915 	bl	8000b8c <SendMessage>

						break;
 8000962:	e015      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 9:
						I2C1LeftBorder = 24;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <ProcessLcdFSM+0x1f8>)
 8000966:	2218      	movs	r2, #24
 8000968:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 800096a:	200a      	movs	r0, #10
 800096c:	f000 f90e 	bl	8000b8c <SendMessage>

						break;
 8000970:	e00e      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 10:
						I2C1LeftBorder = 28;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <ProcessLcdFSM+0x1f8>)
 8000974:	221c      	movs	r2, #28
 8000976:	701a      	strb	r2, [r3, #0]
						SendMessage(I2C1StartTransaction);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 f907 	bl	8000b8c <SendMessage>

						break;
 800097e:	e007      	b.n	8000990 <ProcessLcdFSM+0x1cc>
					case 11:
						lcdStates = 3;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <ProcessLcdFSM+0x1e4>)
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
						I2C1NumberOfTransaction = 0;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <ProcessLcdFSM+0x200>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
						break;
 800098c:	e000      	b.n	8000990 <ProcessLcdFSM+0x1cc>
						break;
 800098e:	bf00      	nop
					}
		break;
 8000990:	e005      	b.n	800099e <ProcessLcdFSM+0x1da>

	case 3:

		break;
 8000992:	bf00      	nop
 8000994:	e004      	b.n	80009a0 <ProcessLcdFSM+0x1dc>
		break;
 8000996:	bf00      	nop
 8000998:	e002      	b.n	80009a0 <ProcessLcdFSM+0x1dc>
		break;
 800099a:	bf00      	nop
 800099c:	e000      	b.n	80009a0 <ProcessLcdFSM+0x1dc>
		break;
 800099e:	bf00      	nop

	}
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	20000024 	.word	0x20000024
 80009b0:	2000008e 	.word	0x2000008e
 80009b4:	08001b9c 	.word	0x08001b9c
 80009b8:	20000028 	.word	0x20000028
 80009bc:	20000020 	.word	0x20000020
 80009c0:	40026028 	.word	0x40026028
 80009c4:	20000022 	.word	0x20000022

080009c8 <InitLedFSM>:
uint8_t _statePis;				// Переменная предыдущего состояния автомата
uint8_t entryPis1;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

	statePis = _statePis = 0;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <InitLedFSM+0x20>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <InitLedFSM+0x20>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <InitLedFSM+0x24>)
 80009d8:	701a      	strb	r2, [r3, #0]
	entryPis1 = 0;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <InitLedFSM+0x28>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000091 	.word	0x20000091
 80009ec:	2000008f 	.word	0x2000008f
 80009f0:	20000090 	.word	0x20000090

080009f4 <ProcessLedFSM>:

void ProcessLedFSM (void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	if (statePis != _statePis) entryPis1 = 1; else entryPis1 = 0;
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <ProcessLedFSM+0xcc>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <ProcessLedFSM+0xd0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d003      	beq.n	8000a0c <ProcessLedFSM+0x18>
 8000a04:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <ProcessLedFSM+0xd4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e002      	b.n	8000a12 <ProcessLedFSM+0x1e>
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <ProcessLedFSM+0xd4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]

	_statePis = statePis;
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <ProcessLedFSM+0xcc>)
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <ProcessLedFSM+0xd0>)
 8000a18:	701a      	strb	r2, [r3, #0]

	switch (statePis){
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <ProcessLedFSM+0xcc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d02b      	beq.n	8000a7a <ProcessLedFSM+0x86>
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	dc49      	bgt.n	8000aba <ProcessLedFSM+0xc6>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <ProcessLedFSM+0x3c>
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d00a      	beq.n	8000a44 <ProcessLedFSM+0x50>
			StopGTimer(GTimer2);
		}
		break;
	}

}
 8000a2e:	e044      	b.n	8000aba <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f8eb 	bl	8000c0c <GetMessage>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d039      	beq.n	8000ab0 <ProcessLedFSM+0xbc>
			statePis = 1;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <ProcessLedFSM+0xcc>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
		break;
 8000a42:	e035      	b.n	8000ab0 <ProcessLedFSM+0xbc>
		if (entryPis1 == 1){
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <ProcessLedFSM+0xd4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d108      	bne.n	8000a5e <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <ProcessLedFSM+0xd8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <ProcessLedFSM+0xd8>)
 8000a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a56:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 ff01 	bl	8001860 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 ff2a 	bl	80018b8 <GetGTimerVal>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a6a:	d323      	bcc.n	8000ab4 <ProcessLedFSM+0xc0>
			statePis = 2;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <ProcessLedFSM+0xcc>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 ff10 	bl	8001898 <StopGTimer>
		break;
 8000a78:	e01c      	b.n	8000ab4 <ProcessLedFSM+0xc0>
		if (entryPis1 == 1){
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <ProcessLedFSM+0xd4>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d108      	bne.n	8000a94 <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <ProcessLedFSM+0xd8>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <ProcessLedFSM+0xd8>)
 8000a88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a8c:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fee6 	bl	8001860 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 ff0f 	bl	80018b8 <GetGTimerVal>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000aa0:	d30a      	bcc.n	8000ab8 <ProcessLedFSM+0xc4>
			statePis = 1;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <ProcessLedFSM+0xcc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 fef5 	bl	8001898 <StopGTimer>
		break;
 8000aae:	e003      	b.n	8000ab8 <ProcessLedFSM+0xc4>
		break;
 8000ab0:	bf00      	nop
 8000ab2:	e002      	b.n	8000aba <ProcessLedFSM+0xc6>
		break;
 8000ab4:	bf00      	nop
 8000ab6:	e000      	b.n	8000aba <ProcessLedFSM+0xc6>
		break;
 8000ab8:	bf00      	nop
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000008f 	.word	0x2000008f
 8000ac4:	20000091 	.word	0x20000091
 8000ac8:	20000090 	.word	0x20000090
 8000acc:	40020800 	.word	0x40020800

08000ad0 <main>:



/*************************	 Code	*************************/

int main (void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

	InitGPIO();
 8000ad4:	f000 fdae 	bl	8001634 <InitGPIO>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0x84>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <main+0x84>)
 8000ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ae2:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BR15;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0x84>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <main+0x84>)
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <main+0x84>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <main+0x84>)
 8000af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afa:	6193      	str	r3, [r2, #24]
	InitRCC();
 8000afc:	f000 fcac 	bl	8001458 <InitRCC>
	UpdateNVICActiveAndPriority();
 8000b00:	f000 fd50 	bl	80015a4 <UpdateNVICActiveAndPriority>
	InitGTimer();
 8000b04:	f000 fe94 	bl	8001830 <InitGTimer>
	InitTIM10();
 8000b08:	f000 fe1c 	bl	8001744 <InitTIM10>
	InitMessage();
 8000b0c:	f000 f824 	bl	8000b58 <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 8000b10:	f242 7314 	movw	r3, #10004	; 0x2714
 8000b14:	f242 7213 	movw	r2, #10003	; 0x2713
 8000b18:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b20:	f000 f99c 	bl	8000e5c <InitModbusFSM>
	InitLedFSM();
 8000b24:	f7ff ff50 	bl	80009c8 <InitLedFSM>
	SendMessage(LedOnMsg);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 f82f 	bl	8000b8c <SendMessage>

	InitI2C1FSM();
 8000b2e:	f7ff fd4b 	bl	80005c8 <InitI2C1FSM>
	InitLcdFSM();
 8000b32:	f7ff fe31 	bl	8000798 <InitLcdFSM>
	SendMessage(LCDStartInit);
 8000b36:	200b      	movs	r0, #11
 8000b38:	f000 f828 	bl	8000b8c <SendMessage>

	while(1){

		ProcessI2CWriteFSM();
 8000b3c:	f7ff fd56 	bl	80005ec <ProcessI2CWriteFSM>
		ProcessLcdFSM();
 8000b40:	f7ff fe40 	bl	80007c4 <ProcessLcdFSM>

		ProcessModbusSlaveFSM();
 8000b44:	f000 fb38 	bl	80011b8 <ProcessModbusSlaveFSM>
		ProcessLedFSM();
 8000b48:	f7ff ff54 	bl	80009f4 <ProcessLedFSM>
		ProcessMessage();
 8000b4c:	f000 f834 	bl	8000bb8 <ProcessMessage>
		ProcessI2CWriteFSM();
 8000b50:	e7f4      	b.n	8000b3c <main+0x6c>
 8000b52:	bf00      	nop
 8000b54:	40020800 	.word	0x40020800

08000b58 <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e007      	b.n	8000b74 <InitMessage+0x1c>
		Messages[i] = '0';
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <InitMessage+0x30>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b1d      	cmp	r3, #29
 8000b78:	ddf4      	ble.n	8000b64 <InitMessage+0xc>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000094 	.word	0x20000094

08000b8c <SendMessage>:

void SendMessage (int Msg){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

	if (Messages[Msg] == '0'){
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <SendMessage+0x28>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b30      	cmp	r3, #48	; 0x30
 8000b9e:	d104      	bne.n	8000baa <SendMessage+0x1e>

		Messages[Msg] = '1';
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <SendMessage+0x28>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2231      	movs	r2, #49	; 0x31
 8000ba8:	701a      	strb	r2, [r3, #0]
	}
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000094 	.word	0x20000094

08000bb8 <ProcessMessage>:

void ProcessMessage (void){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e018      	b.n	8000bf6 <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <ProcessMessage+0x50>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b32      	cmp	r3, #50	; 0x32
 8000bce:	d104      	bne.n	8000bda <ProcessMessage+0x22>
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <ProcessMessage+0x50>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	2230      	movs	r2, #48	; 0x30
 8000bd8:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <ProcessMessage+0x50>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b31      	cmp	r3, #49	; 0x31
 8000be4:	d104      	bne.n	8000bf0 <ProcessMessage+0x38>
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <ProcessMessage+0x50>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b1d      	cmp	r3, #29
 8000bfa:	dde3      	ble.n	8000bc4 <ProcessMessage+0xc>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000094 	.word	0x20000094

08000c0c <GetMessage>:

uint8_t GetMessage (int Msg){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <GetMessage+0x30>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b32      	cmp	r3, #50	; 0x32
 8000c1e:	d106      	bne.n	8000c2e <GetMessage+0x22>
		Messages[Msg] = '0';
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <GetMessage+0x30>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <GetMessage+0x24>
	}
	return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000094 	.word	0x20000094

08000c40 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <InitModbusUSART+0x170>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a57      	ldr	r2, [pc, #348]	; (8000db0 <InitModbusUSART+0x170>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 8000c5a:	4b56      	ldr	r3, [pc, #344]	; (8000db4 <InitModbusUSART+0x174>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4a55      	ldr	r2, [pc, #340]	; (8000db4 <InitModbusUSART+0x174>)
 8000c60:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c64:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 8000c66:	4b53      	ldr	r3, [pc, #332]	; (8000db4 <InitModbusUSART+0x174>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a52      	ldr	r2, [pc, #328]	; (8000db4 <InitModbusUSART+0x174>)
 8000c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c70:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 8000c72:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <InitModbusUSART+0x174>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4a4f      	ldr	r2, [pc, #316]	; (8000db4 <InitModbusUSART+0x174>)
 8000c78:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000c7c:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 8000c7e:	4b4d      	ldr	r3, [pc, #308]	; (8000db4 <InitModbusUSART+0x174>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <InitModbusUSART+0x174>)
 8000c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c88:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <InitModbusUSART+0x174>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a49      	ldr	r2, [pc, #292]	; (8000db4 <InitModbusUSART+0x174>)
 8000c90:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c94:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <InitModbusUSART+0x174>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <InitModbusUSART+0x174>)
 8000c9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ca0:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <InitModbusUSART+0x174>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	4a43      	ldr	r2, [pc, #268]	; (8000db4 <InitModbusUSART+0x174>)
 8000ca8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000cac:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <InitModbusUSART+0x174>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a40      	ldr	r2, [pc, #256]	; (8000db4 <InitModbusUSART+0x174>)
 8000cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cb8:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 8000cba:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <InitModbusUSART+0x174>)
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <InitModbusUSART+0x174>)
 8000cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc4:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <InitModbusUSART+0x174>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a3a      	ldr	r2, [pc, #232]	; (8000db4 <InitModbusUSART+0x174>)
 8000ccc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000cd0:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <InitModbusUSART+0x174>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a37      	ldr	r2, [pc, #220]	; (8000db4 <InitModbusUSART+0x174>)
 8000cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f242 7214 	movw	r2, #10004	; 0x2714
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15e      	bne.n	8000da6 <InitModbusUSART+0x166>

		USART->BRR = Speed;													// Установка скорости
 8000ce8:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <InitModbusUSART+0x178>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <InitModbusUSART+0x178>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	4a31      	ldr	r2, [pc, #196]	; (8000db8 <InitModbusUSART+0x178>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	60d3      	str	r3, [r2, #12]

		if(ParityControl == ParityControlOn){
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f242 7211 	movw	r2, #10001	; 0x2711
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d10b      	bne.n	8000d1c <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <InitModbusUSART+0x178>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <InitModbusUSART+0x178>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <InitModbusUSART+0x178>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <InitModbusUSART+0x178>)
 8000d16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d1a:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d105      	bne.n	8000d32 <InitModbusUSART+0xf2>
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <InitModbusUSART+0x178>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <InitModbusUSART+0x178>)
 8000d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d30:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f242 7212 	movw	r2, #10002	; 0x2712
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d105      	bne.n	8000d48 <InitModbusUSART+0x108>
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <InitModbusUSART+0x178>)
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <InitModbusUSART+0x178>)
 8000d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d46:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f242 7213 	movw	r2, #10003	; 0x2713
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <InitModbusUSART+0x178>)
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <InitModbusUSART+0x178>)
 8000d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d5c:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <InitModbusUSART+0x178>)
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <InitModbusUSART+0x178>)
 8000d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d68:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <InitModbusUSART+0x178>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <InitModbusUSART+0x178>)
 8000d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d74:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <InitModbusUSART+0x178>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <InitModbusUSART+0x178>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <InitModbusUSART+0x178>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <InitModbusUSART+0x178>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	60d3      	str	r3, [r2, #12]

		USART->CR3 |= USART_CR3_DMAT;										// Разрешаем запросы к DMA от модуля USART
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <InitModbusUSART+0x178>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <InitModbusUSART+0x178>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6153      	str	r3, [r2, #20]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <InitModbusUSART+0x178>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <InitModbusUSART+0x178>)
 8000da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da4:	60d3      	str	r3, [r2, #12]

	}

}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40011400 	.word	0x40011400

08000dbc <InitDMAforUSART>:

void InitDMAforUSART (void){
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <InitDMAforUSART+0x90>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <InitDMAforUSART+0x90>)
 8000dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream7->CR |= DMA_SxCR_CHSEL_0 |
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <InitDMAforUSART+0x94>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <InitDMAforUSART+0x94>)
 8000dd2:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8000dd6:	6013      	str	r3, [r2, #0]
						DMA_SxCR_CHSEL_2;

	DMA2_Stream7->PAR = (uint32_t) & USART->DR;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <InitDMAforUSART+0x94>)
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <InitDMAforUSART+0x98>)
 8000ddc:	609a      	str	r2, [r3, #8]
	DMA2_Stream7->M0AR = (uint32_t) & ModbusSendData[0];
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <InitDMAforUSART+0x94>)
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <InitDMAforUSART+0x9c>)
 8000de2:	60da      	str	r2, [r3, #12]

	DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <InitDMAforUSART+0x94>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <InitDMAforUSART+0x94>)
 8000dea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000dee:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <InitDMAforUSART+0x94>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <InitDMAforUSART+0x94>)
 8000df6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000dfa:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <InitDMAforUSART+0x94>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PINC;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_PL;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e1a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e1e:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2a:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_CIRC;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <InitDMAforUSART+0x94>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6013      	str	r3, [r2, #0]

}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	400264b8 	.word	0x400264b8
 8000e54:	40011404 	.word	0x40011404
 8000e58:	200000c0 	.word	0x200000c0

08000e5c <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fee5 	bl	8000c40 <InitModbusUSART>
	InitDMAforUSART();
 8000e76:	f7ff ffa1 	bl	8000dbc <InitDMAforUSART>
	state = _state = 0;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <InitModbusFSM+0x54>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <InitModbusFSM+0x54>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <InitModbusFSM+0x58>)
 8000e86:	701a      	strb	r2, [r3, #0]
	entry = 0;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <InitModbusFSM+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <InitModbusFSM+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <InitModbusFSM+0x60>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <InitModbusFSM+0x64>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <InitModbusFSM+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <InitModbusFSM+0x6c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000b6 	.word	0x200000b6
 8000eb4:	200000ba 	.word	0x200000ba
 8000eb8:	200000b4 	.word	0x200000b4
 8000ebc:	200000b5 	.word	0x200000b5
 8000ec0:	200000bb 	.word	0x200000bb
 8000ec4:	200002c5 	.word	0x200002c5
 8000ec8:	200002c4 	.word	0x200002c4

08000ecc <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	4b59      	ldr	r3, [pc, #356]	; (800103c <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d003      	beq.n	8000ee6 <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e002      	b.n	8000eec <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

	_state = state;
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	4b52      	ldr	r3, [pc, #328]	; (800103c <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000ef2:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000ef4:	4b50      	ldr	r3, [pc, #320]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	f200 8099 	bhi.w	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f19 	.word	0x08000f19
 8000f08:	08000f3b 	.word	0x08000f3b
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f9b 	.word	0x08000f9b
 8000f14:	0800101d 	.word	0x0800101d

	case 0:

		if (entry == 1){
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d102      	bne.n	8000f26 <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 8000f20:	4b48      	ldr	r3, [pc, #288]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
		}

		if(GetMessage(ModbusReciveSymbol)){
 8000f26:	2016      	movs	r0, #22
 8000f28:	f7ff fe70 	bl	8000c0c <GetMessage>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d07b      	beq.n	800102a <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>
			state = 1;
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000f38:	e077      	b.n	800102a <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>

	case 1:

		if (entry == 1){
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <ProcessSlaveModbusMessageReceptionRTUFSM+0x7c>
			ReceptionStatus = ReceptionEnabled;
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000f44:	2264      	movs	r2, #100	; 0x64
 8000f46:	801a      	strh	r2, [r3, #0]
		if(CurrentItemOfBuf >= ModbusBufSize){

			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 8000f48:	2017      	movs	r0, #23
 8000f4a:	f7ff fe5f 	bl	8000c0c <GetMessage>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d06c      	beq.n	800102e <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>
			state = 2;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000f5a:	e068      	b.n	800102e <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>

	case 2:

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d003      	beq.n	8000f6c <ProcessSlaveModbusMessageReceptionRTUFSM+0xa0>
 8000f64:	4b39      	ldr	r3, [pc, #228]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa8>
			state = 3;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 8000f72:	e05d      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	e006      	b.n	8000f8e <ProcessSlaveModbusMessageReceptionRTUFSM+0xc2>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4a32      	ldr	r2, [pc, #200]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f3      	bcc.n	8000f80 <ProcessSlaveModbusMessageReceptionRTUFSM+0xb4>
		break;
 8000f98:	e04a      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 3:

		CRCVal = 0;
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
		CRCRecVal = 0;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf - 2);					// Вычисляем CRC16
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b02      	subs	r3, #2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4826      	ldr	r0, [pc, #152]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000fb4:	f7ff f9be 	bl	8000334 <CRC16>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000fbe:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3b02      	subs	r3, #2
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000fea:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d10a      	bne.n	800100e <ProcessSlaveModbusMessageReceptionRTUFSM+0x142>
			SendMessage(ModbusMessageReceived);								// Сообщение Modbus получено
 8000ff8:	201b      	movs	r0, #27
 8000ffa:	f7ff fdc7 	bl	8000b8c <SendMessage>
			_CurrentItemOfBuf = CurrentItemOfBuf;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8001004:	701a      	strb	r2, [r3, #0]
			state = 0;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
		else {
			SendMessage(ModbusCRCNotOk);
			state = 4;
		}

		break;
 800100c:	e010      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			SendMessage(ModbusCRCNotOk);
 800100e:	201a      	movs	r0, #26
 8001010:	f7ff fdbc 	bl	8000b8c <SendMessage>
			state = 4;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001016:	2204      	movs	r2, #4
 8001018:	701a      	strb	r2, [r3, #0]
		break;
 800101a:	e009      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 4:

		SendMessage(ModbusError);
 800101c:	2015      	movs	r0, #21
 800101e:	f7ff fdb5 	bl	8000b8c <SendMessage>
		state = 0;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]

		break;
 8001028:	e002      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 800102e:	bf00      	nop

	}

}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000ba 	.word	0x200000ba
 800103c:	200000b6 	.word	0x200000b6
 8001040:	200000b4 	.word	0x200000b4
 8001044:	200002c4 	.word	0x200002c4
 8001048:	200002dc 	.word	0x200002dc
 800104c:	200001c4 	.word	0x200001c4
 8001050:	200000b8 	.word	0x200000b8
 8001054:	200001c0 	.word	0x200001c0
 8001058:	200000bc 	.word	0x200000bc

0800105c <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d003      	beq.n	8001076 <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e002      	b.n	800107c <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8001082:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d87e      	bhi.n	800118a <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <ProcessMessageGenerationSlaveModbusRTUFSM+0x38>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010df 	.word	0x080010df
 800109c:	080010ed 	.word	0x080010ed
 80010a0:	08001157 	.word	0x08001157

	case 0:
		if (entryMessageGenSlave == 1){
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10e      	bne.n	80010ca <ProcessMessageGenerationSlaveModbusRTUFSM+0x6e>

			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	e006      	b.n	80010c0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x64>

				ModbusSendData[i] = 0;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	3301      	adds	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3f3      	bcc.n	80010b2 <ProcessMessageGenerationSlaveModbusRTUFSM+0x56>

			}

		}

		if (GetMessage(ModbusMessageReceived)){
 80010ca:	201b      	movs	r0, #27
 80010cc:	f7ff fd9e 	bl	8000c0c <GetMessage>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d054      	beq.n	8001180 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>
			stateMessageGenSlave = 1;
 80010d6:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
		}
			break;
 80010dc:	e050      	b.n	8001180 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>

	case 1:

		if (ModbusData[1] == 0x05){
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x14c>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d14e      	bne.n	8001184 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

			WriteSingleCoil();
 80010e6:	f000 f8bf 	bl	8001268 <WriteSingleCoil>
		}

		break;
 80010ea:	e04b      	b.n	8001184 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

	case 2:

		CRCRecVal = CRC16(ModbusSendData, _CurrentItemOfBuf - 2);
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b02      	subs	r3, #2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80010fa:	f7ff f91b 	bl	8000334 <CRC16>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8001104:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-2] |= CRCRecVal;
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b02      	subs	r3, #2
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 800110e:	5cd1      	ldrb	r1, [r2, r3]
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3b02      	subs	r3, #2
 800111c:	430a      	orrs	r2, r1
 800111e:	b2d1      	uxtb	r1, r2
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8001122:	54d1      	strb	r1, [r2, r3]

		CRCRecVal = CRCRecVal >> 8;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 800112e:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-1] |= CRCRecVal;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8001138:	5cd1      	ldrb	r1, [r2, r3]
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	b2d1      	uxtb	r1, r2
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 800114c:	54d1      	strb	r1, [r2, r3]

		stateMessageGenSlave = 3;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8001150:	2203      	movs	r2, #3
 8001152:	701a      	strb	r2, [r3, #0]

		break;
 8001154:	e019      	b.n	800118a <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>

	case 3:


		if (entryMessageGenSlave == 1){
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d114      	bne.n	8001188 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>

			USART->SR &= ~USART_SR_TC;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8001164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001168:	6013      	str	r3, [r2, #0]

			DMA2_Stream7->NDTR = _CurrentItemOfBuf;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8001170:	605a      	str	r2, [r3, #4]

			DMA2_Stream7->CR |= DMA_SxCR_EN;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

		}

		break;
 800117e:	e003      	b.n	8001188 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>
			break;
 8001180:	bf00      	nop
 8001182:	e002      	b.n	800118a <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8001184:	bf00      	nop
 8001186:	e000      	b.n	800118a <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8001188:	bf00      	nop

	}
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000bb 	.word	0x200000bb
 8001198:	200000b5 	.word	0x200000b5
 800119c:	200002c5 	.word	0x200002c5
 80011a0:	200000c0 	.word	0x200000c0
 80011a4:	200000bc 	.word	0x200000bc
 80011a8:	200001c4 	.word	0x200001c4
 80011ac:	200001c0 	.word	0x200001c0
 80011b0:	40011400 	.word	0x40011400
 80011b4:	400264b8 	.word	0x400264b8

080011b8 <ProcessModbusSlaveFSM>:


void ProcessModbusSlaveFSM (void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

	ProcessSlaveModbusMessageReceptionRTUFSM();
 80011bc:	f7ff fe86 	bl	8000ecc <ProcessSlaveModbusMessageReceptionRTUFSM>
	ProcessMessageGenerationSlaveModbusRTUFSM();
 80011c0:	f7ff ff4c 	bl	800105c <ProcessMessageGenerationSlaveModbusRTUFSM>

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <USART6_IRQHandler>:


/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/


void ModbusUSART_IRQHandler (void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <USART6_IRQHandler+0x54>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0320 	and.w	r3, r3, #32
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d016      	beq.n	8001206 <USART6_IRQHandler+0x3e>

		ReceptionStatus = ReceptionEnabled;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <USART6_IRQHandler+0x58>)
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	801a      	strh	r2, [r3, #0]
		MRTUcount = 0;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <USART6_IRQHandler+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	801a      	strh	r2, [r3, #0]

		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <USART6_IRQHandler+0x54>)
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <USART6_IRQHandler+0x60>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	b2c9      	uxtb	r1, r1
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <USART6_IRQHandler+0x64>)
 80011f2:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <USART6_IRQHandler+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <USART6_IRQHandler+0x60>)
 80011fe:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol);						// Активируем сообщение ModbusReciveSymbol
 8001200:	2016      	movs	r0, #22
 8001202:	f7ff fcc3 	bl	8000b8c <SendMessage>
	}

	if (USART->SR & USART_SR_ORE){
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <USART6_IRQHandler+0x54>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <USART6_IRQHandler+0x50>
		state = 4;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <USART6_IRQHandler+0x68>)
 8001214:	2204      	movs	r2, #4
 8001216:	701a      	strb	r2, [r3, #0]
	}

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40011400 	.word	0x40011400
 8001220:	200002dc 	.word	0x200002dc
 8001224:	200002c8 	.word	0x200002c8
 8001228:	200002c4 	.word	0x200002c4
 800122c:	200001c4 	.word	0x200001c4
 8001230:	200000ba 	.word	0x200000ba

08001234 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler (void){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

	if (DMA2->HISR & DMA_HISR_TCIF7){
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <DMA2_Stream7_IRQHandler+0x2c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <DMA2_Stream7_IRQHandler+0x22>

		stateMessageGenSlave = 0;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <DMA2_Stream7_IRQHandler+0x30>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

		DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <DMA2_Stream7_IRQHandler+0x2c>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <DMA2_Stream7_IRQHandler+0x2c>)
 8001250:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001254:	60d3      	str	r3, [r2, #12]

	}

}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40026400 	.word	0x40026400
 8001264:	200000bb 	.word	0x200000bb

08001268 <WriteSingleCoil>:

/*************************	 Modbus Function (Modbus функции)	*************************/


/* Запись состояния одного выхода (Код функции 0x05) */
void WriteSingleCoil (void){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0

	if (ModbusData[3] == 0x50){
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <WriteSingleCoil+0xa4>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	2b50      	cmp	r3, #80	; 0x50
 8001274:	d145      	bne.n	8001302 <WriteSingleCoil+0x9a>

		if (ModbusData[4] == 0xff && ModbusData[5] == 0x00){
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <WriteSingleCoil+0xa4>)
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d11e      	bne.n	80012bc <WriteSingleCoil+0x54>
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <WriteSingleCoil+0xa4>)
 8001280:	795b      	ldrb	r3, [r3, #5]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11a      	bne.n	80012bc <WriteSingleCoil+0x54>

			GPIOC->BSRR |= GPIO_BSRR_BS14;
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <WriteSingleCoil+0xa8>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a21      	ldr	r2, [pc, #132]	; (8001310 <WriteSingleCoil+0xa8>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	e008      	b.n	80012aa <WriteSingleCoil+0x42>
				ModbusSendData[i] = ModbusData[i];
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	491b      	ldr	r1, [pc, #108]	; (800130c <WriteSingleCoil+0xa4>)
 800129e:	5c89      	ldrb	r1, [r1, r2]
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <WriteSingleCoil+0xac>)
 80012a2:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	3301      	adds	r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <WriteSingleCoil+0xb0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3b02      	subs	r3, #2
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dbf0      	blt.n	8001298 <WriteSingleCoil+0x30>
			}
				stateMessageGenSlave = 2;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <WriteSingleCoil+0xb4>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	701a      	strb	r2, [r3, #0]
			}

			if (ModbusData[4] == 0x00 && ModbusData[5] == 0xff){
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <WriteSingleCoil+0xa4>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11e      	bne.n	8001302 <WriteSingleCoil+0x9a>
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <WriteSingleCoil+0xa4>)
 80012c6:	795b      	ldrb	r3, [r3, #5]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d11a      	bne.n	8001302 <WriteSingleCoil+0x9a>

			GPIOC->BSRR |= GPIO_BSRR_BR14;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <WriteSingleCoil+0xa8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <WriteSingleCoil+0xa8>)
 80012d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012d6:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 80012d8:	2300      	movs	r3, #0
 80012da:	71bb      	strb	r3, [r7, #6]
 80012dc:	e008      	b.n	80012f0 <WriteSingleCoil+0x88>
				ModbusSendData[i] = ModbusData[i];
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	490a      	ldr	r1, [pc, #40]	; (800130c <WriteSingleCoil+0xa4>)
 80012e4:	5c89      	ldrb	r1, [r1, r2]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <WriteSingleCoil+0xac>)
 80012e8:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	3301      	adds	r3, #1
 80012ee:	71bb      	strb	r3, [r7, #6]
 80012f0:	79ba      	ldrb	r2, [r7, #6]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <WriteSingleCoil+0xb0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3b02      	subs	r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <WriteSingleCoil+0x76>
			}
				stateMessageGenSlave = 2;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <WriteSingleCoil+0xb4>)
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
			}

	}

}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	200001c4 	.word	0x200001c4
 8001310:	40020800 	.word	0x40020800
 8001314:	200000c0 	.word	0x200000c0
 8001318:	200000bc 	.word	0x200000bc
 800131c:	200000bb 	.word	0x200000bb

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <InitRCC+0x140>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <InitRCC+0x140>)
 8001462:	f023 030f 	bic.w	r3, r3, #15
 8001466:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 8001468:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <InitRCC+0x140>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <InitRCC+0x140>)
 800146e:	f043 0303 	orr.w	r3, r3, #3
 8001472:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <InitRCC+0x144>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a48      	ldr	r2, [pc, #288]	; (800159c <InitRCC+0x144>)
 800147a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147e:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <InitRCC+0x148>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <InitRCC+0x148>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 800148c:	bf00      	nop
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <InitRCC+0x148>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f9      	beq.n	800148e <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <InitRCC+0x148>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <InitRCC+0x148>)
 80014a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a4:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <InitRCC+0x148>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <InitRCC+0x148>)
 80014ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <InitRCC+0x148>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <InitRCC+0x148>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <InitRCC+0x148>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a37      	ldr	r2, [pc, #220]	; (80015a0 <InitRCC+0x148>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <InitRCC+0x148>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <InitRCC+0x148>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <InitRCC+0x148>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <InitRCC+0x148>)
 80014dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014e4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <InitRCC+0x148>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <InitRCC+0x148>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <InitRCC+0x148>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <InitRCC+0x148>)
 80014f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014fc:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <InitRCC+0x148>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <InitRCC+0x148>)
 8001504:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001508:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <InitRCC+0x148>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <InitRCC+0x148>)
 8001510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001514:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 8001516:	bf00      	nop
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <InitRCC+0x148>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f9      	beq.n	8001518 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <InitRCC+0x148>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <InitRCC+0x148>)
 800152a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800152e:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <InitRCC+0x148>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <InitRCC+0x148>)
 8001536:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <InitRCC+0x148>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <InitRCC+0x148>)
 8001542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001546:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <InitRCC+0x148>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <InitRCC+0x148>)
 800154e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001552:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <InitRCC+0x148>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <InitRCC+0x148>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <InitRCC+0x148>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <InitRCC+0x148>)
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <InitRCC+0x148>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <InitRCC+0x148>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 8001574:	bf00      	nop
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <InitRCC+0x148>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d1f9      	bne.n	8001576 <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <InitRCC+0x148>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <InitRCC+0x148>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 800158e:	f7fe fe51 	bl	8000234 <SystemCoreClockUpdate>

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00
 800159c:	40007000 	.word	0x40007000
 80015a0:	40023800 	.word	0x40023800

080015a4 <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

	__NVIC_SetPriorityGrouping(4);											// 16 групп прерываний и 16 подгрупп
 80015a8:	2004      	movs	r0, #4
 80015aa:	f7ff feb9 	bl	8001320 <__NVIC_SetPriorityGrouping>

	__NVIC_EnableIRQ(USART6_IRQn);											// Разрешаем прерывания от USART для Modbus
 80015ae:	2047      	movs	r0, #71	; 0x47
 80015b0:	f7ff feda 	bl	8001368 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);									// Разрешаем прерывания от 10-го таймера
 80015b4:	2019      	movs	r0, #25
 80015b6:	f7ff fed7 	bl	8001368 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA2_Stream7_IRQn);									// Разрешаем прерывания от DMA обслуживающего USART Modbus
 80015ba:	2046      	movs	r0, #70	; 0x46
 80015bc:	f7ff fed4 	bl	8001368 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(I2C1_EV_IRQn);											// Разрешаем прерывания событий I2C1
 80015c0:	201f      	movs	r0, #31
 80015c2:	f7ff fed1 	bl	8001368 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA1_Stream1_IRQn);									// Разрешаем прерывания от DMA1_Stream1, обслуживающего I2C1
 80015c6:	200c      	movs	r0, #12
 80015c8:	f7ff fece 	bl	8001368 <__NVIC_EnableIRQ>

	__NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(1, 0, 2));			// Устанавливаем Modbus прерывание в первую группу, первым приоритетом
 80015cc:	2202      	movs	r2, #2
 80015ce:	2100      	movs	r1, #0
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff ff0f 	bl	80013f4 <NVIC_EncodePriority>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	2047      	movs	r0, #71	; 0x47
 80015dc:	f7ff fee0 	bl	80013a0 <__NVIC_SetPriority>
	__NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(2, 1, 3));	// Прервания 10го таймера за прерыванием Modbus
 80015e0:	2203      	movs	r2, #3
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff ff05 	bl	80013f4 <NVIC_EncodePriority>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	2019      	movs	r0, #25
 80015f0:	f7ff fed6 	bl	80013a0 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(1, 1, 3));
 80015f4:	2203      	movs	r2, #3
 80015f6:	2101      	movs	r1, #1
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fefb 	bl	80013f4 <NVIC_EncodePriority>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	2046      	movs	r0, #70	; 0x46
 8001604:	f7ff fecc 	bl	80013a0 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(3, 0, 2));
 8001608:	2202      	movs	r2, #2
 800160a:	2100      	movs	r1, #0
 800160c:	2003      	movs	r0, #3
 800160e:	f7ff fef1 	bl	80013f4 <NVIC_EncodePriority>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	200c      	movs	r0, #12
 8001618:	f7ff fec2 	bl	80013a0 <__NVIC_SetPriority>
	__NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(3, 2, 3));
 800161c:	2203      	movs	r2, #3
 800161e:	2102      	movs	r1, #2
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff fee7 	bl	80013f4 <NVIC_EncodePriority>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	201f      	movs	r0, #31
 800162c:	f7ff feb8 	bl	80013a0 <__NVIC_SetPriority>

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <InitGPIO>:

void InitGPIO (void){
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 8001638:	4b40      	ldr	r3, [pc, #256]	; (800173c <InitGPIO+0x108>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a3f      	ldr	r2, [pc, #252]	; (800173c <InitGPIO+0x108>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <InitGPIO+0x108>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a3c      	ldr	r2, [pc, #240]	; (800173c <InitGPIO+0x108>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <InitGPIO+0x108>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <InitGPIO+0x108>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <InitGPIO+0x10c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a37      	ldr	r2, [pc, #220]	; (8001740 <InitGPIO+0x10c>)
 8001662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001666:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <InitGPIO+0x10c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <InitGPIO+0x10c>)
 800166e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001672:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <InitGPIO+0x10c>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a31      	ldr	r2, [pc, #196]	; (8001740 <InitGPIO+0x10c>)
 800167a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800167e:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <InitGPIO+0x10c>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a2e      	ldr	r2, [pc, #184]	; (8001740 <InitGPIO+0x10c>)
 8001686:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800168a:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <InitGPIO+0x10c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <InitGPIO+0x10c>)
 8001692:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001696:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <InitGPIO+0x10c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <InitGPIO+0x10c>)
 800169e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016a2:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <InitGPIO+0x10c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a25      	ldr	r2, [pc, #148]	; (8001740 <InitGPIO+0x10c>)
 80016aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ae:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <InitGPIO+0x10c>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <InitGPIO+0x10c>)
 80016b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016ba:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <InitGPIO+0x10c>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <InitGPIO+0x10c>)
 80016c2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80016c6:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <InitGPIO+0x10c>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <InitGPIO+0x10c>)
 80016ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016d2:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <InitGPIO+0x10c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <InitGPIO+0x10c>)
 80016da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016de:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <InitGPIO+0x10c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <InitGPIO+0x10c>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT15;						// Настройка порта PC15 на выход push-pull
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <InitGPIO+0x10c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <InitGPIO+0x10c>)
 80016f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016f6:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <InitGPIO+0x10c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a10      	ldr	r2, [pc, #64]	; (8001740 <InitGPIO+0x10c>)
 80016fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001702:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;				// Настройка на высокую выходную скорость
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <InitGPIO+0x10c>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <InitGPIO+0x10c>)
 800170a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800170e:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD15;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <InitGPIO+0x10c>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <InitGPIO+0x10c>)
 8001716:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800171a:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE15;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <InitGPIO+0x10c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <InitGPIO+0x10c>)
 8001722:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001726:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE15_0;					// Настройка порта PC15 на выход
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <InitGPIO+0x10c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <InitGPIO+0x10c>)
 800172e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40023800 	.word	0x40023800
 8001740:	40020800 	.word	0x40020800

08001744 <InitTIM10>:

/*************************	 Code	*************************/

/*************************	 Функции аппаратной инициализации таймера	*************************/

void InitTIM10 (void){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <InitTIM10+0x58>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <InitTIM10+0x58>)
 800174e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001752:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->PSC = 96 - 1;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <InitTIM10+0x5c>)
 8001756:	225f      	movs	r2, #95	; 0x5f
 8001758:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->ARR = 500;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <InitTIM10+0x5c>)
 800175c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM10->DIER |= TIM_DIER_UIE;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <InitTIM10+0x5c>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <InitTIM10+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	60d3      	str	r3, [r2, #12]

	MRTUcount = 0;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <InitTIM10+0x60>)
 8001770:	2200      	movs	r2, #0
 8001772:	801a      	strh	r2, [r3, #0]
	ReceptionStatus = ReceptionStopped;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <InitTIM10+0x64>)
 8001776:	2232      	movs	r2, #50	; 0x32
 8001778:	801a      	strh	r2, [r3, #0]

	TIM10->CR1 |= TIM_CR1_CEN;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <InitTIM10+0x5c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <InitTIM10+0x5c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]

	TIM10->EGR |= TIM_EGR_UG;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <InitTIM10+0x5c>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <InitTIM10+0x5c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6153      	str	r3, [r2, #20]

}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40014400 	.word	0x40014400
 80017a4:	200002c8 	.word	0x200002c8
 80017a8:	200002dc 	.word	0x200002dc

080017ac <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

		for (uint8_t i = 0; i <= MaxGTimers; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	e00f      	b.n	80017d8 <TIM1_UP_TIM10_IRQHandler+0x2c>

				if (GTimerState[i] == TimerRunning){
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <TIM1_UP_TIM10_IRQHandler+0x70>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <TIM1_UP_TIM10_IRQHandler+0x26>

					GTimerVal[i]++;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a16      	ldr	r2, [pc, #88]	; (8001820 <TIM1_UP_TIM10_IRQHandler+0x74>)
 80017c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ca:	3201      	adds	r2, #1
 80017cc:	4914      	ldr	r1, [pc, #80]	; (8001820 <TIM1_UP_TIM10_IRQHandler+0x74>)
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t i = 0; i <= MaxGTimers; i++){
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	3301      	adds	r3, #1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d9ec      	bls.n	80017b8 <TIM1_UP_TIM10_IRQHandler+0xc>
				}
			}

	if (ReceptionStatus == ReceptionEnabled){
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d10f      	bne.n	8001806 <TIM1_UP_TIM10_IRQHandler+0x5a>

		MRTUcount++;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80017f0:	801a      	strh	r2, [r3, #0]

		if (MRTUcount >= 5){
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d905      	bls.n	8001806 <TIM1_UP_TIM10_IRQHandler+0x5a>
			SendMessage(ModbusRTUTimeOut);
 80017fa:	2017      	movs	r0, #23
 80017fc:	f7ff f9c6 	bl	8000b8c <SendMessage>
			ReceptionStatus = ReceptionStopped;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001802:	2232      	movs	r2, #50	; 0x32
 8001804:	801a      	strh	r2, [r3, #0]
		}

	}

	TIM10->SR &= ~TIM_SR_UIF;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <TIM1_UP_TIM10_IRQHandler+0x80>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6113      	str	r3, [r2, #16]

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002d8 	.word	0x200002d8
 8001820:	200002cc 	.word	0x200002cc
 8001824:	200002dc 	.word	0x200002dc
 8001828:	200002c8 	.word	0x200002c8
 800182c:	40014400 	.word	0x40014400

08001830 <InitGTimer>:

/*************************	 Функции глобальных таймеров	*************************/

void InitGTimer(void){
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001836:	2300      	movs	r3, #0
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	e006      	b.n	800184a <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <InitGTimer+0x2c>)
 8001840:	2100      	movs	r1, #0
 8001842:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	3301      	adds	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d9f5      	bls.n	800183c <InitGTimer+0xc>
	}

}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	200002d8 	.word	0x200002d8

08001860 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <StartGTimer+0x30>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <StartGTimer+0x34>)
 8001878:	2100      	movs	r1, #0
 800187a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <StartGTimer+0x30>)
 8001882:	2101      	movs	r1, #1
 8001884:	54d1      	strb	r1, [r2, r3]
	}

}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	200002d8 	.word	0x200002d8
 8001894:	200002cc 	.word	0x200002cc

08001898 <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <StopGTimer+0x1c>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	54d1      	strb	r1, [r2, r3]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	200002d8 	.word	0x200002d8

080018b8 <GetGTimerVal>:
		GTimerState[GTimerID] = TimerRunning;
	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <GetGTimerVal+0x1c>)
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	200002cc 	.word	0x200002cc

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018de:	e003      	b.n	80018e8 <LoopCopyDataInit>

080018e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018e6:	3104      	adds	r1, #4

080018e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f0:	d3f6      	bcc.n	80018e0 <CopyDataInit>
  ldr  r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f4:	e002      	b.n	80018fc <LoopFillZerobss>

080018f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f8:	f842 3b04 	str.w	r3, [r2], #4

080018fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001900:	d3f9      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001902:	f7fe fc69 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f000 f811 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff f8e1 	bl	8000ad0 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001914:	08001bc4 	.word	0x08001bc4
  ldr  r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800191c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001920:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001924:	200002e0 	.word	0x200002e0

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	4d0d      	ldr	r5, [pc, #52]	; (8001964 <__libc_init_array+0x38>)
 8001930:	4c0d      	ldr	r4, [pc, #52]	; (8001968 <__libc_init_array+0x3c>)
 8001932:	1b64      	subs	r4, r4, r5
 8001934:	10a4      	asrs	r4, r4, #2
 8001936:	2600      	movs	r6, #0
 8001938:	42a6      	cmp	r6, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	4d0b      	ldr	r5, [pc, #44]	; (800196c <__libc_init_array+0x40>)
 800193e:	4c0c      	ldr	r4, [pc, #48]	; (8001970 <__libc_init_array+0x44>)
 8001940:	f000 f818 	bl	8001974 <_init>
 8001944:	1b64      	subs	r4, r4, r5
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	2600      	movs	r6, #0
 800194a:	42a6      	cmp	r6, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	f855 3b04 	ldr.w	r3, [r5], #4
 8001954:	4798      	blx	r3
 8001956:	3601      	adds	r6, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	f855 3b04 	ldr.w	r3, [r5], #4
 800195e:	4798      	blx	r3
 8001960:	3601      	adds	r6, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	08001bbc 	.word	0x08001bbc
 8001968:	08001bbc 	.word	0x08001bbc
 800196c:	08001bbc 	.word	0x08001bbc
 8001970:	08001bc0 	.word	0x08001bc0

08001974 <_init>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	bf00      	nop
 8001978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197a:	bc08      	pop	{r3}
 800197c:	469e      	mov	lr, r3
 800197e:	4770      	bx	lr

08001980 <_fini>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	bf00      	nop
 8001984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001986:	bc08      	pop	{r3}
 8001988:	469e      	mov	lr, r3
 800198a:	4770      	bx	lr
