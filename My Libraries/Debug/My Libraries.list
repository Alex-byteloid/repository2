
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000734  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080008dc  080008dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008e0  080008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080008e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000004  080008e8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000003c  080008e8  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000126a  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000065b  00000000  00000000  00021298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000150  00000000  00000000  000218f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000e8  00000000  00000000  00021a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e06e  00000000  00000000  00021b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001fae  00000000  00000000  0002fb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0004f955  00000000  00000000  00031b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000814a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000340  00000000  00000000  000814f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008b4 	.word	0x080008b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080008b4 	.word	0x080008b4

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	080008cc 	.word	0x080008cc

08000334 <InitLedFSM>:
uint8_t _state;				// Переменная предыдущего состояния автомата
uint8_t entry;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

	state = _state = 0;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <InitLedFSM+0x20>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <InitLedFSM+0x20>)
 8000340:	781a      	ldrb	r2, [r3, #0]
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <InitLedFSM+0x24>)
 8000344:	701a      	strb	r2, [r3, #0]
	entry = 0;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <InitLedFSM+0x28>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]

}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	20000021 	.word	0x20000021
 8000358:	20000022 	.word	0x20000022
 800035c:	20000020 	.word	0x20000020

08000360 <ProcessLedFSM>:

void ProcessLedFSM (void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <ProcessLedFSM+0xc8>)
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <ProcessLedFSM+0xcc>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	d003      	beq.n	8000378 <ProcessLedFSM+0x18>
 8000370:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <ProcessLedFSM+0xd0>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	e002      	b.n	800037e <ProcessLedFSM+0x1e>
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <ProcessLedFSM+0xd0>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	_state = state;
 800037e:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <ProcessLedFSM+0xc8>)
 8000380:	781a      	ldrb	r2, [r3, #0]
 8000382:	4b2a      	ldr	r3, [pc, #168]	; (800042c <ProcessLedFSM+0xcc>)
 8000384:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <ProcessLedFSM+0xc8>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d02a      	beq.n	80003e4 <ProcessLedFSM+0x84>
 800038e:	2b02      	cmp	r3, #2
 8000390:	dc47      	bgt.n	8000422 <ProcessLedFSM+0xc2>
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <ProcessLedFSM+0x3c>
 8000396:	2b01      	cmp	r3, #1
 8000398:	d00a      	beq.n	80003b0 <ProcessLedFSM+0x50>
			StopGTimer(GTimer1);
		}
		break;
	}

}
 800039a:	e042      	b.n	8000422 <ProcessLedFSM+0xc2>
		if (GetMessage(LedOnMsg)){
 800039c:	2000      	movs	r0, #0
 800039e:	f000 f8df 	bl	8000560 <GetMessage>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d037      	beq.n	8000418 <ProcessLedFSM+0xb8>
			state = 1;
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <ProcessLedFSM+0xc8>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
		break;
 80003ae:	e033      	b.n	8000418 <ProcessLedFSM+0xb8>
		if (entry == 1){
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <ProcessLedFSM+0xd0>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d108      	bne.n	80003ca <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <ProcessLedFSM+0xd4>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <ProcessLedFSM+0xd4>)
 80003be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c2:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer1);
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 f9eb 	bl	80007a0 <StartGTimer>
		if (GetGTimerVal(GTimer1) >= 100){
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fa14 	bl	80007f8 <GetGTimerVal>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b63      	cmp	r3, #99	; 0x63
 80003d4:	d922      	bls.n	800041c <ProcessLedFSM+0xbc>
			state = 2;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <ProcessLedFSM+0xc8>)
 80003d8:	2202      	movs	r2, #2
 80003da:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f9fb 	bl	80007d8 <StopGTimer>
		break;
 80003e2:	e01b      	b.n	800041c <ProcessLedFSM+0xbc>
		if (entry == 1){
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <ProcessLedFSM+0xd0>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d108      	bne.n	80003fe <ProcessLedFSM+0x9e>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <ProcessLedFSM+0xd4>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <ProcessLedFSM+0xd4>)
 80003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80003f6:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer1);
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f9d1 	bl	80007a0 <StartGTimer>
		if (GetGTimerVal(GTimer1) >= 100){
 80003fe:	2000      	movs	r0, #0
 8000400:	f000 f9fa 	bl	80007f8 <GetGTimerVal>
 8000404:	4603      	mov	r3, r0
 8000406:	2b63      	cmp	r3, #99	; 0x63
 8000408:	d90a      	bls.n	8000420 <ProcessLedFSM+0xc0>
			state = 1;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <ProcessLedFSM+0xc8>)
 800040c:	2201      	movs	r2, #1
 800040e:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f9e1 	bl	80007d8 <StopGTimer>
		break;
 8000416:	e003      	b.n	8000420 <ProcessLedFSM+0xc0>
		break;
 8000418:	bf00      	nop
 800041a:	e002      	b.n	8000422 <ProcessLedFSM+0xc2>
		break;
 800041c:	bf00      	nop
 800041e:	e000      	b.n	8000422 <ProcessLedFSM+0xc2>
		break;
 8000420:	bf00      	nop
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000022 	.word	0x20000022
 800042c:	20000021 	.word	0x20000021
 8000430:	20000020 	.word	0x20000020
 8000434:	40020800 	.word	0x40020800

08000438 <main>:
extern uint8_t GTimerState [MaxGTimers];
extern uint32_t GTimerVal	[MaxGTimers];

/*************************	 Code	*************************/

int main (void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

	InitGPIO();
 800043c:	f000 f950 	bl	80006e0 <InitGPIO>
	InitRCC();
 8000440:	f000 f8a8 	bl	8000594 <InitRCC>
	InitGTimer();
 8000444:	f000 f994 	bl	8000770 <InitGTimer>
	InitHardwareTimer();
 8000448:	f000 f97e 	bl	8000748 <InitHardwareTimer>
	InitLedFSM();
 800044c:	f7ff ff72 	bl	8000334 <InitLedFSM>
	InitMessage();
 8000450:	f000 f82c 	bl	80004ac <InitMessage>
	SendMessage(LedOnMsg);
 8000454:	2000      	movs	r0, #0
 8000456:	f000 f843 	bl	80004e0 <SendMessage>

	while(1){

		ProcessLedFSM();
 800045a:	f7ff ff81 	bl	8000360 <ProcessLedFSM>
		ProcessMessage();
 800045e:	f000 f855 	bl	800050c <ProcessMessage>
		ProcessLedFSM();
 8000462:	e7fa      	b.n	800045a <main+0x22>

08000464 <SysTick_Handler>:
}


// Обработчики прерываний

void SysTick_Handler(void){
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0

	uint8_t i;

	for (i = 0; i < MaxGTimers; i++){
 800046a:	2300      	movs	r3, #0
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	e00f      	b.n	8000490 <SysTick_Handler+0x2c>

		if (GTimerState[i] == TimerRunning){
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <SysTick_Handler+0x40>)
 8000474:	5cd3      	ldrb	r3, [r2, r3]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d107      	bne.n	800048a <SysTick_Handler+0x26>
			GTimerVal[i]++;
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <SysTick_Handler+0x44>)
 800047e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000482:	3201      	adds	r2, #1
 8000484:	4908      	ldr	r1, [pc, #32]	; (80004a8 <SysTick_Handler+0x44>)
 8000486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < MaxGTimers; i++){
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	3301      	adds	r3, #1
 800048e:	71fb      	strb	r3, [r7, #7]
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d9ec      	bls.n	8000470 <SysTick_Handler+0xc>

		}

	}

}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000038 	.word	0x20000038
 80004a8:	2000002c 	.word	0x2000002c

080004ac <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e007      	b.n	80004c8 <InitMessage+0x1c>
		Messages[i] = '0';
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <InitMessage+0x30>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	2230      	movs	r2, #48	; 0x30
 80004c0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3301      	adds	r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	ddf4      	ble.n	80004b8 <InitMessage+0xc>
	}
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000024 	.word	0x20000024

080004e0 <SendMessage>:

void SendMessage (int Msg){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

	if (Messages[Msg] == '0'){
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <SendMessage+0x28>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b30      	cmp	r3, #48	; 0x30
 80004f2:	d104      	bne.n	80004fe <SendMessage+0x1e>

		Messages[Msg] = '1';
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <SendMessage+0x28>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	2231      	movs	r2, #49	; 0x31
 80004fc:	701a      	strb	r2, [r3, #0]
	}
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	20000024 	.word	0x20000024

0800050c <ProcessMessage>:

void ProcessMessage (void){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e018      	b.n	800054a <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <ProcessMessage+0x50>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b32      	cmp	r3, #50	; 0x32
 8000522:	d104      	bne.n	800052e <ProcessMessage+0x22>
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <ProcessMessage+0x50>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <ProcessMessage+0x50>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b31      	cmp	r3, #49	; 0x31
 8000538:	d104      	bne.n	8000544 <ProcessMessage+0x38>
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <ProcessMessage+0x50>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4413      	add	r3, r2
 8000540:	2232      	movs	r2, #50	; 0x32
 8000542:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b04      	cmp	r3, #4
 800054e:	dde3      	ble.n	8000518 <ProcessMessage+0xc>
	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000024 	.word	0x20000024

08000560 <GetMessage>:

uint8_t GetMessage (int Msg){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <GetMessage+0x30>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b32      	cmp	r3, #50	; 0x32
 8000572:	d106      	bne.n	8000582 <GetMessage+0x22>
		Messages[Msg] = '0';
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <GetMessage+0x30>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	701a      	strb	r2, [r3, #0]
		return 1;
 800057e:	2301      	movs	r3, #1
 8000580:	e000      	b.n	8000584 <GetMessage+0x24>
	}
	return 0;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000024 	.word	0x20000024

08000594 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000598:	4b4e      	ldr	r3, [pc, #312]	; (80006d4 <InitRCC+0x140>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a4d      	ldr	r2, [pc, #308]	; (80006d4 <InitRCC+0x140>)
 800059e:	f023 030f 	bic.w	r3, r3, #15
 80005a2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <InitRCC+0x140>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <InitRCC+0x140>)
 80005aa:	f043 0303 	orr.w	r3, r3, #3
 80005ae:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 80005b0:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <InitRCC+0x144>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <InitRCC+0x144>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 80005bc:	4b47      	ldr	r3, [pc, #284]	; (80006dc <InitRCC+0x148>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a46      	ldr	r2, [pc, #280]	; (80006dc <InitRCC+0x148>)
 80005c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c6:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 80005c8:	bf00      	nop
 80005ca:	4b44      	ldr	r3, [pc, #272]	; (80006dc <InitRCC+0x148>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <InitRCC+0x148>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a40      	ldr	r2, [pc, #256]	; (80006dc <InitRCC+0x148>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 80005e2:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <InitRCC+0x148>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4a3d      	ldr	r2, [pc, #244]	; (80006dc <InitRCC+0x148>)
 80005e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005ec:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <InitRCC+0x148>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <InitRCC+0x148>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <InitRCC+0x148>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a37      	ldr	r2, [pc, #220]	; (80006dc <InitRCC+0x148>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <InitRCC+0x148>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <InitRCC+0x148>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <InitRCC+0x148>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4a31      	ldr	r2, [pc, #196]	; (80006dc <InitRCC+0x148>)
 8000618:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800061c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000620:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <InitRCC+0x148>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <InitRCC+0x148>)
 8000628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800062c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <InitRCC+0x148>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <InitRCC+0x148>)
 8000634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000638:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <InitRCC+0x148>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <InitRCC+0x148>)
 8000640:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000644:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <InitRCC+0x148>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <InitRCC+0x148>)
 800064c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000650:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 8000652:	bf00      	nop
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <InitRCC+0x148>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <InitRCC+0x148>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <InitRCC+0x148>)
 8000666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800066a:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <InitRCC+0x148>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <InitRCC+0x148>)
 8000672:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000676:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <InitRCC+0x148>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <InitRCC+0x148>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <InitRCC+0x148>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <InitRCC+0x148>)
 800068a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800068e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <InitRCC+0x148>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <InitRCC+0x148>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <InitRCC+0x148>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <InitRCC+0x148>)
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <InitRCC+0x148>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <InitRCC+0x148>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 80006b0:	bf00      	nop
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <InitRCC+0x148>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 030c 	and.w	r3, r3, #12
 80006ba:	2b08      	cmp	r3, #8
 80006bc:	d1f9      	bne.n	80006b2 <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <InitRCC+0x148>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a06      	ldr	r2, [pc, #24]	; (80006dc <InitRCC+0x148>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 80006ca:	f7ff fdb3 	bl	8000234 <SystemCoreClockUpdate>

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023c00 	.word	0x40023c00
 80006d8:	40007000 	.word	0x40007000
 80006dc:	40023800 	.word	0x40023800

080006e0 <InitGPIO>:

void InitGPIO (void){
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <InitGPIO+0x60>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <InitGPIO+0x60>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <InitGPIO+0x64>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <InitGPIO+0x64>)
 80006f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006fa:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <InitGPIO+0x64>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <InitGPIO+0x64>)
 8000702:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000706:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <InitGPIO+0x64>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <InitGPIO+0x64>)
 800070e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000712:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <InitGPIO+0x64>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <InitGPIO+0x64>)
 800071a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800071e:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <InitGPIO+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <InitGPIO+0x64>)
 8000726:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800072a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <InitGPIO+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <InitGPIO+0x64>)
 8000732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000736:	6013      	str	r3, [r2, #0]

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800
 8000744:	40020800 	.word	0x40020800

08000748 <InitHardwareTimer>:
uint8_t GTimerState [MaxGTimers];				// Хранение текущих состояний глобальных таймеров
uint32_t GTimerVal	[MaxGTimers];				// Хранение текущих значений глобальных таймеров

/*************************	 Code	*************************/

void InitHardwareTimer (void){
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

	SysTick->LOAD = 959999;						// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 10 мс.
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <InitHardwareTimer+0x20>)
 800074e:	4a07      	ldr	r2, [pc, #28]	; (800076c <InitHardwareTimer+0x24>)
 8000750:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 959999;						// Обнуляем таймер и флаги.
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <InitHardwareTimer+0x20>)
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <InitHardwareTimer+0x24>)
 8000756:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <InitHardwareTimer+0x20>)
 800075a:	2207      	movs	r2, #7
 800075c:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk |
					SysTick_CTRL_ENABLE_Msk;

}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010
 800076c:	000ea5ff 	.word	0x000ea5ff

08000770 <InitGTimer>:

void InitGTimer(void){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

	uint8_t i;

	for (i = 0; i < MaxGTimers; i++){
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e006      	b.n	800078a <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <InitGTimer+0x2c>)
 8000780:	2100      	movs	r1, #0
 8000782:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MaxGTimers; i++){
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	3301      	adds	r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d9f5      	bls.n	800077c <InitGTimer+0xc>
	}

}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000038 	.word	0x20000038

080007a0 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <StartGTimer+0x30>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <StartGTimer+0x34>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <StartGTimer+0x30>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	54d1      	strb	r1, [r2, r3]
	}

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000038 	.word	0x20000038
 80007d4:	2000002c 	.word	0x2000002c

080007d8 <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <StopGTimer+0x1c>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	54d1      	strb	r1, [r2, r3]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000038 	.word	0x20000038

080007f8 <GetGTimerVal>:

	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <GetGTimerVal+0x1c>)
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	2000002c 	.word	0x2000002c

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800081c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081e:	e003      	b.n	8000828 <LoopCopyDataInit>

08000820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000826:	3104      	adds	r1, #4

08000828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800082c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000830:	d3f6      	bcc.n	8000820 <CopyDataInit>
  ldr  r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000834:	e002      	b.n	800083c <LoopFillZerobss>

08000836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000838:	f842 3b04 	str.w	r3, [r2], #4

0800083c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000840:	d3f9      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000842:	f7ff fcc9 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f000 f811 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fdf5 	bl	8000438 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000850:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000854:	080008e4 	.word	0x080008e4
  ldr  r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800085c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000860:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000864:	2000003c 	.word	0x2000003c

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	4d0d      	ldr	r5, [pc, #52]	; (80008a4 <__libc_init_array+0x38>)
 8000870:	4c0d      	ldr	r4, [pc, #52]	; (80008a8 <__libc_init_array+0x3c>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	2600      	movs	r6, #0
 8000878:	42a6      	cmp	r6, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	4d0b      	ldr	r5, [pc, #44]	; (80008ac <__libc_init_array+0x40>)
 800087e:	4c0c      	ldr	r4, [pc, #48]	; (80008b0 <__libc_init_array+0x44>)
 8000880:	f000 f818 	bl	80008b4 <_init>
 8000884:	1b64      	subs	r4, r4, r5
 8000886:	10a4      	asrs	r4, r4, #2
 8000888:	2600      	movs	r6, #0
 800088a:	42a6      	cmp	r6, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f855 3b04 	ldr.w	r3, [r5], #4
 8000894:	4798      	blx	r3
 8000896:	3601      	adds	r6, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f855 3b04 	ldr.w	r3, [r5], #4
 800089e:	4798      	blx	r3
 80008a0:	3601      	adds	r6, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	080008dc 	.word	0x080008dc
 80008a8:	080008dc 	.word	0x080008dc
 80008ac:	080008dc 	.word	0x080008dc
 80008b0:	080008e0 	.word	0x080008e0

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
