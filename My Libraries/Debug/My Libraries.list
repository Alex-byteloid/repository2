
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001368  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d8  20000004  0800171c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002dc  0800171c  000202dc  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002bea  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000b78  00000000  00000000  00022c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000240  00000000  00000000  00023790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001a8  00000000  00000000  000239d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e583  00000000  00000000  00023b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000034e9  00000000  00000000  000320fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050513  00000000  00000000  000355e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00085af7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000634  00000000  00000000  00085b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080014e8 	.word	0x080014e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080014e8 	.word	0x080014e8

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	08001500 	.word	0x08001500

08000334 <CRC16>:

/*************************	 Code	*************************/



unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen ){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

unsigned char uchCRCHi = 0xFF ; 			/* high byte of CRC initialized */
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
unsigned char uchCRCLo = 0xFF ; 			/* low byte of CRC initialized */
 8000344:	23ff      	movs	r3, #255	; 0xff
 8000346:	73bb      	strb	r3, [r7, #14]
unsigned uIndex ; 							/* will index into CRC lookup table */
while (usDataLen--){ 						/* pass through message buffer */
 8000348:	e013      	b.n	8000372 <CRC16+0x3e>
uIndex = uchCRCLo ^ *puchMsg++; 			/* calculate the CRC */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	60bb      	str	r3, [r7, #8]
uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <CRC16+0x64>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	4053      	eors	r3, r2
 8000366:	73bb      	strb	r3, [r7, #14]
uchCRCHi = auchCRCLo[uIndex];
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <CRC16+0x68>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
while (usDataLen--){ 						/* pass through message buffer */
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	807a      	strh	r2, [r7, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	b21a      	sxth	r2, r3
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	b21b      	sxth	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b21b      	sxth	r3, r3
 800038a:	b29b      	uxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	08001510 	.word	0x08001510
 800039c:	08001610 	.word	0x08001610

080003a0 <ProcessI2CWriteFSM>:

	i2cSendStates = 0;
	_i2cSendStates = 0;
}

void ProcessI2CWriteFSM (void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	if ( i2cSendStates != _i2cSendStates) i2cEntry = 1; else i2cEntry = 0;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 80003a6:	781a      	ldrb	r2, [r3, #0]
 80003a8:	4b3b      	ldr	r3, [pc, #236]	; (8000498 <ProcessI2CWriteFSM+0xf8>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d003      	beq.n	80003b8 <ProcessI2CWriteFSM+0x18>
 80003b0:	4b3a      	ldr	r3, [pc, #232]	; (800049c <ProcessI2CWriteFSM+0xfc>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	e002      	b.n	80003be <ProcessI2CWriteFSM+0x1e>
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <ProcessI2CWriteFSM+0xfc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]

	_i2cSendStates = i2cSendStates;
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	4b35      	ldr	r3, [pc, #212]	; (8000498 <ProcessI2CWriteFSM+0xf8>)
 80003c4:	701a      	strb	r2, [r3, #0]

	switch (i2cSendStates){
 80003c6:	4b33      	ldr	r3, [pc, #204]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d860      	bhi.n	8000490 <ProcessI2CWriteFSM+0xf0>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <ProcessI2CWriteFSM+0x34>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	08000441 	.word	0x08000441
 80003dc:	0800045d 	.word	0x0800045d
 80003e0:	08000479 	.word	0x08000479

	case 0:

		if (i2cEntry == 1){
 80003e4:	4b2d      	ldr	r3, [pc, #180]	; (800049c <ProcessI2CWriteFSM+0xfc>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d108      	bne.n	80003fe <ProcessI2CWriteFSM+0x5e>
			DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 80003ec:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2b      	ldr	r2, [pc, #172]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]
			I2C1BuferSendLenght = 0;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <ProcessI2CWriteFSM+0x104>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
		}

		if (I2C1BuferSendLenght == 0) {
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <ProcessI2CWriteFSM+0x104>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d108      	bne.n	8000418 <ProcessI2CWriteFSM+0x78>
			i2cSendStates = 0;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 800040c:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a23      	ldr	r2, [pc, #140]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 8000412:	f023 0301 	bic.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]
		}

		if (GetMessage(I2C1StartTransaction)){
 8000418:	200a      	movs	r0, #10
 800041a:	f000 f9ab 	bl	8000774 <GetMessage>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d030      	beq.n	8000486 <ProcessI2CWriteFSM+0xe6>
			i2cSendStates = 1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->NDTR = I2C1BuferSendLenght;
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <ProcessI2CWriteFSM+0x104>)
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 8000430:	605a      	str	r2, [r3, #4]
			DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <ProcessI2CWriteFSM+0x100>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6013      	str	r3, [r2, #0]
		}

		break;
 800043e:	e022      	b.n	8000486 <ProcessI2CWriteFSM+0xe6>

	case 1:

		if (i2cEntry == 1){
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <ProcessI2CWriteFSM+0xfc>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d120      	bne.n	800048a <ProcessI2CWriteFSM+0xea>
			I2C1->CR1 |= I2C_CR1_START;								// Генерируем СТАРТ условие
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <ProcessI2CWriteFSM+0x108>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <ProcessI2CWriteFSM+0x108>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000452:	6013      	str	r3, [r2, #0]
			i2cSendStates = 2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 8000456:	2202      	movs	r2, #2
 8000458:	701a      	strb	r2, [r3, #0]
		}

		break;
 800045a:	e016      	b.n	800048a <ProcessI2CWriteFSM+0xea>

	case 2:

		if (GetGTimerVal(GTimer1) > 1000){
 800045c:	2000      	movs	r0, #0
 800045e:	f000 ffe5 	bl	800142c <GetGTimerVal>
 8000462:	4603      	mov	r3, r0
 8000464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000468:	d911      	bls.n	800048e <ProcessI2CWriteFSM+0xee>
			i2cSendStates = 3;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <ProcessI2CWriteFSM+0xf4>)
 800046c:	2203      	movs	r2, #3
 800046e:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 8000470:	2000      	movs	r0, #0
 8000472:	f000 ffcb 	bl	800140c <StopGTimer>
		}

		break;
 8000476:	e00a      	b.n	800048e <ProcessI2CWriteFSM+0xee>

	case 3:

		GPIOC->BSRR |= GPIO_BSRR_BS15;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <ProcessI2CWriteFSM+0x10c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <ProcessI2CWriteFSM+0x10c>)
 800047e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000482:	6193      	str	r3, [r2, #24]

		break;
 8000484:	e004      	b.n	8000490 <ProcessI2CWriteFSM+0xf0>
		break;
 8000486:	bf00      	nop
 8000488:	e002      	b.n	8000490 <ProcessI2CWriteFSM+0xf0>
		break;
 800048a:	bf00      	nop
 800048c:	e000      	b.n	8000490 <ProcessI2CWriteFSM+0xf0>
		break;
 800048e:	bf00      	nop
	}

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000089 	.word	0x20000089
 8000498:	20000022 	.word	0x20000022
 800049c:	20000020 	.word	0x20000020
 80004a0:	40026028 	.word	0x40026028
 80004a4:	2000008a 	.word	0x2000008a
 80004a8:	40005400 	.word	0x40005400
 80004ac:	40020800 	.word	0x40020800

080004b0 <DMA1_Stream1_IRQHandler>:

/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/

void DMA1_Stream1_IRQHandler (void){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF1){
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <DMA1_Stream1_IRQHandler+0x44>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d014      	beq.n	80004ea <DMA1_Stream1_IRQHandler+0x3a>
		I2C1->CR1 |= I2C_CR1_STOP;
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <DMA1_Stream1_IRQHandler+0x48>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <DMA1_Stream1_IRQHandler+0x48>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ca:	6013      	str	r3, [r2, #0]
		I2C1->CR2 &= ~I2C_CR2_DMAEN;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <DMA1_Stream1_IRQHandler+0x48>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <DMA1_Stream1_IRQHandler+0x48>)
 80004d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004d6:	6053      	str	r3, [r2, #4]
		i2cSendStates = 0;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <DMA1_Stream1_IRQHandler+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
		DMA1->LIFCR |= DMA_LIFCR_CTCIF1;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <DMA1_Stream1_IRQHandler+0x44>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <DMA1_Stream1_IRQHandler+0x44>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6093      	str	r3, [r2, #8]
	}

}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40026000 	.word	0x40026000
 80004f8:	40005400 	.word	0x40005400
 80004fc:	20000089 	.word	0x20000089

08000500 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	if (I2C1->SR1 & I2C_SR1_SB){
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00d      	beq.n	800052c <I2C1_EV_IRQHandler+0x2c>
		(void) I2C1->SR1;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 8000512:	695b      	ldr	r3, [r3, #20]
		StartGTimer(GTimer1);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 ff5d 	bl	80013d4 <StartGTimer>
		I2C1->DR = AddrDevice;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 800051c:	224e      	movs	r2, #78	; 0x4e
 800051e:	611a      	str	r2, [r3, #16]
		I2C1->CR2 |= I2C_CR2_DMAEN;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 8000526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052a:	6053      	str	r3, [r2, #4]
	}

	if (I2C1->SR1 & I2C_SR1_ADDR){
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0302 	and.w	r3, r3, #2
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <I2C1_EV_IRQHandler+0x46>
		(void) I2C1->SR1;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 800053a:	695b      	ldr	r3, [r3, #20]
		(void) I2C1->SR2;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <I2C1_EV_IRQHandler+0x4c>)
 800053e:	699b      	ldr	r3, [r3, #24]
		StopGTimer(GTimer1);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 ff63 	bl	800140c <StopGTimer>
	}

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40005400 	.word	0x40005400

08000550 <InitLedFSM>:
uint8_t _statePis;				// Переменная предыдущего состояния автомата
uint8_t entryPis1;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

	statePis = _statePis = 0;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <InitLedFSM+0x20>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <InitLedFSM+0x20>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <InitLedFSM+0x24>)
 8000560:	701a      	strb	r2, [r3, #0]
	entryPis1 = 0;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <InitLedFSM+0x28>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	2000008e 	.word	0x2000008e
 8000574:	2000008c 	.word	0x2000008c
 8000578:	2000008d 	.word	0x2000008d

0800057c <ProcessLedFSM>:

void ProcessLedFSM (void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	if (statePis != _statePis) entryPis1 = 1; else entryPis1 = 0;
 8000580:	4b31      	ldr	r3, [pc, #196]	; (8000648 <ProcessLedFSM+0xcc>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <ProcessLedFSM+0xd0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d003      	beq.n	8000594 <ProcessLedFSM+0x18>
 800058c:	4b30      	ldr	r3, [pc, #192]	; (8000650 <ProcessLedFSM+0xd4>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e002      	b.n	800059a <ProcessLedFSM+0x1e>
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <ProcessLedFSM+0xd4>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

	_statePis = statePis;
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <ProcessLedFSM+0xcc>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <ProcessLedFSM+0xd0>)
 80005a0:	701a      	strb	r2, [r3, #0]

	switch (statePis){
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <ProcessLedFSM+0xcc>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d02b      	beq.n	8000602 <ProcessLedFSM+0x86>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	dc49      	bgt.n	8000642 <ProcessLedFSM+0xc6>
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <ProcessLedFSM+0x3c>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00a      	beq.n	80005cc <ProcessLedFSM+0x50>
			StopGTimer(GTimer2);
		}
		break;
	}

}
 80005b6:	e044      	b.n	8000642 <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f8db 	bl	8000774 <GetMessage>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d039      	beq.n	8000638 <ProcessLedFSM+0xbc>
			statePis = 1;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <ProcessLedFSM+0xcc>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
		break;
 80005ca:	e035      	b.n	8000638 <ProcessLedFSM+0xbc>
		if (entryPis1 == 1){
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <ProcessLedFSM+0xd4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d108      	bne.n	80005e6 <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <ProcessLedFSM+0xd8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <ProcessLedFSM+0xd8>)
 80005da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005de:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fef7 	bl	80013d4 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 ff20 	bl	800142c <GetGTimerVal>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005f2:	d323      	bcc.n	800063c <ProcessLedFSM+0xc0>
			statePis = 2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <ProcessLedFSM+0xcc>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 ff06 	bl	800140c <StopGTimer>
		break;
 8000600:	e01c      	b.n	800063c <ProcessLedFSM+0xc0>
		if (entryPis1 == 1){
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <ProcessLedFSM+0xd4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d108      	bne.n	800061c <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <ProcessLedFSM+0xd8>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <ProcessLedFSM+0xd8>)
 8000610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000614:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fedc 	bl	80013d4 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 800061c:	2001      	movs	r0, #1
 800061e:	f000 ff05 	bl	800142c <GetGTimerVal>
 8000622:	4603      	mov	r3, r0
 8000624:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000628:	d30a      	bcc.n	8000640 <ProcessLedFSM+0xc4>
			statePis = 1;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <ProcessLedFSM+0xcc>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 feeb 	bl	800140c <StopGTimer>
		break;
 8000636:	e003      	b.n	8000640 <ProcessLedFSM+0xc4>
		break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <ProcessLedFSM+0xc6>
		break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <ProcessLedFSM+0xc6>
		break;
 8000640:	bf00      	nop
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000008c 	.word	0x2000008c
 800064c:	2000008e 	.word	0x2000008e
 8000650:	2000008d 	.word	0x2000008d
 8000654:	40020800 	.word	0x40020800

08000658 <main>:



/*************************	 Code	*************************/

int main (void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	InitGPIO();
 800065c:	f000 fda4 	bl	80011a8 <InitGPIO>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <main+0x70>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <main+0x70>)
 8000666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800066a:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BR15;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <main+0x70>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <main+0x70>)
 8000672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000676:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <main+0x70>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <main+0x70>)
 800067e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000682:	6193      	str	r3, [r2, #24]
	InitRCC();
 8000684:	f000 fca2 	bl	8000fcc <InitRCC>
	UpdateNVICActiveAndPriority();
 8000688:	f000 fd46 	bl	8001118 <UpdateNVICActiveAndPriority>
	InitGTimer();
 800068c:	f000 fe8a 	bl	80013a4 <InitGTimer>
	InitTIM10();
 8000690:	f000 fe12 	bl	80012b8 <InitTIM10>
	InitMessage();
 8000694:	f000 f81a 	bl	80006cc <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 8000698:	f242 7314 	movw	r3, #10004	; 0x2714
 800069c:	f242 7213 	movw	r2, #10003	; 0x2713
 80006a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80006a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006a8:	f000 f98c 	bl	80009c4 <InitModbusFSM>
	InitLedFSM();
 80006ac:	f7ff ff50 	bl	8000550 <InitLedFSM>
	SendMessage(LedOnMsg);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f825 	bl	8000700 <SendMessage>



	while(1){

		ProcessI2CWriteFSM();
 80006b6:	f7ff fe73 	bl	80003a0 <ProcessI2CWriteFSM>
		ProcessModbusSlaveFSM();
 80006ba:	f000 fb31 	bl	8000d20 <ProcessModbusSlaveFSM>
		ProcessLedFSM();
 80006be:	f7ff ff5d 	bl	800057c <ProcessLedFSM>
		ProcessMessage();
 80006c2:	f000 f82d 	bl	8000720 <ProcessMessage>
		ProcessI2CWriteFSM();
 80006c6:	e7f6      	b.n	80006b6 <main+0x5e>
 80006c8:	40020800 	.word	0x40020800

080006cc <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	e007      	b.n	80006e8 <InitMessage+0x1c>
		Messages[i] = '0';
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <InitMessage+0x30>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b1d      	cmp	r3, #29
 80006ec:	ddf4      	ble.n	80006d8 <InitMessage+0xc>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000090 	.word	0x20000090

08000700 <SendMessage>:

void SendMessage (int Msg){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	Messages[Msg] = '1';
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <SendMessage+0x1c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	2231      	movs	r2, #49	; 0x31
 8000710:	701a      	strb	r2, [r3, #0]

/*	if (Messages[Msg] == '0'){

		Messages[Msg] = '1';
	}*/
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000090 	.word	0x20000090

08000720 <ProcessMessage>:

void ProcessMessage (void){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e018      	b.n	800075e <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 800072c:	4a10      	ldr	r2, [pc, #64]	; (8000770 <ProcessMessage+0x50>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b32      	cmp	r3, #50	; 0x32
 8000736:	d104      	bne.n	8000742 <ProcessMessage+0x22>
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <ProcessMessage+0x50>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <ProcessMessage+0x50>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b31      	cmp	r3, #49	; 0x31
 800074c:	d104      	bne.n	8000758 <ProcessMessage+0x38>
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <ProcessMessage+0x50>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	2232      	movs	r2, #50	; 0x32
 8000756:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b1d      	cmp	r3, #29
 8000762:	dde3      	ble.n	800072c <ProcessMessage+0xc>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000090 	.word	0x20000090

08000774 <GetMessage>:

uint8_t GetMessage (int Msg){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <GetMessage+0x30>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b32      	cmp	r3, #50	; 0x32
 8000786:	d106      	bne.n	8000796 <GetMessage+0x22>
		Messages[Msg] = '0';
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <GetMessage+0x30>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	701a      	strb	r2, [r3, #0]
		return 1;
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <GetMessage+0x24>
	}
	return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000090 	.word	0x20000090

080007a8 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 80007b6:	4b58      	ldr	r3, [pc, #352]	; (8000918 <InitModbusUSART+0x170>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a57      	ldr	r2, [pc, #348]	; (8000918 <InitModbusUSART+0x170>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 80007c2:	4b56      	ldr	r3, [pc, #344]	; (800091c <InitModbusUSART+0x174>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	4a55      	ldr	r2, [pc, #340]	; (800091c <InitModbusUSART+0x174>)
 80007c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80007cc:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 80007ce:	4b53      	ldr	r3, [pc, #332]	; (800091c <InitModbusUSART+0x174>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a52      	ldr	r2, [pc, #328]	; (800091c <InitModbusUSART+0x174>)
 80007d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007d8:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 80007da:	4b50      	ldr	r3, [pc, #320]	; (800091c <InitModbusUSART+0x174>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a4f      	ldr	r2, [pc, #316]	; (800091c <InitModbusUSART+0x174>)
 80007e0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80007e4:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 80007e6:	4b4d      	ldr	r3, [pc, #308]	; (800091c <InitModbusUSART+0x174>)
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	4a4c      	ldr	r2, [pc, #304]	; (800091c <InitModbusUSART+0x174>)
 80007ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f0:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 80007f2:	4b4a      	ldr	r3, [pc, #296]	; (800091c <InitModbusUSART+0x174>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a49      	ldr	r2, [pc, #292]	; (800091c <InitModbusUSART+0x174>)
 80007f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80007fc:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 80007fe:	4b47      	ldr	r3, [pc, #284]	; (800091c <InitModbusUSART+0x174>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a46      	ldr	r2, [pc, #280]	; (800091c <InitModbusUSART+0x174>)
 8000804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000808:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <InitModbusUSART+0x174>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	4a43      	ldr	r2, [pc, #268]	; (800091c <InitModbusUSART+0x174>)
 8000810:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000814:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 8000816:	4b41      	ldr	r3, [pc, #260]	; (800091c <InitModbusUSART+0x174>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	4a40      	ldr	r2, [pc, #256]	; (800091c <InitModbusUSART+0x174>)
 800081c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000820:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <InitModbusUSART+0x174>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	4a3d      	ldr	r2, [pc, #244]	; (800091c <InitModbusUSART+0x174>)
 8000828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800082c:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 800082e:	4b3b      	ldr	r3, [pc, #236]	; (800091c <InitModbusUSART+0x174>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a3a      	ldr	r2, [pc, #232]	; (800091c <InitModbusUSART+0x174>)
 8000834:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000838:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 800083a:	4b38      	ldr	r3, [pc, #224]	; (800091c <InitModbusUSART+0x174>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a37      	ldr	r2, [pc, #220]	; (800091c <InitModbusUSART+0x174>)
 8000840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000844:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	f242 7214 	movw	r2, #10004	; 0x2714
 800084c:	4293      	cmp	r3, r2
 800084e:	d15e      	bne.n	800090e <InitModbusUSART+0x166>

		USART->BRR = Speed;													// Установка скорости
 8000850:	4a33      	ldr	r2, [pc, #204]	; (8000920 <InitModbusUSART+0x178>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <InitModbusUSART+0x178>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <InitModbusUSART+0x178>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	60d3      	str	r3, [r2, #12]

		if(ParityControl == ParityControlOn){
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	f242 7211 	movw	r2, #10001	; 0x2711
 8000868:	4293      	cmp	r3, r2
 800086a:	d10b      	bne.n	8000884 <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <InitModbusUSART+0x178>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <InitModbusUSART+0x178>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000876:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <InitModbusUSART+0x178>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <InitModbusUSART+0x178>)
 800087e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000882:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	f242 7210 	movw	r2, #10000	; 0x2710
 800088a:	4293      	cmp	r3, r2
 800088c:	d105      	bne.n	800089a <InitModbusUSART+0xf2>
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <InitModbusUSART+0x178>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <InitModbusUSART+0x178>)
 8000894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000898:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f242 7212 	movw	r2, #10002	; 0x2712
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d105      	bne.n	80008b0 <InitModbusUSART+0x108>
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <InitModbusUSART+0x178>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <InitModbusUSART+0x178>)
 80008aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008ae:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f242 7213 	movw	r2, #10003	; 0x2713
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10b      	bne.n	80008d2 <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <InitModbusUSART+0x178>)
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <InitModbusUSART+0x178>)
 80008c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008c4:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <InitModbusUSART+0x178>)
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <InitModbusUSART+0x178>)
 80008cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d0:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <InitModbusUSART+0x178>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <InitModbusUSART+0x178>)
 80008d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008dc:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <InitModbusUSART+0x178>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <InitModbusUSART+0x178>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <InitModbusUSART+0x178>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <InitModbusUSART+0x178>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	60d3      	str	r3, [r2, #12]

		USART->CR3 |= USART_CR3_DMAT;										// Разрешаем запросы к DMA от модуля USART
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <InitModbusUSART+0x178>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <InitModbusUSART+0x178>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6153      	str	r3, [r2, #20]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <InitModbusUSART+0x178>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a06      	ldr	r2, [pc, #24]	; (8000920 <InitModbusUSART+0x178>)
 8000908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800090c:	60d3      	str	r3, [r2, #12]

	}

}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40011400 	.word	0x40011400

08000924 <InitDMAforUSART>:

void InitDMAforUSART (void){
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <InitDMAforUSART+0x90>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <InitDMAforUSART+0x90>)
 800092e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000932:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream7->CR |= DMA_SxCR_CHSEL_0 |
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <InitDMAforUSART+0x94>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <InitDMAforUSART+0x94>)
 800093a:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800093e:	6013      	str	r3, [r2, #0]
						DMA_SxCR_CHSEL_2;

	DMA2_Stream7->PAR = (uint32_t) & USART->DR;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <InitDMAforUSART+0x94>)
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <InitDMAforUSART+0x98>)
 8000944:	609a      	str	r2, [r3, #8]
	DMA2_Stream7->M0AR = (uint32_t) & ModbusSendData[0];
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <InitDMAforUSART+0x94>)
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <InitDMAforUSART+0x9c>)
 800094a:	60da      	str	r2, [r3, #12]

	DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <InitDMAforUSART+0x94>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <InitDMAforUSART+0x94>)
 8000952:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000956:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <InitDMAforUSART+0x94>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <InitDMAforUSART+0x94>)
 800095e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000962:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <InitDMAforUSART+0x94>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <InitDMAforUSART+0x94>)
 800096a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096e:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PINC;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <InitDMAforUSART+0x94>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <InitDMAforUSART+0x94>)
 8000976:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_PL;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <InitDMAforUSART+0x94>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <InitDMAforUSART+0x94>)
 8000982:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000986:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <InitDMAforUSART+0x94>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <InitDMAforUSART+0x94>)
 800098e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000992:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_CIRC;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <InitDMAforUSART+0x94>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <InitDMAforUSART+0x94>)
 800099a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800099e:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <InitDMAforUSART+0x94>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <InitDMAforUSART+0x94>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]

}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40023800 	.word	0x40023800
 80009b8:	400264b8 	.word	0x400264b8
 80009bc:	40011404 	.word	0x40011404
 80009c0:	200000bc 	.word	0x200000bc

080009c4 <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fee5 	bl	80007a8 <InitModbusUSART>
	InitDMAforUSART();
 80009de:	f7ff ffa1 	bl	8000924 <InitDMAforUSART>
	state = _state = 0;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <InitModbusFSM+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <InitModbusFSM+0x54>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <InitModbusFSM+0x58>)
 80009ee:	701a      	strb	r2, [r3, #0]
	entry = 0;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <InitModbusFSM+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <InitModbusFSM+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <InitModbusFSM+0x60>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <InitModbusFSM+0x64>)
 8000a02:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <InitModbusFSM+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <InitModbusFSM+0x6c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000b2 	.word	0x200000b2
 8000a1c:	200000b6 	.word	0x200000b6
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	200000b1 	.word	0x200000b1
 8000a28:	200000b7 	.word	0x200000b7
 8000a2c:	200002c1 	.word	0x200002c1
 8000a30:	200002c0 	.word	0x200002c0

08000a34 <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d003      	beq.n	8000a4e <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 8000a46:	4b58      	ldr	r3, [pc, #352]	; (8000ba8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e002      	b.n	8000a54 <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 8000a4e:	4b56      	ldr	r3, [pc, #344]	; (8000ba8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]

	_state = state;
 8000a54:	4b52      	ldr	r3, [pc, #328]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8000a5a:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	f200 8099 	bhi.w	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000a81 	.word	0x08000a81
 8000a70:	08000aa3 	.word	0x08000aa3
 8000a74:	08000ac5 	.word	0x08000ac5
 8000a78:	08000b03 	.word	0x08000b03
 8000a7c:	08000b85 	.word	0x08000b85

	case 0:

		if (entry == 1){
 8000a80:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d102      	bne.n	8000a8e <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 8000a88:	4b48      	ldr	r3, [pc, #288]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
		}

		if(GetMessage(ModbusReciveSymbol)){
 8000a8e:	2016      	movs	r0, #22
 8000a90:	f7ff fe70 	bl	8000774 <GetMessage>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d07b      	beq.n	8000b92 <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>
			state = 1;
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000aa0:	e077      	b.n	8000b92 <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>

	case 1:

		if (entry == 1){
 8000aa2:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x7c>
			ReceptionStatus = ReceptionEnabled;
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000aac:	2264      	movs	r2, #100	; 0x64
 8000aae:	801a      	strh	r2, [r3, #0]
		if(CurrentItemOfBuf >= ModbusBufSize){

			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 8000ab0:	2017      	movs	r0, #23
 8000ab2:	f7ff fe5f 	bl	8000774 <GetMessage>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d06c      	beq.n	8000b96 <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>
			state = 2;
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000ac2:	e068      	b.n	8000b96 <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>

	case 2:

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b12      	cmp	r3, #18
 8000aca:	d003      	beq.n	8000ad4 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa0>
 8000acc:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d103      	bne.n	8000adc <ProcessSlaveModbusMessageReceptionRTUFSM+0xa8>
			state = 3;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 8000ada:	e05d      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e006      	b.n	8000af6 <ProcessSlaveModbusMessageReceptionRTUFSM+0xc2>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	3301      	adds	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	79fa      	ldrb	r2, [r7, #7]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d3f3      	bcc.n	8000ae8 <ProcessSlaveModbusMessageReceptionRTUFSM+0xb4>
		break;
 8000b00:	e04a      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 3:

		CRCVal = 0;
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
		CRCRecVal = 0;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf - 2);					// Вычисляем CRC16
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	3b02      	subs	r3, #2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000b1c:	f7ff fc0a 	bl	8000334 <CRC16>
 8000b20:	4603      	mov	r3, r0
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000b26:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	3b02      	subs	r3, #2
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000b52:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000b56:	881a      	ldrh	r2, [r3, #0]
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d10a      	bne.n	8000b76 <ProcessSlaveModbusMessageReceptionRTUFSM+0x142>
			SendMessage(ModbusMessageReceived);								// Сообщение Modbus получено
 8000b60:	201b      	movs	r0, #27
 8000b62:	f7ff fdcd 	bl	8000700 <SendMessage>
			_CurrentItemOfBuf = CurrentItemOfBuf;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8000b6c:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
		else {
			SendMessage(ModbusCRCNotOk);
			state = 4;
		}

		break;
 8000b74:	e010      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			SendMessage(ModbusCRCNotOk);
 8000b76:	201a      	movs	r0, #26
 8000b78:	f7ff fdc2 	bl	8000700 <SendMessage>
			state = 4;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	701a      	strb	r2, [r3, #0]
		break;
 8000b82:	e009      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 4:

		SendMessage(ModbusError);
 8000b84:	2015      	movs	r0, #21
 8000b86:	f7ff fdbb 	bl	8000700 <SendMessage>
		state = 0;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

		break;
 8000b90:	e002      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 8000b96:	bf00      	nop

	}

}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000b6 	.word	0x200000b6
 8000ba4:	200000b2 	.word	0x200000b2
 8000ba8:	200000b0 	.word	0x200000b0
 8000bac:	200002c0 	.word	0x200002c0
 8000bb0:	200002d8 	.word	0x200002d8
 8000bb4:	200001c0 	.word	0x200001c0
 8000bb8:	200000b4 	.word	0x200000b4
 8000bbc:	200001bc 	.word	0x200001bc
 8000bc0:	200000b8 	.word	0x200000b8

08000bc4 <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d003      	beq.n	8000bde <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e002      	b.n	8000be4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 8000be4:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000bea:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 8000bec:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d87e      	bhi.n	8000cf2 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x38>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c47 	.word	0x08000c47
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000cbf 	.word	0x08000cbf

	case 0:
		if (entryMessageGenSlave == 1){
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d10e      	bne.n	8000c32 <ProcessMessageGenerationSlaveModbusRTUFSM+0x6e>

			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	e006      	b.n	8000c28 <ProcessMessageGenerationSlaveModbusRTUFSM+0x64>

				ModbusSendData[i] = 0;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a3a      	ldr	r2, [pc, #232]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	3301      	adds	r3, #1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d3f3      	bcc.n	8000c1a <ProcessMessageGenerationSlaveModbusRTUFSM+0x56>

			}

		}

		if (GetMessage(ModbusMessageReceived)){
 8000c32:	201b      	movs	r0, #27
 8000c34:	f7ff fd9e 	bl	8000774 <GetMessage>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d054      	beq.n	8000ce8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>
			stateMessageGenSlave = 1;
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
		}
			break;
 8000c44:	e050      	b.n	8000ce8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>

	case 1:

		if (ModbusData[1] == 0x05){
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <ProcessMessageGenerationSlaveModbusRTUFSM+0x14c>)
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	d14e      	bne.n	8000cec <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

			WriteSingleCoil();
 8000c4e:	f000 f8bf 	bl	8000dd0 <WriteSingleCoil>
		}

		break;
 8000c52:	e04b      	b.n	8000cec <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

	case 2:

		CRCRecVal = CRC16(ModbusSendData, _CurrentItemOfBuf - 2);
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4829      	ldr	r0, [pc, #164]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000c62:	f7ff fb67 	bl	8000334 <CRC16>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000c6c:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-2] |= CRCRecVal;
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000c76:	5cd1      	ldrb	r1, [r2, r3]
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3b02      	subs	r3, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	b2d1      	uxtb	r1, r2
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000c8a:	54d1      	strb	r1, [r2, r3]

		CRCRecVal = CRCRecVal >> 8;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000c96:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-1] |= CRCRecVal;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000ca0:	5cd1      	ldrb	r1, [r2, r3]
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	b2d1      	uxtb	r1, r2
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000cb4:	54d1      	strb	r1, [r2, r3]

		stateMessageGenSlave = 3;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000cb8:	2203      	movs	r2, #3
 8000cba:	701a      	strb	r2, [r3, #0]

		break;
 8000cbc:	e019      	b.n	8000cf2 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>

	case 3:


		if (entryMessageGenSlave == 1){
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d114      	bne.n	8000cf0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>

			USART->SR &= ~USART_SR_TC;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cd0:	6013      	str	r3, [r2, #0]

			DMA2_Stream7->NDTR = _CurrentItemOfBuf;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000cd8:	605a      	str	r2, [r3, #4]

			DMA2_Stream7->CR |= DMA_SxCR_EN;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6013      	str	r3, [r2, #0]

		}

		break;
 8000ce6:	e003      	b.n	8000cf0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>
			break;
 8000ce8:	bf00      	nop
 8000cea:	e002      	b.n	8000cf2 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000cf0:	bf00      	nop

	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000b7 	.word	0x200000b7
 8000d00:	200000b1 	.word	0x200000b1
 8000d04:	200002c1 	.word	0x200002c1
 8000d08:	200000bc 	.word	0x200000bc
 8000d0c:	200000b8 	.word	0x200000b8
 8000d10:	200001c0 	.word	0x200001c0
 8000d14:	200001bc 	.word	0x200001bc
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	400264b8 	.word	0x400264b8

08000d20 <ProcessModbusSlaveFSM>:


void ProcessModbusSlaveFSM (void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	ProcessSlaveModbusMessageReceptionRTUFSM();
 8000d24:	f7ff fe86 	bl	8000a34 <ProcessSlaveModbusMessageReceptionRTUFSM>
	ProcessMessageGenerationSlaveModbusRTUFSM();
 8000d28:	f7ff ff4c 	bl	8000bc4 <ProcessMessageGenerationSlaveModbusRTUFSM>

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <USART6_IRQHandler>:


/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/


void ModbusUSART_IRQHandler (void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <USART6_IRQHandler+0x54>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d016      	beq.n	8000d6e <USART6_IRQHandler+0x3e>

		ReceptionStatus = ReceptionEnabled;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <USART6_IRQHandler+0x58>)
 8000d42:	2264      	movs	r2, #100	; 0x64
 8000d44:	801a      	strh	r2, [r3, #0]
		MRTUcount = 0;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <USART6_IRQHandler+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]

		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <USART6_IRQHandler+0x54>)
 8000d4e:	6859      	ldr	r1, [r3, #4]
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <USART6_IRQHandler+0x60>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	b2c9      	uxtb	r1, r1
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <USART6_IRQHandler+0x64>)
 8000d5a:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <USART6_IRQHandler+0x60>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <USART6_IRQHandler+0x60>)
 8000d66:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol);						// Активируем сообщение ModbusReciveSymbol
 8000d68:	2016      	movs	r0, #22
 8000d6a:	f7ff fcc9 	bl	8000700 <SendMessage>
	}

	if (USART->SR & USART_SR_ORE){
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <USART6_IRQHandler+0x54>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <USART6_IRQHandler+0x50>
		state = 4;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <USART6_IRQHandler+0x68>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	701a      	strb	r2, [r3, #0]
	}

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40011400 	.word	0x40011400
 8000d88:	200002d8 	.word	0x200002d8
 8000d8c:	200002c4 	.word	0x200002c4
 8000d90:	200002c0 	.word	0x200002c0
 8000d94:	200001c0 	.word	0x200001c0
 8000d98:	200000b6 	.word	0x200000b6

08000d9c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler (void){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

	if (DMA2->HISR & DMA_HISR_TCIF7){
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <DMA2_Stream7_IRQHandler+0x2c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <DMA2_Stream7_IRQHandler+0x22>

		stateMessageGenSlave = 0;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <DMA2_Stream7_IRQHandler+0x30>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]

		DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <DMA2_Stream7_IRQHandler+0x2c>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <DMA2_Stream7_IRQHandler+0x2c>)
 8000db8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dbc:	60d3      	str	r3, [r2, #12]

	}

}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40026400 	.word	0x40026400
 8000dcc:	200000b7 	.word	0x200000b7

08000dd0 <WriteSingleCoil>:

/*************************	 Modbus Function (Modbus функции)	*************************/


/* Запись состояния одного выхода (Код функции 0x05) */
void WriteSingleCoil (void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

	if (ModbusData[3] == 0x50){
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	2b50      	cmp	r3, #80	; 0x50
 8000ddc:	d14b      	bne.n	8000e76 <WriteSingleCoil+0xa6>

		if (ModbusData[4] == 0xff && ModbusData[5] == 0x00){
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d121      	bne.n	8000e2a <WriteSingleCoil+0x5a>
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000de8:	795b      	ldrb	r3, [r3, #5]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d11d      	bne.n	8000e2a <WriteSingleCoil+0x5a>

			GPIOC->BSRR |= GPIO_BSRR_BS14;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <WriteSingleCoil+0xb4>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <WriteSingleCoil+0xb4>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6193      	str	r3, [r2, #24]
			SendMessage(I2C1StartTransaction);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f7ff fc80 	bl	8000700 <SendMessage>

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	e008      	b.n	8000e18 <WriteSingleCoil+0x48>
				ModbusSendData[i] = ModbusData[i];
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	491d      	ldr	r1, [pc, #116]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000e0c:	5c89      	ldrb	r1, [r1, r2]
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <WriteSingleCoil+0xb8>)
 8000e10:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3301      	adds	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <WriteSingleCoil+0xbc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf0      	blt.n	8000e06 <WriteSingleCoil+0x36>
			}
				stateMessageGenSlave = 2;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <WriteSingleCoil+0xc0>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
			}

			if (ModbusData[4] == 0x00 && ModbusData[5] == 0xff){
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d121      	bne.n	8000e76 <WriteSingleCoil+0xa6>
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d11d      	bne.n	8000e76 <WriteSingleCoil+0xa6>

			GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <WriteSingleCoil+0xb4>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <WriteSingleCoil+0xb4>)
 8000e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e44:	6193      	str	r3, [r2, #24]
			SendMessage(I2C1StartTransaction);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f7ff fc5a 	bl	8000700 <SendMessage>

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	71bb      	strb	r3, [r7, #6]
 8000e50:	e008      	b.n	8000e64 <WriteSingleCoil+0x94>
				ModbusSendData[i] = ModbusData[i];
 8000e52:	79ba      	ldrb	r2, [r7, #6]
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	490a      	ldr	r1, [pc, #40]	; (8000e80 <WriteSingleCoil+0xb0>)
 8000e58:	5c89      	ldrb	r1, [r1, r2]
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <WriteSingleCoil+0xb8>)
 8000e5c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	3301      	adds	r3, #1
 8000e62:	71bb      	strb	r3, [r7, #6]
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <WriteSingleCoil+0xbc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <WriteSingleCoil+0x82>
			}
				stateMessageGenSlave = 2;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <WriteSingleCoil+0xc0>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
			}

	}

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001c0 	.word	0x200001c0
 8000e84:	40020800 	.word	0x40020800
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	200000b8 	.word	0x200000b8
 8000e90:	200000b7 	.word	0x200000b7

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4906      	ldr	r1, [pc, #24]	; (8000f10 <__NVIC_EnableIRQ+0x34>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	; (800110c <InitRCC+0x140>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <InitRCC+0x140>)
 8000fd6:	f023 030f 	bic.w	r3, r3, #15
 8000fda:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <InitRCC+0x140>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	; (800110c <InitRCC+0x140>)
 8000fe2:	f043 0303 	orr.w	r3, r3, #3
 8000fe6:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 8000fe8:	4b49      	ldr	r3, [pc, #292]	; (8001110 <InitRCC+0x144>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <InitRCC+0x144>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff2:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <InitRCC+0x148>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a46      	ldr	r2, [pc, #280]	; (8001114 <InitRCC+0x148>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 8001000:	bf00      	nop
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <InitRCC+0x148>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <InitRCC+0x148>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a40      	ldr	r2, [pc, #256]	; (8001114 <InitRCC+0x148>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001018:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <InitRCC+0x148>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a3d      	ldr	r2, [pc, #244]	; (8001114 <InitRCC+0x148>)
 8001020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001024:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <InitRCC+0x148>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a3a      	ldr	r2, [pc, #232]	; (8001114 <InitRCC+0x148>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <InitRCC+0x148>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4a37      	ldr	r2, [pc, #220]	; (8001114 <InitRCC+0x148>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <InitRCC+0x148>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a34      	ldr	r2, [pc, #208]	; (8001114 <InitRCC+0x148>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <InitRCC+0x148>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <InitRCC+0x148>)
 8001050:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001058:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <InitRCC+0x148>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <InitRCC+0x148>)
 8001060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001064:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <InitRCC+0x148>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <InitRCC+0x148>)
 800106c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001070:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <InitRCC+0x148>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <InitRCC+0x148>)
 8001078:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800107c:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <InitRCC+0x148>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a24      	ldr	r2, [pc, #144]	; (8001114 <InitRCC+0x148>)
 8001084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001088:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 800108a:	bf00      	nop
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <InitRCC+0x148>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <InitRCC+0x148>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <InitRCC+0x148>)
 800109e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010a2:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <InitRCC+0x148>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <InitRCC+0x148>)
 80010aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <InitRCC+0x148>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <InitRCC+0x148>)
 80010b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ba:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <InitRCC+0x148>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <InitRCC+0x148>)
 80010c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <InitRCC+0x148>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <InitRCC+0x148>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <InitRCC+0x148>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <InitRCC+0x148>)
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <InitRCC+0x148>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <InitRCC+0x148>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 80010e8:	bf00      	nop
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <InitRCC+0x148>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d1f9      	bne.n	80010ea <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <InitRCC+0x148>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <InitRCC+0x148>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 8001102:	f7ff f897 	bl	8000234 <SystemCoreClockUpdate>

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00
 8001110:	40007000 	.word	0x40007000
 8001114:	40023800 	.word	0x40023800

08001118 <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

	__NVIC_SetPriorityGrouping(4);											// 16 групп прерываний и 16 подгрупп
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff feb9 	bl	8000e94 <__NVIC_SetPriorityGrouping>

	__NVIC_EnableIRQ(USART6_IRQn);											// Разрешаем прерывания от USART для Modbus
 8001122:	2047      	movs	r0, #71	; 0x47
 8001124:	f7ff feda 	bl	8000edc <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);									// Разрешаем прерывания от 10-го таймера
 8001128:	2019      	movs	r0, #25
 800112a:	f7ff fed7 	bl	8000edc <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA2_Stream7_IRQn);									// Разрешаем прерывания от DMA обслуживающего USART Modbus
 800112e:	2046      	movs	r0, #70	; 0x46
 8001130:	f7ff fed4 	bl	8000edc <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(I2C1_EV_IRQn);											// Разрешаем прерывания событий I2C1
 8001134:	201f      	movs	r0, #31
 8001136:	f7ff fed1 	bl	8000edc <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA1_Stream1_IRQn);									// Разрешаем прерывания от DMA1_Stream1, обслуживающего I2C1
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff fece 	bl	8000edc <__NVIC_EnableIRQ>

	__NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(1, 0, 2));			// Устанавливаем Modbus прерывание в первую группу, первым приоритетом
 8001140:	2202      	movs	r2, #2
 8001142:	2100      	movs	r1, #0
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff ff0f 	bl	8000f68 <NVIC_EncodePriority>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	2047      	movs	r0, #71	; 0x47
 8001150:	f7ff fee0 	bl	8000f14 <__NVIC_SetPriority>
	__NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(2, 1, 3));	// Прервания 10го таймера за прерыванием Modbus
 8001154:	2203      	movs	r2, #3
 8001156:	2101      	movs	r1, #1
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff ff05 	bl	8000f68 <NVIC_EncodePriority>
 800115e:	4603      	mov	r3, r0
 8001160:	4619      	mov	r1, r3
 8001162:	2019      	movs	r0, #25
 8001164:	f7ff fed6 	bl	8000f14 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(1, 1, 3));
 8001168:	2203      	movs	r2, #3
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fefb 	bl	8000f68 <NVIC_EncodePriority>
 8001172:	4603      	mov	r3, r0
 8001174:	4619      	mov	r1, r3
 8001176:	2046      	movs	r0, #70	; 0x46
 8001178:	f7ff fecc 	bl	8000f14 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(3, 0, 2));
 800117c:	2202      	movs	r2, #2
 800117e:	2100      	movs	r1, #0
 8001180:	2003      	movs	r0, #3
 8001182:	f7ff fef1 	bl	8000f68 <NVIC_EncodePriority>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	200c      	movs	r0, #12
 800118c:	f7ff fec2 	bl	8000f14 <__NVIC_SetPriority>
	__NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(3, 2, 3));
 8001190:	2203      	movs	r2, #3
 8001192:	2102      	movs	r1, #2
 8001194:	2003      	movs	r0, #3
 8001196:	f7ff fee7 	bl	8000f68 <NVIC_EncodePriority>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	201f      	movs	r0, #31
 80011a0:	f7ff feb8 	bl	8000f14 <__NVIC_SetPriority>

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <InitGPIO>:

void InitGPIO (void){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <InitGPIO+0x108>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <InitGPIO+0x108>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <InitGPIO+0x108>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <InitGPIO+0x108>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <InitGPIO+0x108>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <InitGPIO+0x108>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <InitGPIO+0x10c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <InitGPIO+0x10c>)
 80011d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011da:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 80011dc:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <InitGPIO+0x10c>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <InitGPIO+0x10c>)
 80011e2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80011e6:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <InitGPIO+0x10c>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4a31      	ldr	r2, [pc, #196]	; (80012b4 <InitGPIO+0x10c>)
 80011ee:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80011f2:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <InitGPIO+0x10c>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <InitGPIO+0x10c>)
 80011fa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80011fe:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <InitGPIO+0x10c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <InitGPIO+0x10c>)
 8001206:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800120a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <InitGPIO+0x10c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <InitGPIO+0x10c>)
 8001212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001216:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <InitGPIO+0x10c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <InitGPIO+0x10c>)
 800121e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001222:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <InitGPIO+0x10c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <InitGPIO+0x10c>)
 800122a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800122e:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <InitGPIO+0x10c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <InitGPIO+0x10c>)
 8001236:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800123a:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <InitGPIO+0x10c>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <InitGPIO+0x10c>)
 8001242:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001246:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <InitGPIO+0x10c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <InitGPIO+0x10c>)
 800124e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001252:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <InitGPIO+0x10c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <InitGPIO+0x10c>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT15;						// Настройка порта PC15 на выход push-pull
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <InitGPIO+0x10c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <InitGPIO+0x10c>)
 8001266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800126a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <InitGPIO+0x10c>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <InitGPIO+0x10c>)
 8001272:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001276:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;				// Настройка на высокую выходную скорость
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <InitGPIO+0x10c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <InitGPIO+0x10c>)
 800127e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001282:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD15;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <InitGPIO+0x10c>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <InitGPIO+0x10c>)
 800128a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800128e:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE15;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <InitGPIO+0x10c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <InitGPIO+0x10c>)
 8001296:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800129a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE15_0;					// Настройка порта PC15 на выход
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <InitGPIO+0x10c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <InitGPIO+0x10c>)
 80012a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800

080012b8 <InitTIM10>:

/*************************	 Code	*************************/

/*************************	 Функции аппаратной инициализации таймера	*************************/

void InitTIM10 (void){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <InitTIM10+0x58>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <InitTIM10+0x58>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c6:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->PSC = 96 - 1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <InitTIM10+0x5c>)
 80012ca:	225f      	movs	r2, #95	; 0x5f
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->ARR = 500;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <InitTIM10+0x5c>)
 80012d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM10->DIER |= TIM_DIER_UIE;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <InitTIM10+0x5c>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <InitTIM10+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	60d3      	str	r3, [r2, #12]

	MRTUcount = 0;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <InitTIM10+0x60>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
	ReceptionStatus = ReceptionStopped;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <InitTIM10+0x64>)
 80012ea:	2232      	movs	r2, #50	; 0x32
 80012ec:	801a      	strh	r2, [r3, #0]

	TIM10->CR1 |= TIM_CR1_CEN;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <InitTIM10+0x5c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <InitTIM10+0x5c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

	TIM10->EGR |= TIM_EGR_UG;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <InitTIM10+0x5c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <InitTIM10+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6153      	str	r3, [r2, #20]

}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40014400 	.word	0x40014400
 8001318:	200002c4 	.word	0x200002c4
 800131c:	200002d8 	.word	0x200002d8

08001320 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	e00f      	b.n	800134c <TIM1_UP_TIM10_IRQHandler+0x2c>

				if (GTimerState[i] == TimerRunning){
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <TIM1_UP_TIM10_IRQHandler+0x26>

					GTimerVal[i]++;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <TIM1_UP_TIM10_IRQHandler+0x74>)
 800133a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800133e:	3201      	adds	r2, #1
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3301      	adds	r3, #1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d9ec      	bls.n	800132c <TIM1_UP_TIM10_IRQHandler+0xc>
				}
			}

	if (ReceptionStatus == ReceptionEnabled){
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d10f      	bne.n	800137a <TIM1_UP_TIM10_IRQHandler+0x5a>

		MRTUcount++;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001364:	801a      	strh	r2, [r3, #0]

		if (MRTUcount >= 5){
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d905      	bls.n	800137a <TIM1_UP_TIM10_IRQHandler+0x5a>
			SendMessage(ModbusRTUTimeOut);
 800136e:	2017      	movs	r0, #23
 8001370:	f7ff f9c6 	bl	8000700 <SendMessage>
			ReceptionStatus = ReceptionStopped;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	801a      	strh	r2, [r3, #0]
		}

	}

	TIM10->SR &= ~TIM_SR_UIF;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <TIM1_UP_TIM10_IRQHandler+0x80>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6113      	str	r3, [r2, #16]

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002d4 	.word	0x200002d4
 8001394:	200002c8 	.word	0x200002c8
 8001398:	200002d8 	.word	0x200002d8
 800139c:	200002c4 	.word	0x200002c4
 80013a0:	40014400 	.word	0x40014400

080013a4 <InitGTimer>:

/*************************	 Функции глобальных таймеров	*************************/

void InitGTimer(void){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < MaxGTimers; i++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e006      	b.n	80013be <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <InitGTimer+0x2c>)
 80013b4:	2100      	movs	r1, #0
 80013b6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MaxGTimers; i++){
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	3301      	adds	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d9f5      	bls.n	80013b0 <InitGTimer+0xc>
	}

}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	200002d4 	.word	0x200002d4

080013d4 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <StartGTimer+0x30>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d108      	bne.n	80013fa <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <StartGTimer+0x34>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <StartGTimer+0x30>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	54d1      	strb	r1, [r2, r3]
	}

}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200002d4 	.word	0x200002d4
 8001408:	200002c8 	.word	0x200002c8

0800140c <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <StopGTimer+0x1c>)
 800141a:	2100      	movs	r1, #0
 800141c:	54d1      	strb	r1, [r2, r3]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200002d4 	.word	0x200002d4

0800142c <GetGTimerVal>:
		GTimerState[GTimerID] = TimerRunning;
	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <GetGTimerVal+0x1c>)
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	200002c8 	.word	0x200002c8

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001452:	e003      	b.n	800145c <LoopCopyDataInit>

08001454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800145a:	3104      	adds	r1, #4

0800145c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001464:	d3f6      	bcc.n	8001454 <CopyDataInit>
  ldr  r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001468:	e002      	b.n	8001470 <LoopFillZerobss>

0800146a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800146a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800146c:	f842 3b04 	str.w	r3, [r2], #4

08001470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001474:	d3f9      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001476:	f7fe feaf 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f000 f811 	bl	80014a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff f8eb 	bl	8000658 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001488:	08001718 	.word	0x08001718
  ldr  r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001490:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001494:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001498:	200002dc 	.word	0x200002dc

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>
	...

080014a0 <__libc_init_array>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	4d0d      	ldr	r5, [pc, #52]	; (80014d8 <__libc_init_array+0x38>)
 80014a4:	4c0d      	ldr	r4, [pc, #52]	; (80014dc <__libc_init_array+0x3c>)
 80014a6:	1b64      	subs	r4, r4, r5
 80014a8:	10a4      	asrs	r4, r4, #2
 80014aa:	2600      	movs	r6, #0
 80014ac:	42a6      	cmp	r6, r4
 80014ae:	d109      	bne.n	80014c4 <__libc_init_array+0x24>
 80014b0:	4d0b      	ldr	r5, [pc, #44]	; (80014e0 <__libc_init_array+0x40>)
 80014b2:	4c0c      	ldr	r4, [pc, #48]	; (80014e4 <__libc_init_array+0x44>)
 80014b4:	f000 f818 	bl	80014e8 <_init>
 80014b8:	1b64      	subs	r4, r4, r5
 80014ba:	10a4      	asrs	r4, r4, #2
 80014bc:	2600      	movs	r6, #0
 80014be:	42a6      	cmp	r6, r4
 80014c0:	d105      	bne.n	80014ce <__libc_init_array+0x2e>
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c8:	4798      	blx	r3
 80014ca:	3601      	adds	r6, #1
 80014cc:	e7ee      	b.n	80014ac <__libc_init_array+0xc>
 80014ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d2:	4798      	blx	r3
 80014d4:	3601      	adds	r6, #1
 80014d6:	e7f2      	b.n	80014be <__libc_init_array+0x1e>
 80014d8:	08001710 	.word	0x08001710
 80014dc:	08001710 	.word	0x08001710
 80014e0:	08001710 	.word	0x08001710
 80014e4:	08001714 	.word	0x08001714

080014e8 <_init>:
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	bf00      	nop
 80014ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ee:	bc08      	pop	{r3}
 80014f0:	469e      	mov	lr, r3
 80014f2:	4770      	bx	lr

080014f4 <_fini>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	bf00      	nop
 80014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fa:	bc08      	pop	{r3}
 80014fc:	469e      	mov	lr, r3
 80014fe:	4770      	bx	lr
