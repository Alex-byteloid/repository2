
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a58  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e08  08001e08  00011e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d0  20000004  08001e14  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002d4  08001e14  000202d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002c59  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000c4f  00000000  00000000  00022c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000258  00000000  00000000  000238d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001c0  00000000  00000000  00023b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e577  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000036b6  00000000  00000000  00032267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050534  00000000  00000000  0003591d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00085e51  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000698  00000000  00000000  00085ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001bd8 	.word	0x08001bd8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001bd8 	.word	0x08001bd8

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	08001bf8 	.word	0x08001bf8

08000334 <CRC16>:

/*************************	 Code	*************************/



unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen ){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

unsigned char uchCRCHi = 0xFF ; 			/* high byte of CRC initialized */
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
unsigned char uchCRCLo = 0xFF ; 			/* low byte of CRC initialized */
 8000344:	23ff      	movs	r3, #255	; 0xff
 8000346:	73bb      	strb	r3, [r7, #14]
unsigned uIndex ; 							/* will index into CRC lookup table */
while (usDataLen--){ 						/* pass through message buffer */
 8000348:	e013      	b.n	8000372 <CRC16+0x3e>
uIndex = uchCRCLo ^ *puchMsg++; 			/* calculate the CRC */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	60bb      	str	r3, [r7, #8]
uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <CRC16+0x64>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	4053      	eors	r3, r2
 8000366:	73bb      	strb	r3, [r7, #14]
uchCRCHi = auchCRCLo[uIndex];
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <CRC16+0x68>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
while (usDataLen--){ 						/* pass through message buffer */
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	807a      	strh	r2, [r7, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	b21a      	sxth	r2, r3
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	b21b      	sxth	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b21b      	sxth	r3, r3
 800038a:	b29b      	uxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	08001c08 	.word	0x08001c08
 800039c:	08001d08 	.word	0x08001d08

080003a0 <InitI2C1>:

uint8_t I2C1BuferSendLenght;

/*************************	 Code	*************************/

void InitI2C1 (void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

/* I2C1 GPIO Configuration */

	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003a4:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <InitI2C1+0x180>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <InitI2C1+0x180>)
 80003aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1;				// Configuring the I / O Direction Mode for the Alternate Function
 80003b0:	4b5b      	ldr	r3, [pc, #364]	; (8000520 <InitI2C1+0x180>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a5a      	ldr	r2, [pc, #360]	; (8000520 <InitI2C1+0x180>)
 80003b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6;					// Configuring the output type of the open-drain
 80003bc:	4b58      	ldr	r3, [pc, #352]	; (8000520 <InitI2C1+0x180>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a57      	ldr	r2, [pc, #348]	; (8000520 <InitI2C1+0x180>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED6;
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <InitI2C1+0x180>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a54      	ldr	r2, [pc, #336]	; (8000520 <InitI2C1+0x180>)
 80003ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003d2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_0;			// Configuring the output speed is low
 80003d4:	4b52      	ldr	r3, [pc, #328]	; (8000520 <InitI2C1+0x180>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a51      	ldr	r2, [pc, #324]	; (8000520 <InitI2C1+0x180>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003de:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD6;
 80003e0:	4b4f      	ldr	r3, [pc, #316]	; (8000520 <InitI2C1+0x180>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a4e      	ldr	r2, [pc, #312]	; (8000520 <InitI2C1+0x180>)
 80003e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD6_0;					// Configuring the I / O pull-up
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <InitI2C1+0x180>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a4b      	ldr	r2, [pc, #300]	; (8000520 <InitI2C1+0x180>)
 80003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f6:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL6;					// Enable AF4 (I2C1...3) on port PB6
 80003f8:	4b49      	ldr	r3, [pc, #292]	; (8000520 <InitI2C1+0x180>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a48      	ldr	r2, [pc, #288]	; (8000520 <InitI2C1+0x180>)
 80003fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000402:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_2;
 8000404:	4b46      	ldr	r3, [pc, #280]	; (8000520 <InitI2C1+0x180>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a45      	ldr	r2, [pc, #276]	; (8000520 <InitI2C1+0x180>)
 800040a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040e:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~GPIO_MODER_MODER7;
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <InitI2C1+0x180>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a42      	ldr	r2, [pc, #264]	; (8000520 <InitI2C1+0x180>)
 8000416:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER7_1;				// Configuring the I / O Direction Mode for the Alternate Function
 800041c:	4b40      	ldr	r3, [pc, #256]	; (8000520 <InitI2C1+0x180>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a3f      	ldr	r2, [pc, #252]	; (8000520 <InitI2C1+0x180>)
 8000422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000426:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT7;					// Configuring the output type of the open-drain
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <InitI2C1+0x180>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <InitI2C1+0x180>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED7;
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <InitI2C1+0x180>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <InitI2C1+0x180>)
 800043a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED7_0;			// Configuring the output speed is low
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <InitI2C1+0x180>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a36      	ldr	r2, [pc, #216]	; (8000520 <InitI2C1+0x180>)
 8000446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800044a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD7;
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <InitI2C1+0x180>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <InitI2C1+0x180>)
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD7_0;					// Configuring the I / O pull-up
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <InitI2C1+0x180>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <InitI2C1+0x180>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL7;					// Enable AF4 (I2C1...3) on port PB6
 8000464:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <InitI2C1+0x180>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <InitI2C1+0x180>)
 800046a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800046e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7_2;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <InitI2C1+0x180>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <InitI2C1+0x180>)
 8000476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800047a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;					// Enable I2C1 clocking
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <InitI2C1+0x184>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <InitI2C1+0x184>)
 8000482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->OAR2 &= ~I2C_OAR2_ENDUAL;						// Disable Dual addressing mode
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <InitI2C1+0x188>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <InitI2C1+0x188>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 &= ~I2C_CR1_ENGC;							// Disable General call
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <InitI2C1+0x188>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a23      	ldr	r2, [pc, #140]	; (8000528 <InitI2C1+0x188>)
 800049a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;					// Enable clock stretching
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <InitI2C1+0x188>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <InitI2C1+0x188>)
 80004a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004aa:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_SMBUS;						// Enable I2C mode
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <InitI2C1+0x188>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <InitI2C1+0x188>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6013      	str	r3, [r2, #0]

	I2C1->CR2 &= ~I2C_CR2_FREQ;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <InitI2C1+0x188>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <InitI2C1+0x188>)
 80004be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004c2:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= 48;									// Set 48 MHz frequency
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <InitI2C1+0x188>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <InitI2C1+0x188>)
 80004ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004ce:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~I2C_CCR_FS;							// Sm mode I2C
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <InitI2C1+0x188>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <InitI2C1+0x188>)
 80004d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004da:	61d3      	str	r3, [r2, #28]

	I2C1->CCR &= ~I2C_CCR_CCR;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <InitI2C1+0x188>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <InitI2C1+0x188>)
 80004e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80004e6:	f023 030f 	bic.w	r3, r3, #15
 80004ea:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 240;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <InitI2C1+0x188>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <InitI2C1+0x188>)
 80004f2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80004f6:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE = 3;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <InitI2C1+0x188>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	621a      	str	r2, [r3, #32]

	I2C1->CR2 |= I2C_CR2_ITEVTEN;						// Разрешаем прерывания по событиям отравки и др. (Event interrupt enable)
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <InitI2C1+0x188>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <InitI2C1+0x188>)
 8000504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000508:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= I2C_CR1_PE;							// I2C1 Enable
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <InitI2C1+0x188>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <InitI2C1+0x188>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]

}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400
 8000524:	40023800 	.word	0x40023800
 8000528:	40005400 	.word	0x40005400

0800052c <InitDMAI2C1>:

void InitDMAI2C1 (void){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <InitDMAI2C1+0x90>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <InitDMAI2C1+0x90>)
 8000536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800053a:	6313      	str	r3, [r2, #48]	; 0x30

	DMA1_Stream1->CR &= ~DMA_SxCR_CHSEL;
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <InitDMAI2C1+0x94>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <InitDMAI2C1+0x94>)
 8000542:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000546:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->PAR = (uint32_t) & I2C1->DR;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <InitDMAI2C1+0x94>)
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <InitDMAI2C1+0x98>)
 800054c:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->M0AR = (uint32_t) & I2C1Data[0];
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <InitDMAI2C1+0x94>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <InitDMAI2C1+0x9c>)
 8000552:	60da      	str	r2, [r3, #12]

	DMA1_Stream1->CR &= ~DMA_SxCR_MSIZE;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <InitDMAI2C1+0x94>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <InitDMAI2C1+0x94>)
 800055a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800055e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_PSIZE;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <InitDMAI2C1+0x94>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <InitDMAI2C1+0x94>)
 8000566:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056a:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR |= DMA_SxCR_MINC;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <InitDMAI2C1+0x94>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <InitDMAI2C1+0x94>)
 8000572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000576:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_PINC;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <InitDMAI2C1+0x94>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <InitDMAI2C1+0x94>)
 800057e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR &= ~DMA_SxCR_PL;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <InitDMAI2C1+0x94>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <InitDMAI2C1+0x94>)
 800058a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800058e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_DIR_0;
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <InitDMAI2C1+0x94>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <InitDMAI2C1+0x94>)
 8000596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059a:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR &= ~DMA_SxCR_CIRC;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <InitDMAI2C1+0x94>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <InitDMAI2C1+0x94>)
 80005a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]

	DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <InitDMAI2C1+0x94>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <InitDMAI2C1+0x94>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]

}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40026028 	.word	0x40026028
 80005c4:	40005410 	.word	0x40005410
 80005c8:	20000024 	.word	0x20000024

080005cc <InitI2C1FSM>:

void InitI2C1FSM (void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	InitI2C1();
 80005d0:	f7ff fee6 	bl	80003a0 <InitI2C1>
	InitDMAI2C1();
 80005d4:	f7ff ffaa 	bl	800052c <InitDMAI2C1>

	i2cSendStates = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <InitI2C1FSM+0x1c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	_i2cSendStates = 0;
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <InitI2C1FSM+0x20>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000021 	.word	0x20000021

080005f0 <ProcessI2CWriteFSM>:

void ProcessI2CWriteFSM (void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	if ( i2cSendStates != _i2cSendStates) i2cEntry = 1; else i2cEntry = 0;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <ProcessI2CWriteFSM+0xf8>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d003      	beq.n	8000608 <ProcessI2CWriteFSM+0x18>
 8000600:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <ProcessI2CWriteFSM+0xfc>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e002      	b.n	800060e <ProcessI2CWriteFSM+0x1e>
 8000608:	4b38      	ldr	r3, [pc, #224]	; (80006ec <ProcessI2CWriteFSM+0xfc>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]

	_i2cSendStates = i2cSendStates;
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <ProcessI2CWriteFSM+0xf8>)
 8000614:	701a      	strb	r2, [r3, #0]

	switch (i2cSendStates){
 8000616:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d860      	bhi.n	80006e0 <ProcessI2CWriteFSM+0xf0>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <ProcessI2CWriteFSM+0x34>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	08000691 	.word	0x08000691
 800062c:	080006ad 	.word	0x080006ad
 8000630:	080006c9 	.word	0x080006c9

	case 0:

		if (i2cEntry == 1){
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <ProcessI2CWriteFSM+0xfc>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d108      	bne.n	800064e <ProcessI2CWriteFSM+0x5e>
			DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]
			I2C1BuferSendLenght = 0;
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <ProcessI2CWriteFSM+0x104>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		}

		if (I2C1BuferSendLenght == 0) {
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <ProcessI2CWriteFSM+0x104>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d108      	bne.n	8000668 <ProcessI2CWriteFSM+0x78>
			i2cSendStates = 0;
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->CR &= ~DMA_SxCR_EN;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]
		}

		if (GetMessage(I2C1StartTransaction)){
 8000668:	200e      	movs	r0, #14
 800066a:	f000 fc19 	bl	8000ea0 <GetMessage>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d030      	beq.n	80006d6 <ProcessI2CWriteFSM+0xe6>
			i2cSendStates = 1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			DMA1_Stream1->NDTR = I2C1BuferSendLenght;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <ProcessI2CWriteFSM+0x104>)
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 8000680:	605a      	str	r2, [r3, #4]
			DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <ProcessI2CWriteFSM+0x100>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]
		}

		break;
 800068e:	e022      	b.n	80006d6 <ProcessI2CWriteFSM+0xe6>

	case 1:

		if (i2cEntry == 1){
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <ProcessI2CWriteFSM+0xfc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d120      	bne.n	80006da <ProcessI2CWriteFSM+0xea>
			I2C1->CR1 |= I2C_CR1_START;								// Генерируем СТАРТ условие
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <ProcessI2CWriteFSM+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <ProcessI2CWriteFSM+0x108>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a2:	6013      	str	r3, [r2, #0]
			i2cSendStates = 2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	701a      	strb	r2, [r3, #0]
		}

		break;
 80006aa:	e016      	b.n	80006da <ProcessI2CWriteFSM+0xea>

	case 2:

		if (GetGTimerVal(GTimer1) > 1000){
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 fa35 	bl	8001b1c <GetGTimerVal>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b8:	d911      	bls.n	80006de <ProcessI2CWriteFSM+0xee>
			i2cSendStates = 3;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <ProcessI2CWriteFSM+0xf4>)
 80006bc:	2203      	movs	r2, #3
 80006be:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fa1b 	bl	8001afc <StopGTimer>
		}

		break;
 80006c6:	e00a      	b.n	80006de <ProcessI2CWriteFSM+0xee>

	case 3:

		GPIOC->BSRR |= GPIO_BSRR_BS15;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <ProcessI2CWriteFSM+0x10c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <ProcessI2CWriteFSM+0x10c>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d2:	6193      	str	r3, [r2, #24]

		break;
 80006d4:	e004      	b.n	80006e0 <ProcessI2CWriteFSM+0xf0>
		break;
 80006d6:	bf00      	nop
 80006d8:	e002      	b.n	80006e0 <ProcessI2CWriteFSM+0xf0>
		break;
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <ProcessI2CWriteFSM+0xf0>
		break;
 80006de:	bf00      	nop
	}

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000088 	.word	0x20000088
 80006e8:	20000021 	.word	0x20000021
 80006ec:	20000020 	.word	0x20000020
 80006f0:	40026028 	.word	0x40026028
 80006f4:	20000089 	.word	0x20000089
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40020800 	.word	0x40020800

08000700 <DMA1_Stream1_IRQHandler>:

/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/

void DMA1_Stream1_IRQHandler (void){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

	if (DMA1->LISR & DMA_LISR_TCIF1){
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <DMA1_Stream1_IRQHandler+0x44>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800070c:	2b00      	cmp	r3, #0
 800070e:	d014      	beq.n	800073a <DMA1_Stream1_IRQHandler+0x3a>
		I2C1->CR1 |= I2C_CR1_STOP;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <DMA1_Stream1_IRQHandler+0x48>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <DMA1_Stream1_IRQHandler+0x48>)
 8000716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800071a:	6013      	str	r3, [r2, #0]
		I2C1->CR2 &= ~I2C_CR2_DMAEN;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <DMA1_Stream1_IRQHandler+0x48>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <DMA1_Stream1_IRQHandler+0x48>)
 8000722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000726:	6053      	str	r3, [r2, #4]
		i2cSendStates = 0;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <DMA1_Stream1_IRQHandler+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
		DMA1->LIFCR |= DMA_LIFCR_CTCIF1;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <DMA1_Stream1_IRQHandler+0x44>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <DMA1_Stream1_IRQHandler+0x44>)
 8000734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000738:	6093      	str	r3, [r2, #8]
	}

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40026000 	.word	0x40026000
 8000748:	40005400 	.word	0x40005400
 800074c:	20000088 	.word	0x20000088

08000750 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

	if (I2C1->SR1 & I2C_SR1_SB){
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00d      	beq.n	800077c <I2C1_EV_IRQHandler+0x2c>
		(void) I2C1->SR1;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 8000762:	695b      	ldr	r3, [r3, #20]
		StartGTimer(GTimer1);
 8000764:	2000      	movs	r0, #0
 8000766:	f001 f9ad 	bl	8001ac4 <StartGTimer>
		I2C1->DR = AddrDevice;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 800076c:	224e      	movs	r2, #78	; 0x4e
 800076e:	611a      	str	r2, [r3, #16]
		I2C1->CR2 |= I2C_CR2_DMAEN;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 8000776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800077a:	6053      	str	r3, [r2, #4]
	}

	if (I2C1->SR1 & I2C_SR1_ADDR){
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	2b00      	cmp	r3, #0
 8000786:	d006      	beq.n	8000796 <I2C1_EV_IRQHandler+0x46>
		(void) I2C1->SR1;
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 800078a:	695b      	ldr	r3, [r3, #20]
		(void) I2C1->SR2;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <I2C1_EV_IRQHandler+0x4c>)
 800078e:	699b      	ldr	r3, [r3, #24]
		StopGTimer(GTimer1);
 8000790:	2000      	movs	r0, #0
 8000792:	f001 f9b3 	bl	8001afc <StopGTimer>
	}

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40005400 	.word	0x40005400

080007a0 <InitLCD>:

/*************************	 Функции для дисплея 16xx (16xx Display function)	*************************/

void InitLCD (void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

	I2C1Data[0] = 0x3C;
 80007a4:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <InitLCD+0xf4>)
 80007a6:	223c      	movs	r2, #60	; 0x3c
 80007a8:	701a      	strb	r2, [r3, #0]
	I2C1Data[1] = 0x38;
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <InitLCD+0xf4>)
 80007ac:	2238      	movs	r2, #56	; 0x38
 80007ae:	705a      	strb	r2, [r3, #1]
	I2C1Data[2] = 0x3C;
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <InitLCD+0xf4>)
 80007b2:	223c      	movs	r2, #60	; 0x3c
 80007b4:	709a      	strb	r2, [r3, #2]
	I2C1Data[3] = 0x38;
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <InitLCD+0xf4>)
 80007b8:	2238      	movs	r2, #56	; 0x38
 80007ba:	70da      	strb	r2, [r3, #3]
	I2C1Data[4] = 0x3C;
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <InitLCD+0xf4>)
 80007be:	223c      	movs	r2, #60	; 0x3c
 80007c0:	711a      	strb	r2, [r3, #4]
	I2C1Data[5] = 0x38;
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <InitLCD+0xf4>)
 80007c4:	2238      	movs	r2, #56	; 0x38
 80007c6:	715a      	strb	r2, [r3, #5]

	I2C1Data[6] = 0x2C;
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <InitLCD+0xf4>)
 80007ca:	222c      	movs	r2, #44	; 0x2c
 80007cc:	719a      	strb	r2, [r3, #6]
	I2C1Data[7] = 0x28;
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <InitLCD+0xf4>)
 80007d0:	2228      	movs	r2, #40	; 0x28
 80007d2:	71da      	strb	r2, [r3, #7]

	I2C1Data[8] = 0x2C;
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <InitLCD+0xf4>)
 80007d6:	222c      	movs	r2, #44	; 0x2c
 80007d8:	721a      	strb	r2, [r3, #8]
	I2C1Data[9] = 0x28;
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <InitLCD+0xf4>)
 80007dc:	2228      	movs	r2, #40	; 0x28
 80007de:	725a      	strb	r2, [r3, #9]
	I2C1Data[10] = 0xCC;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <InitLCD+0xf4>)
 80007e2:	22cc      	movs	r2, #204	; 0xcc
 80007e4:	729a      	strb	r2, [r3, #10]
	I2C1Data[11] = 0xC8;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <InitLCD+0xf4>)
 80007e8:	22c8      	movs	r2, #200	; 0xc8
 80007ea:	72da      	strb	r2, [r3, #11]

	I2C1Data[12] = 0x0C;
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <InitLCD+0xf4>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	731a      	strb	r2, [r3, #12]
	I2C1Data[13] = 0x08;
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <InitLCD+0xf4>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	735a      	strb	r2, [r3, #13]
	I2C1Data[14] = 0x8C;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <InitLCD+0xf4>)
 80007fa:	228c      	movs	r2, #140	; 0x8c
 80007fc:	739a      	strb	r2, [r3, #14]
	I2C1Data[15] = 0x88;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <InitLCD+0xf4>)
 8000800:	2288      	movs	r2, #136	; 0x88
 8000802:	73da      	strb	r2, [r3, #15]

	I2C1Data[16] = 0x0C;
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <InitLCD+0xf4>)
 8000806:	220c      	movs	r2, #12
 8000808:	741a      	strb	r2, [r3, #16]
	I2C1Data[17] = 0x08;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <InitLCD+0xf4>)
 800080c:	2208      	movs	r2, #8
 800080e:	745a      	strb	r2, [r3, #17]
	I2C1Data[18] = 0x8C;
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <InitLCD+0xf4>)
 8000812:	228c      	movs	r2, #140	; 0x8c
 8000814:	749a      	strb	r2, [r3, #18]
	I2C1Data[19] = 0x88;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <InitLCD+0xf4>)
 8000818:	2288      	movs	r2, #136	; 0x88
 800081a:	74da      	strb	r2, [r3, #19]

	I2C1Data[20] = 0x0C;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <InitLCD+0xf4>)
 800081e:	220c      	movs	r2, #12
 8000820:	751a      	strb	r2, [r3, #20]
	I2C1Data[21] = 0x08;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <InitLCD+0xf4>)
 8000824:	2208      	movs	r2, #8
 8000826:	755a      	strb	r2, [r3, #21]
	I2C1Data[22] = 0x6C;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <InitLCD+0xf4>)
 800082a:	226c      	movs	r2, #108	; 0x6c
 800082c:	759a      	strb	r2, [r3, #22]
	I2C1Data[23] = 0x68;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <InitLCD+0xf4>)
 8000830:	2268      	movs	r2, #104	; 0x68
 8000832:	75da      	strb	r2, [r3, #23]

	I2C1Data[24] = 0x0C;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <InitLCD+0xf4>)
 8000836:	220c      	movs	r2, #12
 8000838:	761a      	strb	r2, [r3, #24]
	I2C1Data[25] = 0x08;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <InitLCD+0xf4>)
 800083c:	2208      	movs	r2, #8
 800083e:	765a      	strb	r2, [r3, #25]
	I2C1Data[26] = 0xCC;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <InitLCD+0xf4>)
 8000842:	22cc      	movs	r2, #204	; 0xcc
 8000844:	769a      	strb	r2, [r3, #26]
	I2C1Data[27] = 0xC8;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <InitLCD+0xf4>)
 8000848:	22c8      	movs	r2, #200	; 0xc8
 800084a:	76da      	strb	r2, [r3, #27]

	I2C1Data[28] = 0x0C;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <InitLCD+0xf4>)
 800084e:	220c      	movs	r2, #12
 8000850:	771a      	strb	r2, [r3, #28]
	I2C1Data[29] = 0x08;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <InitLCD+0xf4>)
 8000854:	2208      	movs	r2, #8
 8000856:	775a      	strb	r2, [r3, #29]
	I2C1Data[30] = 0x1C;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <InitLCD+0xf4>)
 800085a:	221c      	movs	r2, #28
 800085c:	779a      	strb	r2, [r3, #30]
	I2C1Data[31] = 0x18;
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <InitLCD+0xf4>)
 8000860:	2218      	movs	r2, #24
 8000862:	77da      	strb	r2, [r3, #31]

	I2C1Data[32] = 0x4C;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <InitLCD+0xf4>)
 8000866:	224c      	movs	r2, #76	; 0x4c
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
	I2C1Data[33] = 0x48;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <InitLCD+0xf4>)
 800086e:	2248      	movs	r2, #72	; 0x48
 8000870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	I2C1Data[34] = 0xC;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <InitLCD+0xf4>)
 8000876:	220c      	movs	r2, #12
 8000878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	I2C1Data[35] = 0x8;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <InitLCD+0xf4>)
 800087e:	2208      	movs	r2, #8
 8000880:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	I2C1BuferSendLenght = 6;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <InitLCD+0xf8>)
 8000886:	2206      	movs	r2, #6
 8000888:	701a      	strb	r2, [r3, #0]
	SendMessage(I2C1StartTransaction);
 800088a:	200e      	movs	r0, #14
 800088c:	f000 face 	bl	8000e2c <SendMessage>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000024 	.word	0x20000024
 8000898:	20000089 	.word	0x20000089

0800089c <WriteCommand>:

uint8_t WriteCommand (uint8_t Data, uint8_t BuferLeftBorder){
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]

	uint8_t Up = Data & 0xF0;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f023 030f 	bic.w	r3, r3, #15
 80008b2:	73fb      	strb	r3, [r7, #15]
	uint8_t Low = (Data<<4) & 0xF0;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	73bb      	strb	r3, [r7, #14]

	uint8_t Send;

	Send = (Up | 0x0C);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	f043 030c 	orr.w	r3, r3, #12
 80008c0:	737b      	strb	r3, [r7, #13]
	I2C1Data[BuferLeftBorder] = Send;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4912      	ldr	r1, [pc, #72]	; (8000910 <WriteCommand+0x74>)
 80008c6:	7b7a      	ldrb	r2, [r7, #13]
 80008c8:	54ca      	strb	r2, [r1, r3]
	Send = (Up | 0x08);
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	737b      	strb	r3, [r7, #13]
	I2C1Data[BuferLeftBorder + 1] = Send;
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	3301      	adds	r3, #1
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <WriteCommand+0x74>)
 80008d8:	7b7a      	ldrb	r2, [r7, #13]
 80008da:	54ca      	strb	r2, [r1, r3]

	Send = (Low | 0x0C);
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	f043 030c 	orr.w	r3, r3, #12
 80008e2:	737b      	strb	r3, [r7, #13]
	I2C1Data[BuferLeftBorder + 2] = Send;
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	3302      	adds	r3, #2
 80008e8:	4909      	ldr	r1, [pc, #36]	; (8000910 <WriteCommand+0x74>)
 80008ea:	7b7a      	ldrb	r2, [r7, #13]
 80008ec:	54ca      	strb	r2, [r1, r3]
	Send = (Low | 0x08);
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	737b      	strb	r3, [r7, #13]
	I2C1Data[BuferLeftBorder + 3] = Send;
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	3303      	adds	r3, #3
 80008fa:	4905      	ldr	r1, [pc, #20]	; (8000910 <WriteCommand+0x74>)
 80008fc:	7b7a      	ldrb	r2, [r7, #13]
 80008fe:	54ca      	strb	r2, [r1, r3]

	return (BuferLeftBorder + 3);
 8000900:	79bb      	ldrb	r3, [r7, #6]
 8000902:	3303      	adds	r3, #3
 8000904:	b2db      	uxtb	r3, r3

}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000024 	.word	0x20000024

08000914 <WriteDataToLCD>:

void WriteDataToLCD (uint8_t X,uint8_t Y, char *Str){
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	71bb      	strb	r3, [r7, #6]

	for (uint8_t i = 0; i < I2C1DataBuferLenght; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e006      	b.n	8000938 <WriteDataToLCD+0x24>
		I2C1Data[i] = 0;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4ac2      	ldr	r2, [pc, #776]	; (8000c38 <WriteDataToLCD+0x324>)
 800092e:	2100      	movs	r1, #0
 8000930:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < I2C1DataBuferLenght; i++){
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3301      	adds	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b63      	cmp	r3, #99	; 0x63
 800093c:	d9f5      	bls.n	800092a <WriteDataToLCD+0x16>
	}

	uint8_t BuferRightBorder = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	73bb      	strb	r3, [r7, #14]

	if (X == 1){
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 8099 	bne.w	8000a7c <WriteDataToLCD+0x168>

			switch (Y){
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	3b01      	subs	r3, #1
 800094e:	2b0f      	cmp	r3, #15
 8000950:	f200 8095 	bhi.w	8000a7e <WriteDataToLCD+0x16a>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <WriteDataToLCD+0x48>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	0800099d 	.word	0x0800099d
 8000960:	080009ab 	.word	0x080009ab
 8000964:	080009b9 	.word	0x080009b9
 8000968:	080009c7 	.word	0x080009c7
 800096c:	080009d5 	.word	0x080009d5
 8000970:	080009e3 	.word	0x080009e3
 8000974:	080009f1 	.word	0x080009f1
 8000978:	080009ff 	.word	0x080009ff
 800097c:	08000a0d 	.word	0x08000a0d
 8000980:	08000a1b 	.word	0x08000a1b
 8000984:	08000a29 	.word	0x08000a29
 8000988:	08000a37 	.word	0x08000a37
 800098c:	08000a45 	.word	0x08000a45
 8000990:	08000a53 	.word	0x08000a53
 8000994:	08000a61 	.word	0x08000a61
 8000998:	08000a6f 	.word	0x08000a6f

			case 1:
				BuferRightBorder = WriteCommand(0x80, 0);
 800099c:	2100      	movs	r1, #0
 800099e:	2080      	movs	r0, #128	; 0x80
 80009a0:	f7ff ff7c 	bl	800089c <WriteCommand>
 80009a4:	4603      	mov	r3, r0
 80009a6:	73bb      	strb	r3, [r7, #14]
				break;
 80009a8:	e069      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 2:
				BuferRightBorder = WriteCommand(0x81, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2081      	movs	r0, #129	; 0x81
 80009ae:	f7ff ff75 	bl	800089c <WriteCommand>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73bb      	strb	r3, [r7, #14]
				break;
 80009b6:	e062      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 3:
				BuferRightBorder = WriteCommand(0x82, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2082      	movs	r0, #130	; 0x82
 80009bc:	f7ff ff6e 	bl	800089c <WriteCommand>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73bb      	strb	r3, [r7, #14]
				break;
 80009c4:	e05b      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 4:
				BuferRightBorder = WriteCommand(0x83, 0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2083      	movs	r0, #131	; 0x83
 80009ca:	f7ff ff67 	bl	800089c <WriteCommand>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73bb      	strb	r3, [r7, #14]
				break;
 80009d2:	e054      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 5:
				BuferRightBorder = WriteCommand(0x84, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2084      	movs	r0, #132	; 0x84
 80009d8:	f7ff ff60 	bl	800089c <WriteCommand>
 80009dc:	4603      	mov	r3, r0
 80009de:	73bb      	strb	r3, [r7, #14]
				break;
 80009e0:	e04d      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 6:
				BuferRightBorder = WriteCommand(0x85, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2085      	movs	r0, #133	; 0x85
 80009e6:	f7ff ff59 	bl	800089c <WriteCommand>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73bb      	strb	r3, [r7, #14]
				break;
 80009ee:	e046      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 7:
				BuferRightBorder = WriteCommand(0x86, 0);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2086      	movs	r0, #134	; 0x86
 80009f4:	f7ff ff52 	bl	800089c <WriteCommand>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73bb      	strb	r3, [r7, #14]
				break;
 80009fc:	e03f      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 8:
				BuferRightBorder = WriteCommand(0x87, 0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2087      	movs	r0, #135	; 0x87
 8000a02:	f7ff ff4b 	bl	800089c <WriteCommand>
 8000a06:	4603      	mov	r3, r0
 8000a08:	73bb      	strb	r3, [r7, #14]
				break;
 8000a0a:	e038      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 9:
				BuferRightBorder = WriteCommand(0x88, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2088      	movs	r0, #136	; 0x88
 8000a10:	f7ff ff44 	bl	800089c <WriteCommand>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73bb      	strb	r3, [r7, #14]
				break;
 8000a18:	e031      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 10:
				BuferRightBorder = WriteCommand(0x89, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2089      	movs	r0, #137	; 0x89
 8000a1e:	f7ff ff3d 	bl	800089c <WriteCommand>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73bb      	strb	r3, [r7, #14]
				break;
 8000a26:	e02a      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 11:
				BuferRightBorder = WriteCommand(0x8A, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	208a      	movs	r0, #138	; 0x8a
 8000a2c:	f7ff ff36 	bl	800089c <WriteCommand>
 8000a30:	4603      	mov	r3, r0
 8000a32:	73bb      	strb	r3, [r7, #14]
				break;
 8000a34:	e023      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 12:
				BuferRightBorder = WriteCommand(0x8B, 0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	208b      	movs	r0, #139	; 0x8b
 8000a3a:	f7ff ff2f 	bl	800089c <WriteCommand>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73bb      	strb	r3, [r7, #14]
				break;
 8000a42:	e01c      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 13:
				BuferRightBorder = WriteCommand(0x8C, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	208c      	movs	r0, #140	; 0x8c
 8000a48:	f7ff ff28 	bl	800089c <WriteCommand>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73bb      	strb	r3, [r7, #14]
				break;
 8000a50:	e015      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 14:
				BuferRightBorder = WriteCommand(0x8D, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	208d      	movs	r0, #141	; 0x8d
 8000a56:	f7ff ff21 	bl	800089c <WriteCommand>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73bb      	strb	r3, [r7, #14]
				break;
 8000a5e:	e00e      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 15:
				BuferRightBorder = WriteCommand(0x8E, 0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	208e      	movs	r0, #142	; 0x8e
 8000a64:	f7ff ff1a 	bl	800089c <WriteCommand>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73bb      	strb	r3, [r7, #14]
				break;
 8000a6c:	e007      	b.n	8000a7e <WriteDataToLCD+0x16a>

			case 16:
				BuferRightBorder = WriteCommand(0x8F, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	208f      	movs	r0, #143	; 0x8f
 8000a72:	f7ff ff13 	bl	800089c <WriteCommand>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73bb      	strb	r3, [r7, #14]
				break;
 8000a7a:	e000      	b.n	8000a7e <WriteDataToLCD+0x16a>
			}

		}
 8000a7c:	bf00      	nop

		if (X == 2){
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	f040 8099 	bne.w	8000bb8 <WriteDataToLCD+0x2a4>

				switch (Y){
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	f200 80c9 	bhi.w	8000c22 <WriteDataToLCD+0x30e>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <WriteDataToLCD+0x184>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000ad9 	.word	0x08000ad9
 8000a9c:	08000ae7 	.word	0x08000ae7
 8000aa0:	08000af5 	.word	0x08000af5
 8000aa4:	08000b03 	.word	0x08000b03
 8000aa8:	08000b11 	.word	0x08000b11
 8000aac:	08000b1f 	.word	0x08000b1f
 8000ab0:	08000b2d 	.word	0x08000b2d
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b49 	.word	0x08000b49
 8000abc:	08000b57 	.word	0x08000b57
 8000ac0:	08000b65 	.word	0x08000b65
 8000ac4:	08000b73 	.word	0x08000b73
 8000ac8:	08000b81 	.word	0x08000b81
 8000acc:	08000b8f 	.word	0x08000b8f
 8000ad0:	08000b9d 	.word	0x08000b9d
 8000ad4:	08000bab 	.word	0x08000bab

				case 1:
					BuferRightBorder = WriteCommand(0xC0, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	20c0      	movs	r0, #192	; 0xc0
 8000adc:	f7ff fede 	bl	800089c <WriteCommand>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73bb      	strb	r3, [r7, #14]
					break;
 8000ae4:	e069      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 2:
					BuferRightBorder = WriteCommand(0xC1, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	20c1      	movs	r0, #193	; 0xc1
 8000aea:	f7ff fed7 	bl	800089c <WriteCommand>
 8000aee:	4603      	mov	r3, r0
 8000af0:	73bb      	strb	r3, [r7, #14]
					break;
 8000af2:	e062      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 3:
					BuferRightBorder = WriteCommand(0xC2, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	20c2      	movs	r0, #194	; 0xc2
 8000af8:	f7ff fed0 	bl	800089c <WriteCommand>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73bb      	strb	r3, [r7, #14]
					break;
 8000b00:	e05b      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 4:
					BuferRightBorder = WriteCommand(0xC3, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	20c3      	movs	r0, #195	; 0xc3
 8000b06:	f7ff fec9 	bl	800089c <WriteCommand>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73bb      	strb	r3, [r7, #14]
					break;
 8000b0e:	e054      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 5:
					BuferRightBorder = WriteCommand(0xC4, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	20c4      	movs	r0, #196	; 0xc4
 8000b14:	f7ff fec2 	bl	800089c <WriteCommand>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73bb      	strb	r3, [r7, #14]
					break;
 8000b1c:	e04d      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 6:
					BuferRightBorder = WriteCommand(0xC5, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	20c5      	movs	r0, #197	; 0xc5
 8000b22:	f7ff febb 	bl	800089c <WriteCommand>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73bb      	strb	r3, [r7, #14]
					break;
 8000b2a:	e046      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 7:
					BuferRightBorder = WriteCommand(0xC6, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	20c6      	movs	r0, #198	; 0xc6
 8000b30:	f7ff feb4 	bl	800089c <WriteCommand>
 8000b34:	4603      	mov	r3, r0
 8000b36:	73bb      	strb	r3, [r7, #14]
					break;
 8000b38:	e03f      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 8:
					BuferRightBorder = WriteCommand(0xC7, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	20c7      	movs	r0, #199	; 0xc7
 8000b3e:	f7ff fead 	bl	800089c <WriteCommand>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73bb      	strb	r3, [r7, #14]
					break;
 8000b46:	e038      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 9:
					BuferRightBorder = WriteCommand(0xC8, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	20c8      	movs	r0, #200	; 0xc8
 8000b4c:	f7ff fea6 	bl	800089c <WriteCommand>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73bb      	strb	r3, [r7, #14]
					break;
 8000b54:	e031      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 10:
					BuferRightBorder = WriteCommand(0xC9, 0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	20c9      	movs	r0, #201	; 0xc9
 8000b5a:	f7ff fe9f 	bl	800089c <WriteCommand>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73bb      	strb	r3, [r7, #14]
					break;
 8000b62:	e02a      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 11:
					BuferRightBorder = WriteCommand(0xCA, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	20ca      	movs	r0, #202	; 0xca
 8000b68:	f7ff fe98 	bl	800089c <WriteCommand>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73bb      	strb	r3, [r7, #14]
					break;
 8000b70:	e023      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 12:
					BuferRightBorder = WriteCommand(0xCB, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	20cb      	movs	r0, #203	; 0xcb
 8000b76:	f7ff fe91 	bl	800089c <WriteCommand>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73bb      	strb	r3, [r7, #14]
					break;
 8000b7e:	e01c      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 13:
					BuferRightBorder = WriteCommand(0xCC, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	20cc      	movs	r0, #204	; 0xcc
 8000b84:	f7ff fe8a 	bl	800089c <WriteCommand>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73bb      	strb	r3, [r7, #14]
					break;
 8000b8c:	e015      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 14:
					BuferRightBorder = WriteCommand(0xCD, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	20cd      	movs	r0, #205	; 0xcd
 8000b92:	f7ff fe83 	bl	800089c <WriteCommand>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73bb      	strb	r3, [r7, #14]
					break;
 8000b9a:	e00e      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 15:
					BuferRightBorder = WriteCommand(0xCE, 0);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	20ce      	movs	r0, #206	; 0xce
 8000ba0:	f7ff fe7c 	bl	800089c <WriteCommand>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73bb      	strb	r3, [r7, #14]
					break;
 8000ba8:	e007      	b.n	8000bba <WriteDataToLCD+0x2a6>

				case 16:
					BuferRightBorder = WriteCommand(0xCF, 0);
 8000baa:	2100      	movs	r1, #0
 8000bac:	20cf      	movs	r0, #207	; 0xcf
 8000bae:	f7ff fe75 	bl	800089c <WriteCommand>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73bb      	strb	r3, [r7, #14]
					break;
 8000bb6:	e000      	b.n	8000bba <WriteDataToLCD+0x2a6>
				}

			}
 8000bb8:	bf00      	nop

		while (*Str){
 8000bba:	e032      	b.n	8000c22 <WriteDataToLCD+0x30e>

			uint8_t Walue = (uint8_t)*Str;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	737b      	strb	r3, [r7, #13]
			uint8_t UpByte = Walue & 0xF0;
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	f023 030f 	bic.w	r3, r3, #15
 8000bc8:	733b      	strb	r3, [r7, #12]
			uint8_t LowByte = (Walue<<4) & 0xF0;
 8000bca:	7b7b      	ldrb	r3, [r7, #13]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	72fb      	strb	r3, [r7, #11]

			uint8_t WriteByte;

			WriteByte = (UpByte | 0x0D);
 8000bd0:	7b3b      	ldrb	r3, [r7, #12]
 8000bd2:	f043 030d 	orr.w	r3, r3, #13
 8000bd6:	72bb      	strb	r3, [r7, #10]
			I2C1Data[BuferRightBorder] = WriteByte;
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	4917      	ldr	r1, [pc, #92]	; (8000c38 <WriteDataToLCD+0x324>)
 8000bdc:	7aba      	ldrb	r2, [r7, #10]
 8000bde:	54ca      	strb	r2, [r1, r3]
			WriteByte = (UpByte | 0x09);
 8000be0:	7b3b      	ldrb	r3, [r7, #12]
 8000be2:	f043 0309 	orr.w	r3, r3, #9
 8000be6:	72bb      	strb	r3, [r7, #10]
			I2C1Data[BuferRightBorder + 1] = WriteByte;
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <WriteDataToLCD+0x324>)
 8000bee:	7aba      	ldrb	r2, [r7, #10]
 8000bf0:	54ca      	strb	r2, [r1, r3]

			WriteByte = (LowByte | 0x0D);
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	f043 030d 	orr.w	r3, r3, #13
 8000bf8:	72bb      	strb	r3, [r7, #10]
			I2C1Data[BuferRightBorder + 2] = WriteByte;
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <WriteDataToLCD+0x324>)
 8000c00:	7aba      	ldrb	r2, [r7, #10]
 8000c02:	54ca      	strb	r2, [r1, r3]
			WriteByte = (LowByte | 0x09);
 8000c04:	7afb      	ldrb	r3, [r7, #11]
 8000c06:	f043 0309 	orr.w	r3, r3, #9
 8000c0a:	72bb      	strb	r3, [r7, #10]
			I2C1Data[BuferRightBorder + 3] = WriteByte;
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	3303      	adds	r3, #3
 8000c10:	4909      	ldr	r1, [pc, #36]	; (8000c38 <WriteDataToLCD+0x324>)
 8000c12:	7aba      	ldrb	r2, [r7, #10]
 8000c14:	54ca      	strb	r2, [r1, r3]

			BuferRightBorder = BuferRightBorder + 3;
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	3303      	adds	r3, #3
 8000c1a:	73bb      	strb	r3, [r7, #14]
			Str++;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	603b      	str	r3, [r7, #0]
		while (*Str){
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1c8      	bne.n	8000bbc <WriteDataToLCD+0x2a8>

		}

		I2C1BuferSendLenght = BuferRightBorder;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <WriteDataToLCD+0x328>)
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	7013      	strb	r3, [r2, #0]

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000024 	.word	0x20000024
 8000c3c:	20000089 	.word	0x20000089

08000c40 <ClearGram>:

void ClearGram (void){
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

	I2C1Data[0] = 0x0C;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <ClearGram+0x2c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	701a      	strb	r2, [r3, #0]
	I2C1Data[1] = 0x08;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <ClearGram+0x2c>)
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	705a      	strb	r2, [r3, #1]
	I2C1Data[2] = 0x1C;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <ClearGram+0x2c>)
 8000c52:	221c      	movs	r2, #28
 8000c54:	709a      	strb	r2, [r3, #2]
	I2C1Data[3] = 0x18;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <ClearGram+0x2c>)
 8000c58:	2218      	movs	r2, #24
 8000c5a:	70da      	strb	r2, [r3, #3]

	I2C1BuferSendLenght = 4;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <ClearGram+0x30>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	701a      	strb	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000024 	.word	0x20000024
 8000c70:	20000089 	.word	0x20000089

08000c74 <InitLedFSM>:
uint8_t _statePis;				// Переменная предыдущего состояния автомата
uint8_t entryPis1;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

	statePis = _statePis = 0;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <InitLedFSM+0x20>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <InitLedFSM+0x20>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <InitLedFSM+0x24>)
 8000c84:	701a      	strb	r2, [r3, #0]
	entryPis1 = 0;
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <InitLedFSM+0x28>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	2000008a 	.word	0x2000008a
 8000c9c:	2000008b 	.word	0x2000008b

08000ca0 <ProcessLedFSM>:

void ProcessLedFSM (void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

	if (statePis != _statePis) entryPis1 = 1; else entryPis1 = 0;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <ProcessLedFSM+0xd0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d003      	beq.n	8000cb8 <ProcessLedFSM+0x18>
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <ProcessLedFSM+0xd4>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e002      	b.n	8000cbe <ProcessLedFSM+0x1e>
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <ProcessLedFSM+0xd4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]

	_statePis = statePis;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <ProcessLedFSM+0xd0>)
 8000cc4:	701a      	strb	r2, [r3, #0]

	switch (statePis){
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d02b      	beq.n	8000d26 <ProcessLedFSM+0x86>
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	dc49      	bgt.n	8000d66 <ProcessLedFSM+0xc6>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <ProcessLedFSM+0x3c>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d00a      	beq.n	8000cf0 <ProcessLedFSM+0x50>
			StopGTimer(GTimer2);
		}
		break;
	}

}
 8000cda:	e044      	b.n	8000d66 <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f000 f8df 	bl	8000ea0 <GetMessage>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d039      	beq.n	8000d5c <ProcessLedFSM+0xbc>
			statePis = 1;
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
		break;
 8000cee:	e035      	b.n	8000d5c <ProcessLedFSM+0xbc>
		if (entryPis1 == 1){
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <ProcessLedFSM+0xd4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d108      	bne.n	8000d0a <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <ProcessLedFSM+0xd8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <ProcessLedFSM+0xd8>)
 8000cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d02:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fedd 	bl	8001ac4 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 ff06 	bl	8001b1c <GetGTimerVal>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d16:	d323      	bcc.n	8000d60 <ProcessLedFSM+0xc0>
			statePis = 2;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 feec 	bl	8001afc <StopGTimer>
		break;
 8000d24:	e01c      	b.n	8000d60 <ProcessLedFSM+0xc0>
		if (entryPis1 == 1){
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <ProcessLedFSM+0xd4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d108      	bne.n	8000d40 <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <ProcessLedFSM+0xd8>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <ProcessLedFSM+0xd8>)
 8000d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d38:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer2);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fec2 	bl	8001ac4 <StartGTimer>
		if (GetGTimerVal(GTimer2) >= 2000){
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 feeb 	bl	8001b1c <GetGTimerVal>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d4c:	d30a      	bcc.n	8000d64 <ProcessLedFSM+0xc4>
			statePis = 1;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <ProcessLedFSM+0xcc>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer2);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fed1 	bl	8001afc <StopGTimer>
		break;
 8000d5a:	e003      	b.n	8000d64 <ProcessLedFSM+0xc4>
		break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <ProcessLedFSM+0xc6>
		break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <ProcessLedFSM+0xc6>
		break;
 8000d64:	bf00      	nop
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000008a 	.word	0x2000008a
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	2000008b 	.word	0x2000008b
 8000d78:	40020800 	.word	0x40020800

08000d7c <main>:



/*************************	 Code	*************************/

int main (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

	InitGPIO();
 8000d80:	f000 fd8a 	bl	8001898 <InitGPIO>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <main+0x78>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <main+0x78>)
 8000d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d8e:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BR15;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <main+0x78>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <main+0x78>)
 8000d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9a:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <main+0x78>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <main+0x78>)
 8000da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da6:	6193      	str	r3, [r2, #24]
	InitRCC();
 8000da8:	f000 fc8a 	bl	80016c0 <InitRCC>
	UpdateNVICActiveAndPriority();
 8000dac:	f000 fd2e 	bl	800180c <UpdateNVICActiveAndPriority>
	InitGTimer();
 8000db0:	f000 fe70 	bl	8001a94 <InitGTimer>
	InitTIM10();
 8000db4:	f000 fdf8 	bl	80019a8 <InitTIM10>
	InitMessage();
 8000db8:	f000 f81e 	bl	8000df8 <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 8000dbc:	f242 7314 	movw	r3, #10004	; 0x2714
 8000dc0:	f242 7213 	movw	r2, #10003	; 0x2713
 8000dc4:	f242 7110 	movw	r1, #10000	; 0x2710
 8000dc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dcc:	f000 f990 	bl	80010f0 <InitModbusFSM>
	InitLedFSM();
 8000dd0:	f7ff ff50 	bl	8000c74 <InitLedFSM>
	SendMessage(LedOnMsg);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 f829 	bl	8000e2c <SendMessage>

	InitI2C1FSM();
 8000dda:	f7ff fbf7 	bl	80005cc <InitI2C1FSM>
	InitLCD();
 8000dde:	f7ff fcdf 	bl	80007a0 <InitLCD>

	while(1){

		ProcessI2CWriteFSM();
 8000de2:	f7ff fc05 	bl	80005f0 <ProcessI2CWriteFSM>
		ProcessModbusSlaveFSM();
 8000de6:	f000 fb31 	bl	800144c <ProcessModbusSlaveFSM>
		ProcessLedFSM();
 8000dea:	f7ff ff59 	bl	8000ca0 <ProcessLedFSM>
		ProcessMessage();
 8000dee:	f000 f82d 	bl	8000e4c <ProcessMessage>
		ProcessI2CWriteFSM();
 8000df2:	e7f6      	b.n	8000de2 <main+0x66>
 8000df4:	40020800 	.word	0x40020800

08000df8 <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e007      	b.n	8000e14 <InitMessage+0x1c>
		Messages[i] = '0';
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <InitMessage+0x30>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3301      	adds	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b1d      	cmp	r3, #29
 8000e18:	ddf4      	ble.n	8000e04 <InitMessage+0xc>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000090 	.word	0x20000090

08000e2c <SendMessage>:

void SendMessage (int Msg){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	Messages[Msg] = '1';
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <SendMessage+0x1c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	2231      	movs	r2, #49	; 0x31
 8000e3c:	701a      	strb	r2, [r3, #0]

/*	if (Messages[Msg] == '0'){

		Messages[Msg] = '1';
	}*/
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000090 	.word	0x20000090

08000e4c <ProcessMessage>:

void ProcessMessage (void){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	e018      	b.n	8000e8a <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <ProcessMessage+0x50>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b32      	cmp	r3, #50	; 0x32
 8000e62:	d104      	bne.n	8000e6e <ProcessMessage+0x22>
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <ProcessMessage+0x50>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <ProcessMessage+0x50>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b31      	cmp	r3, #49	; 0x31
 8000e78:	d104      	bne.n	8000e84 <ProcessMessage+0x38>
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <ProcessMessage+0x50>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2232      	movs	r2, #50	; 0x32
 8000e82:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b1d      	cmp	r3, #29
 8000e8e:	dde3      	ble.n	8000e58 <ProcessMessage+0xc>
	}
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000090 	.word	0x20000090

08000ea0 <GetMessage>:

uint8_t GetMessage (int Msg){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <GetMessage+0x30>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b32      	cmp	r3, #50	; 0x32
 8000eb2:	d106      	bne.n	8000ec2 <GetMessage+0x22>
		Messages[Msg] = '0';
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <GetMessage+0x30>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <GetMessage+0x24>
	}
	return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <InitModbusUSART+0x170>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a57      	ldr	r2, [pc, #348]	; (8001044 <InitModbusUSART+0x170>)
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 8000eee:	4b56      	ldr	r3, [pc, #344]	; (8001048 <InitModbusUSART+0x174>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a55      	ldr	r2, [pc, #340]	; (8001048 <InitModbusUSART+0x174>)
 8000ef4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ef8:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <InitModbusUSART+0x174>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4a52      	ldr	r2, [pc, #328]	; (8001048 <InitModbusUSART+0x174>)
 8000f00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f04:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 8000f06:	4b50      	ldr	r3, [pc, #320]	; (8001048 <InitModbusUSART+0x174>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <InitModbusUSART+0x174>)
 8000f0c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000f10:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 8000f12:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <InitModbusUSART+0x174>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <InitModbusUSART+0x174>)
 8000f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1c:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <InitModbusUSART+0x174>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a49      	ldr	r2, [pc, #292]	; (8001048 <InitModbusUSART+0x174>)
 8000f24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f28:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <InitModbusUSART+0x174>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <InitModbusUSART+0x174>)
 8000f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f34:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 8000f36:	4b44      	ldr	r3, [pc, #272]	; (8001048 <InitModbusUSART+0x174>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	4a43      	ldr	r2, [pc, #268]	; (8001048 <InitModbusUSART+0x174>)
 8000f3c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f40:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <InitModbusUSART+0x174>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a40      	ldr	r2, [pc, #256]	; (8001048 <InitModbusUSART+0x174>)
 8000f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4c:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <InitModbusUSART+0x174>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <InitModbusUSART+0x174>)
 8000f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f58:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <InitModbusUSART+0x174>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <InitModbusUSART+0x174>)
 8000f60:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f64:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <InitModbusUSART+0x174>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a37      	ldr	r2, [pc, #220]	; (8001048 <InitModbusUSART+0x174>)
 8000f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f70:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f242 7214 	movw	r2, #10004	; 0x2714
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d15e      	bne.n	800103a <InitModbusUSART+0x166>

		USART->BRR = Speed;													// Установка скорости
 8000f7c:	4a33      	ldr	r2, [pc, #204]	; (800104c <InitModbusUSART+0x178>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <InitModbusUSART+0x178>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <InitModbusUSART+0x178>)
 8000f88:	f043 0320 	orr.w	r3, r3, #32
 8000f8c:	60d3      	str	r3, [r2, #12]

		if(ParityControl == ParityControlOn){
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f242 7211 	movw	r2, #10001	; 0x2711
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d10b      	bne.n	8000fb0 <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <InitModbusUSART+0x178>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a2b      	ldr	r2, [pc, #172]	; (800104c <InitModbusUSART+0x178>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <InitModbusUSART+0x178>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <InitModbusUSART+0x178>)
 8000faa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fae:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d105      	bne.n	8000fc6 <InitModbusUSART+0xf2>
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <InitModbusUSART+0x178>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <InitModbusUSART+0x178>)
 8000fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fc4:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f242 7212 	movw	r2, #10002	; 0x2712
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d105      	bne.n	8000fdc <InitModbusUSART+0x108>
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <InitModbusUSART+0x178>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <InitModbusUSART+0x178>)
 8000fd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fda:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f242 7213 	movw	r2, #10003	; 0x2713
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10b      	bne.n	8000ffe <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <InitModbusUSART+0x178>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <InitModbusUSART+0x178>)
 8000fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff0:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <InitModbusUSART+0x178>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <InitModbusUSART+0x178>)
 8000ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ffc:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <InitModbusUSART+0x178>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <InitModbusUSART+0x178>)
 8001004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001008:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <InitModbusUSART+0x178>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <InitModbusUSART+0x178>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <InitModbusUSART+0x178>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <InitModbusUSART+0x178>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	60d3      	str	r3, [r2, #12]

		USART->CR3 |= USART_CR3_DMAT;										// Разрешаем запросы к DMA от модуля USART
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <InitModbusUSART+0x178>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <InitModbusUSART+0x178>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6153      	str	r3, [r2, #20]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <InitModbusUSART+0x178>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <InitModbusUSART+0x178>)
 8001034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001038:	60d3      	str	r3, [r2, #12]

	}

}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40011400 	.word	0x40011400

08001050 <InitDMAforUSART>:

void InitDMAforUSART (void){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <InitDMAforUSART+0x90>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <InitDMAforUSART+0x90>)
 800105a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105e:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream7->CR |= DMA_SxCR_CHSEL_0 |
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <InitDMAforUSART+0x94>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <InitDMAforUSART+0x94>)
 8001066:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800106a:	6013      	str	r3, [r2, #0]
						DMA_SxCR_CHSEL_2;

	DMA2_Stream7->PAR = (uint32_t) & USART->DR;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <InitDMAforUSART+0x94>)
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <InitDMAforUSART+0x98>)
 8001070:	609a      	str	r2, [r3, #8]
	DMA2_Stream7->M0AR = (uint32_t) & ModbusSendData[0];
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <InitDMAforUSART+0x94>)
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <InitDMAforUSART+0x9c>)
 8001076:	60da      	str	r2, [r3, #12]

	DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <InitDMAforUSART+0x94>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <InitDMAforUSART+0x94>)
 800107e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001082:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <InitDMAforUSART+0x94>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <InitDMAforUSART+0x94>)
 800108a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800108e:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <InitDMAforUSART+0x94>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <InitDMAforUSART+0x94>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PINC;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <InitDMAforUSART+0x94>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <InitDMAforUSART+0x94>)
 80010a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_PL;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <InitDMAforUSART+0x94>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <InitDMAforUSART+0x94>)
 80010ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80010b2:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <InitDMAforUSART+0x94>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <InitDMAforUSART+0x94>)
 80010ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010be:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_CIRC;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <InitDMAforUSART+0x94>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <InitDMAforUSART+0x94>)
 80010c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <InitDMAforUSART+0x94>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <InitDMAforUSART+0x94>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800
 80010e4:	400264b8 	.word	0x400264b8
 80010e8:	40011404 	.word	0x40011404
 80010ec:	200000bc 	.word	0x200000bc

080010f0 <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fee5 	bl	8000ed4 <InitModbusUSART>
	InitDMAforUSART();
 800110a:	f7ff ffa1 	bl	8001050 <InitDMAforUSART>
	state = _state = 0;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <InitModbusFSM+0x54>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <InitModbusFSM+0x54>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <InitModbusFSM+0x58>)
 800111a:	701a      	strb	r2, [r3, #0]
	entry = 0;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <InitModbusFSM+0x5c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <InitModbusFSM+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <InitModbusFSM+0x60>)
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <InitModbusFSM+0x64>)
 800112e:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <InitModbusFSM+0x68>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <InitModbusFSM+0x6c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000b2 	.word	0x200000b2
 8001148:	200000b6 	.word	0x200000b6
 800114c:	200000b0 	.word	0x200000b0
 8001150:	200000b1 	.word	0x200000b1
 8001154:	200000b7 	.word	0x200000b7
 8001158:	200002c1 	.word	0x200002c1
 800115c:	200002c0 	.word	0x200002c0

08001160 <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d003      	beq.n	800117a <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e002      	b.n	8001180 <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 800117a:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

	_state = state;
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>)
 8001186:	701a      	strb	r2, [r3, #0]

	switch (state){
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b04      	cmp	r3, #4
 800118e:	f200 8099 	bhi.w	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080011cf 	.word	0x080011cf
 80011a0:	080011f1 	.word	0x080011f1
 80011a4:	0800122f 	.word	0x0800122f
 80011a8:	080012b1 	.word	0x080012b1

	case 0:

		if (entry == 1){
 80011ac:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d102      	bne.n	80011ba <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		}

		if(GetMessage(ModbusReciveSymbol)){
 80011ba:	2016      	movs	r0, #22
 80011bc:	f7ff fe70 	bl	8000ea0 <GetMessage>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07b      	beq.n	80012be <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>
			state = 1;
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
		}

		break;
 80011cc:	e077      	b.n	80012be <ProcessSlaveModbusMessageReceptionRTUFSM+0x15e>

	case 1:

		if (entry == 1){
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <ProcessSlaveModbusMessageReceptionRTUFSM+0x7c>
			ReceptionStatus = ReceptionEnabled;
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 80011d8:	2264      	movs	r2, #100	; 0x64
 80011da:	801a      	strh	r2, [r3, #0]
		if(CurrentItemOfBuf >= ModbusBufSize){

			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 80011dc:	2017      	movs	r0, #23
 80011de:	f7ff fe5f 	bl	8000ea0 <GetMessage>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d06c      	beq.n	80012c2 <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>
			state = 2;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	701a      	strb	r2, [r3, #0]
		}

		break;
 80011ee:	e068      	b.n	80012c2 <ProcessSlaveModbusMessageReceptionRTUFSM+0x162>

	case 2:

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b12      	cmp	r3, #18
 80011f6:	d003      	beq.n	8001200 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa0>
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa8>
			state = 3;
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 8001202:	2203      	movs	r2, #3
 8001204:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 8001206:	e05d      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 800120e:	2300      	movs	r3, #0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e006      	b.n	8001222 <ProcessSlaveModbusMessageReceptionRTUFSM+0xc2>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8001218:	2100      	movs	r1, #0
 800121a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	3301      	adds	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f3      	bcc.n	8001214 <ProcessSlaveModbusMessageReceptionRTUFSM+0xb4>
		break;
 800122c:	e04a      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 3:

		CRCVal = 0;
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8001230:	2200      	movs	r2, #0
 8001232:	801a      	strh	r2, [r3, #0]
		CRCRecVal = 0;
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf - 2);					// Вычисляем CRC16
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	3b02      	subs	r3, #2
 8001242:	b29b      	uxth	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	4826      	ldr	r0, [pc, #152]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8001248:	f7ff f874 	bl	8000334 <CRC16>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8001252:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b02      	subs	r3, #2
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 800127e:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d10a      	bne.n	80012a2 <ProcessSlaveModbusMessageReceptionRTUFSM+0x142>
			SendMessage(ModbusMessageReceived);								// Сообщение Modbus получено
 800128c:	201b      	movs	r0, #27
 800128e:	f7ff fdcd 	bl	8000e2c <SendMessage>
			_CurrentItemOfBuf = CurrentItemOfBuf;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8001298:	701a      	strb	r2, [r3, #0]
			state = 0;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		else {
			SendMessage(ModbusCRCNotOk);
			state = 4;
		}

		break;
 80012a0:	e010      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
			SendMessage(ModbusCRCNotOk);
 80012a2:	201a      	movs	r0, #26
 80012a4:	f7ff fdc2 	bl	8000e2c <SendMessage>
			state = 4;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	701a      	strb	r2, [r3, #0]
		break;
 80012ae:	e009      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

	case 4:

		SendMessage(ModbusError);
 80012b0:	2015      	movs	r0, #21
 80012b2:	f7ff fdbb 	bl	8000e2c <SendMessage>
		state = 0;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

		break;
 80012bc:	e002      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 80012be:	bf00      	nop
 80012c0:	e000      	b.n	80012c4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		break;
 80012c2:	bf00      	nop

	}

}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000b6 	.word	0x200000b6
 80012d0:	200000b2 	.word	0x200000b2
 80012d4:	200000b0 	.word	0x200000b0
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	200002d2 	.word	0x200002d2
 80012e0:	200001c0 	.word	0x200001c0
 80012e4:	200000b4 	.word	0x200000b4
 80012e8:	200001bc 	.word	0x200001bc
 80012ec:	200000b8 	.word	0x200000b8

080012f0 <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	4b4c      	ldr	r3, [pc, #304]	; (800142c <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d003      	beq.n	800130a <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e002      	b.n	8001310 <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 800130a:	4b49      	ldr	r3, [pc, #292]	; (8001430 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8001316:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 8001318:	4b43      	ldr	r3, [pc, #268]	; (8001428 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d87e      	bhi.n	800141e <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <ProcessMessageGenerationSlaveModbusRTUFSM+0x38>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001339 	.word	0x08001339
 800132c:	08001373 	.word	0x08001373
 8001330:	08001381 	.word	0x08001381
 8001334:	080013eb 	.word	0x080013eb

	case 0:
		if (entryMessageGenSlave == 1){
 8001338:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10e      	bne.n	800135e <ProcessMessageGenerationSlaveModbusRTUFSM+0x6e>

			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8001340:	2300      	movs	r3, #0
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e006      	b.n	8001354 <ProcessMessageGenerationSlaveModbusRTUFSM+0x64>

				ModbusSendData[i] = 0;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 800134a:	2100      	movs	r1, #0
 800134c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	3301      	adds	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3f3      	bcc.n	8001346 <ProcessMessageGenerationSlaveModbusRTUFSM+0x56>

			}

		}

		if (GetMessage(ModbusMessageReceived)){
 800135e:	201b      	movs	r0, #27
 8001360:	f7ff fd9e 	bl	8000ea0 <GetMessage>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d054      	beq.n	8001414 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>
			stateMessageGenSlave = 1;
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
		}
			break;
 8001370:	e050      	b.n	8001414 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>

	case 1:

		if (ModbusData[1] == 0x05){
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <ProcessMessageGenerationSlaveModbusRTUFSM+0x14c>)
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d14e      	bne.n	8001418 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

			WriteSingleCoil();
 800137a:	f000 f8bf 	bl	80014fc <WriteSingleCoil>
		}

		break;
 800137e:	e04b      	b.n	8001418 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

	case 2:

		CRCRecVal = CRC16(ModbusSendData, _CurrentItemOfBuf - 2);
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b02      	subs	r3, #2
 8001388:	b29b      	uxth	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 800138e:	f7fe ffd1 	bl	8000334 <CRC16>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8001398:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-2] |= CRCRecVal;
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3b02      	subs	r3, #2
 80013a0:	4a24      	ldr	r2, [pc, #144]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80013a2:	5cd1      	ldrb	r1, [r2, r3]
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3b02      	subs	r3, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	b2d1      	uxtb	r1, r2
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80013b6:	54d1      	strb	r1, [r2, r3]

		CRCRecVal = CRCRecVal >> 8;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 80013c2:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-1] |= CRCRecVal;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80013cc:	5cd1      	ldrb	r1, [r2, r3]
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	430a      	orrs	r2, r1
 80013dc:	b2d1      	uxtb	r1, r2
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 80013e0:	54d1      	strb	r1, [r2, r3]

		stateMessageGenSlave = 3;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]

		break;
 80013e8:	e019      	b.n	800141e <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>

	case 3:


		if (entryMessageGenSlave == 1){
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d114      	bne.n	800141c <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>

			USART->SR &= ~USART_SR_TC;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 80013f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013fc:	6013      	str	r3, [r2, #0]

			DMA2_Stream7->NDTR = _CurrentItemOfBuf;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8001404:	605a      	str	r2, [r3, #4]

			DMA2_Stream7->CR |= DMA_SxCR_EN;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]

		}

		break;
 8001412:	e003      	b.n	800141c <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>
			break;
 8001414:	bf00      	nop
 8001416:	e002      	b.n	800141e <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8001418:	bf00      	nop
 800141a:	e000      	b.n	800141e <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 800141c:	bf00      	nop

	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000b7 	.word	0x200000b7
 800142c:	200000b1 	.word	0x200000b1
 8001430:	200002c1 	.word	0x200002c1
 8001434:	200000bc 	.word	0x200000bc
 8001438:	200000b8 	.word	0x200000b8
 800143c:	200001c0 	.word	0x200001c0
 8001440:	200001bc 	.word	0x200001bc
 8001444:	40011400 	.word	0x40011400
 8001448:	400264b8 	.word	0x400264b8

0800144c <ProcessModbusSlaveFSM>:


void ProcessModbusSlaveFSM (void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	ProcessSlaveModbusMessageReceptionRTUFSM();
 8001450:	f7ff fe86 	bl	8001160 <ProcessSlaveModbusMessageReceptionRTUFSM>
	ProcessMessageGenerationSlaveModbusRTUFSM();
 8001454:	f7ff ff4c 	bl	80012f0 <ProcessMessageGenerationSlaveModbusRTUFSM>

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <USART6_IRQHandler>:


/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/


void ModbusUSART_IRQHandler (void){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <USART6_IRQHandler+0x54>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b00      	cmp	r3, #0
 800146a:	d016      	beq.n	800149a <USART6_IRQHandler+0x3e>

		ReceptionStatus = ReceptionEnabled;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <USART6_IRQHandler+0x58>)
 800146e:	2264      	movs	r2, #100	; 0x64
 8001470:	801a      	strh	r2, [r3, #0]
		MRTUcount = 0;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <USART6_IRQHandler+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]

		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <USART6_IRQHandler+0x54>)
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <USART6_IRQHandler+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	b2c9      	uxtb	r1, r1
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <USART6_IRQHandler+0x64>)
 8001486:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <USART6_IRQHandler+0x60>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <USART6_IRQHandler+0x60>)
 8001492:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol);						// Активируем сообщение ModbusReciveSymbol
 8001494:	2016      	movs	r0, #22
 8001496:	f7ff fcc9 	bl	8000e2c <SendMessage>
	}

	if (USART->SR & USART_SR_ORE){
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <USART6_IRQHandler+0x54>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <USART6_IRQHandler+0x50>
		state = 4;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <USART6_IRQHandler+0x68>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	701a      	strb	r2, [r3, #0]
	}

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40011400 	.word	0x40011400
 80014b4:	200002d2 	.word	0x200002d2
 80014b8:	200002c4 	.word	0x200002c4
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	200001c0 	.word	0x200001c0
 80014c4:	200000b6 	.word	0x200000b6

080014c8 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler (void){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

	if (DMA2->HISR & DMA_HISR_TCIF7){
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <DMA2_Stream7_IRQHandler+0x2c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <DMA2_Stream7_IRQHandler+0x22>

		stateMessageGenSlave = 0;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <DMA2_Stream7_IRQHandler+0x30>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]

		DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <DMA2_Stream7_IRQHandler+0x2c>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <DMA2_Stream7_IRQHandler+0x2c>)
 80014e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014e8:	60d3      	str	r3, [r2, #12]

	}

}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40026400 	.word	0x40026400
 80014f8:	200000b7 	.word	0x200000b7

080014fc <WriteSingleCoil>:

/*************************	 Modbus Function (Modbus функции)	*************************/


/* Запись состояния одного выхода (Код функции 0x05) */
void WriteSingleCoil (void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

	if (ModbusData[3] == 0x50){
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <WriteSingleCoil+0xbc>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	2b50      	cmp	r3, #80	; 0x50
 8001508:	d152      	bne.n	80015b0 <WriteSingleCoil+0xb4>

		if (ModbusData[4] == 0xff && ModbusData[5] == 0x00){
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <WriteSingleCoil+0xbc>)
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d126      	bne.n	8001560 <WriteSingleCoil+0x64>
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <WriteSingleCoil+0xbc>)
 8001514:	795b      	ldrb	r3, [r3, #5]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d122      	bne.n	8001560 <WriteSingleCoil+0x64>

			GPIOC->BSRR |= GPIO_BSRR_BS14;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <WriteSingleCoil+0xc0>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a27      	ldr	r2, [pc, #156]	; (80015bc <WriteSingleCoil+0xc0>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6193      	str	r3, [r2, #24]
			WriteDataToLCD(1, 1, "Hello");
 8001526:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <WriteSingleCoil+0xc4>)
 8001528:	2101      	movs	r1, #1
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff f9f2 	bl	8000914 <WriteDataToLCD>
			SendMessage(I2C1StartTransaction);
 8001530:	200e      	movs	r0, #14
 8001532:	f7ff fc7b 	bl	8000e2c <SendMessage>

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e008      	b.n	800154e <WriteSingleCoil+0x52>
				ModbusSendData[i] = ModbusData[i];
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	491d      	ldr	r1, [pc, #116]	; (80015b8 <WriteSingleCoil+0xbc>)
 8001542:	5c89      	ldrb	r1, [r1, r2]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <WriteSingleCoil+0xc8>)
 8001546:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3301      	adds	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <WriteSingleCoil+0xcc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3b02      	subs	r3, #2
 8001556:	429a      	cmp	r2, r3
 8001558:	dbf0      	blt.n	800153c <WriteSingleCoil+0x40>
			}
				stateMessageGenSlave = 2;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <WriteSingleCoil+0xd0>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
			}

			if (ModbusData[4] == 0x00 && ModbusData[5] == 0xff){
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <WriteSingleCoil+0xbc>)
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d123      	bne.n	80015b0 <WriteSingleCoil+0xb4>
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <WriteSingleCoil+0xbc>)
 800156a:	795b      	ldrb	r3, [r3, #5]
 800156c:	2bff      	cmp	r3, #255	; 0xff
 800156e:	d11f      	bne.n	80015b0 <WriteSingleCoil+0xb4>

			GPIOC->BSRR |= GPIO_BSRR_BR14;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <WriteSingleCoil+0xc0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <WriteSingleCoil+0xc0>)
 8001576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800157a:	6193      	str	r3, [r2, #24]
			ClearGram();
 800157c:	f7ff fb60 	bl	8000c40 <ClearGram>
			SendMessage(I2C1StartTransaction);
 8001580:	200e      	movs	r0, #14
 8001582:	f7ff fc53 	bl	8000e2c <SendMessage>

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001586:	2300      	movs	r3, #0
 8001588:	71bb      	strb	r3, [r7, #6]
 800158a:	e008      	b.n	800159e <WriteSingleCoil+0xa2>
				ModbusSendData[i] = ModbusData[i];
 800158c:	79ba      	ldrb	r2, [r7, #6]
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	4909      	ldr	r1, [pc, #36]	; (80015b8 <WriteSingleCoil+0xbc>)
 8001592:	5c89      	ldrb	r1, [r1, r2]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <WriteSingleCoil+0xc8>)
 8001596:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	3301      	adds	r3, #1
 800159c:	71bb      	strb	r3, [r7, #6]
 800159e:	79ba      	ldrb	r2, [r7, #6]
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <WriteSingleCoil+0xcc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3b02      	subs	r3, #2
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf0      	blt.n	800158c <WriteSingleCoil+0x90>
			}
				stateMessageGenSlave = 2;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <WriteSingleCoil+0xd0>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]
			}

	}

}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001c0 	.word	0x200001c0
 80015bc:	40020800 	.word	0x40020800
 80015c0:	08001bf0 	.word	0x08001bf0
 80015c4:	200000bc 	.word	0x200000bc
 80015c8:	200000b8 	.word	0x200000b8
 80015cc:	200000b7 	.word	0x200000b7

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <__NVIC_EnableIRQ+0x34>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <InitRCC+0x140>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <InitRCC+0x140>)
 80016ca:	f023 030f 	bic.w	r3, r3, #15
 80016ce:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <InitRCC+0x140>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <InitRCC+0x140>)
 80016d6:	f043 0303 	orr.w	r3, r3, #3
 80016da:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 80016dc:	4b49      	ldr	r3, [pc, #292]	; (8001804 <InitRCC+0x144>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <InitRCC+0x144>)
 80016e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e6:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <InitRCC+0x148>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a46      	ldr	r2, [pc, #280]	; (8001808 <InitRCC+0x148>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 80016f4:	bf00      	nop
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <InitRCC+0x148>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <InitRCC+0x148>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a40      	ldr	r2, [pc, #256]	; (8001808 <InitRCC+0x148>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800170c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <InitRCC+0x148>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <InitRCC+0x148>)
 8001714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001718:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <InitRCC+0x148>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <InitRCC+0x148>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <InitRCC+0x148>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a37      	ldr	r2, [pc, #220]	; (8001808 <InitRCC+0x148>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <InitRCC+0x148>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a34      	ldr	r2, [pc, #208]	; (8001808 <InitRCC+0x148>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <InitRCC+0x148>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <InitRCC+0x148>)
 8001744:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800174c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <InitRCC+0x148>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <InitRCC+0x148>)
 8001754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001758:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <InitRCC+0x148>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <InitRCC+0x148>)
 8001760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001764:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <InitRCC+0x148>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a27      	ldr	r2, [pc, #156]	; (8001808 <InitRCC+0x148>)
 800176c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001770:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <InitRCC+0x148>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a24      	ldr	r2, [pc, #144]	; (8001808 <InitRCC+0x148>)
 8001778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177c:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 800177e:	bf00      	nop
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <InitRCC+0x148>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f9      	beq.n	8001780 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <InitRCC+0x148>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <InitRCC+0x148>)
 8001792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001796:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <InitRCC+0x148>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <InitRCC+0x148>)
 800179e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <InitRCC+0x148>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <InitRCC+0x148>)
 80017aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ae:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <InitRCC+0x148>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <InitRCC+0x148>)
 80017b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <InitRCC+0x148>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <InitRCC+0x148>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <InitRCC+0x148>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <InitRCC+0x148>)
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <InitRCC+0x148>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <InitRCC+0x148>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 80017dc:	bf00      	nop
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <InitRCC+0x148>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d1f9      	bne.n	80017de <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <InitRCC+0x148>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <InitRCC+0x148>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 80017f6:	f7fe fd1d 	bl	8000234 <SystemCoreClockUpdate>

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40007000 	.word	0x40007000
 8001808:	40023800 	.word	0x40023800

0800180c <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

//	__NVIC_SetPriorityGrouping(3);											// 16 групп прерываний и 16 подгрупп
	__NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(1, 0, 2));			// Устанавливаем Modbus прерывание в первую группу, первым приоритетом
 8001810:	2202      	movs	r2, #2
 8001812:	2100      	movs	r1, #0
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ff21 	bl	800165c <NVIC_EncodePriority>
 800181a:	4603      	mov	r3, r0
 800181c:	4619      	mov	r1, r3
 800181e:	2047      	movs	r0, #71	; 0x47
 8001820:	f7ff fef2 	bl	8001608 <__NVIC_SetPriority>
	__NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(2, 1, 3));	// Прервания 10го таймера за прерыванием Modbus
 8001824:	2203      	movs	r2, #3
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff ff17 	bl	800165c <NVIC_EncodePriority>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	2019      	movs	r0, #25
 8001834:	f7ff fee8 	bl	8001608 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(1, 1, 3));
 8001838:	2203      	movs	r2, #3
 800183a:	2101      	movs	r1, #1
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff ff0d 	bl	800165c <NVIC_EncodePriority>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	2046      	movs	r0, #70	; 0x46
 8001848:	f7ff fede 	bl	8001608 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(3, 0, 2));
 800184c:	2202      	movs	r2, #2
 800184e:	2100      	movs	r1, #0
 8001850:	2003      	movs	r0, #3
 8001852:	f7ff ff03 	bl	800165c <NVIC_EncodePriority>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	200c      	movs	r0, #12
 800185c:	f7ff fed4 	bl	8001608 <__NVIC_SetPriority>
	__NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(3, 2, 3));
 8001860:	2203      	movs	r2, #3
 8001862:	2102      	movs	r1, #2
 8001864:	2003      	movs	r0, #3
 8001866:	f7ff fef9 	bl	800165c <NVIC_EncodePriority>
 800186a:	4603      	mov	r3, r0
 800186c:	4619      	mov	r1, r3
 800186e:	201f      	movs	r0, #31
 8001870:	f7ff feca 	bl	8001608 <__NVIC_SetPriority>

	__NVIC_EnableIRQ(USART6_IRQn);											// Разрешаем прерывания от USART для Modbus
 8001874:	2047      	movs	r0, #71	; 0x47
 8001876:	f7ff feab 	bl	80015d0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);									// Разрешаем прерывания от 10-го таймера
 800187a:	2019      	movs	r0, #25
 800187c:	f7ff fea8 	bl	80015d0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA2_Stream7_IRQn);									// Разрешаем прерывания от DMA обслуживающего USART Modbus
 8001880:	2046      	movs	r0, #70	; 0x46
 8001882:	f7ff fea5 	bl	80015d0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(I2C1_EV_IRQn);											// Разрешаем прерывания событий I2C1
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff fea2 	bl	80015d0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA1_Stream1_IRQn);									// Разрешаем прерывания от DMA1_Stream1, обслуживающего I2C1
 800188c:	200c      	movs	r0, #12
 800188e:	f7ff fe9f 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <InitGPIO>:

void InitGPIO (void){
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <InitGPIO+0x108>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <InitGPIO+0x108>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <InitGPIO+0x108>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <InitGPIO+0x108>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <InitGPIO+0x108>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <InitGPIO+0x108>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <InitGPIO+0x10c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a37      	ldr	r2, [pc, #220]	; (80019a4 <InitGPIO+0x10c>)
 80018c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ca:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <InitGPIO+0x10c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a34      	ldr	r2, [pc, #208]	; (80019a4 <InitGPIO+0x10c>)
 80018d2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018d6:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <InitGPIO+0x10c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <InitGPIO+0x10c>)
 80018de:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80018e2:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <InitGPIO+0x10c>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <InitGPIO+0x10c>)
 80018ea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018ee:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <InitGPIO+0x10c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2b      	ldr	r2, [pc, #172]	; (80019a4 <InitGPIO+0x10c>)
 80018f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018fa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <InitGPIO+0x10c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <InitGPIO+0x10c>)
 8001902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001906:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <InitGPIO+0x10c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <InitGPIO+0x10c>)
 800190e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001912:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <InitGPIO+0x10c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <InitGPIO+0x10c>)
 800191a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800191e:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <InitGPIO+0x10c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <InitGPIO+0x10c>)
 8001926:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800192a:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <InitGPIO+0x10c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <InitGPIO+0x10c>)
 8001932:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001936:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <InitGPIO+0x10c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <InitGPIO+0x10c>)
 800193e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001942:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <InitGPIO+0x10c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <InitGPIO+0x10c>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT15;						// Настройка порта PC15 на выход push-pull
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <InitGPIO+0x10c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <InitGPIO+0x10c>)
 8001956:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800195a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <InitGPIO+0x10c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <InitGPIO+0x10c>)
 8001962:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001966:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;				// Настройка на высокую выходную скорость
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <InitGPIO+0x10c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <InitGPIO+0x10c>)
 800196e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001972:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD15;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <InitGPIO+0x10c>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <InitGPIO+0x10c>)
 800197a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800197e:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE15;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <InitGPIO+0x10c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <InitGPIO+0x10c>)
 8001986:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800198a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE15_0;					// Настройка порта PC15 на выход
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <InitGPIO+0x10c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <InitGPIO+0x10c>)
 8001992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800

080019a8 <InitTIM10>:

/*************************	 Code	*************************/

/*************************	 Функции аппаратной инициализации таймера	*************************/

void InitTIM10 (void){
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <InitTIM10+0x58>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <InitTIM10+0x58>)
 80019b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b6:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->PSC = 96 - 1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <InitTIM10+0x5c>)
 80019ba:	225f      	movs	r2, #95	; 0x5f
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->ARR = 500;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <InitTIM10+0x5c>)
 80019c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM10->DIER |= TIM_DIER_UIE;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <InitTIM10+0x5c>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <InitTIM10+0x5c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	60d3      	str	r3, [r2, #12]

	MRTUcount = 0;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <InitTIM10+0x60>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]
	ReceptionStatus = ReceptionStopped;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <InitTIM10+0x64>)
 80019da:	2232      	movs	r2, #50	; 0x32
 80019dc:	801a      	strh	r2, [r3, #0]

	TIM10->CR1 |= TIM_CR1_CEN;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <InitTIM10+0x5c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <InitTIM10+0x5c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6013      	str	r3, [r2, #0]

	TIM10->EGR |= TIM_EGR_UG;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <InitTIM10+0x5c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <InitTIM10+0x5c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6153      	str	r3, [r2, #20]

}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40014400 	.word	0x40014400
 8001a08:	200002c4 	.word	0x200002c4
 8001a0c:	200002d2 	.word	0x200002d2

08001a10 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e00f      	b.n	8001a3c <TIM1_UP_TIM10_IRQHandler+0x2c>

				if (GTimerState[i] == TimerRunning){
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <TIM1_UP_TIM10_IRQHandler+0x26>

					GTimerVal[i]++;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a2e:	3201      	adds	r2, #1
 8001a30:	4914      	ldr	r1, [pc, #80]	; (8001a84 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t i = 0; i <= MaxGTimers; i++){
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d9ec      	bls.n	8001a1c <TIM1_UP_TIM10_IRQHandler+0xc>
				}
			}

	if (ReceptionStatus == ReceptionEnabled){
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d10f      	bne.n	8001a6a <TIM1_UP_TIM10_IRQHandler+0x5a>

		MRTUcount++;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001a54:	801a      	strh	r2, [r3, #0]

		if (MRTUcount >= 5){
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d905      	bls.n	8001a6a <TIM1_UP_TIM10_IRQHandler+0x5a>
			SendMessage(ModbusRTUTimeOut);
 8001a5e:	2017      	movs	r0, #23
 8001a60:	f7ff f9e4 	bl	8000e2c <SendMessage>
			ReceptionStatus = ReceptionStopped;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001a66:	2232      	movs	r2, #50	; 0x32
 8001a68:	801a      	strh	r2, [r3, #0]
		}

	}

	TIM10->SR &= ~TIM_SR_UIF;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6113      	str	r3, [r2, #16]

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002d0 	.word	0x200002d0
 8001a84:	200002c8 	.word	0x200002c8
 8001a88:	200002d2 	.word	0x200002d2
 8001a8c:	200002c4 	.word	0x200002c4
 8001a90:	40014400 	.word	0x40014400

08001a94 <InitGTimer>:

/*************************	 Функции глобальных таймеров	*************************/

void InitGTimer(void){
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	e006      	b.n	8001aae <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <InitGTimer+0x2c>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d9f5      	bls.n	8001aa0 <InitGTimer+0xc>
	}

}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	200002d0 	.word	0x200002d0

08001ac4 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <StartGTimer+0x30>)
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <StartGTimer+0x34>)
 8001adc:	2100      	movs	r1, #0
 8001ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <StartGTimer+0x30>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	54d1      	strb	r1, [r2, r3]
	}

}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	200002d0 	.word	0x200002d0
 8001af8:	200002c8 	.word	0x200002c8

08001afc <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <StopGTimer+0x1c>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	54d1      	strb	r1, [r2, r3]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	200002d0 	.word	0x200002d0

08001b1c <GetGTimerVal>:
		GTimerState[GTimerID] = TimerRunning;
	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <GetGTimerVal+0x1c>)
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	200002c8 	.word	0x200002c8

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b42:	e003      	b.n	8001b4c <LoopCopyDataInit>

08001b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b4a:	3104      	adds	r1, #4

08001b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b54:	d3f6      	bcc.n	8001b44 <CopyDataInit>
  ldr  r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b58:	e002      	b.n	8001b60 <LoopFillZerobss>

08001b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b5c:	f842 3b04 	str.w	r3, [r2], #4

08001b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b64:	d3f9      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b66:	f7fe fb37 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f000 f811 	bl	8001b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff f905 	bl	8000d7c <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b78:	08001e10 	.word	0x08001e10
  ldr  r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b80:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001b84:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001b88:	200002d4 	.word	0x200002d4

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <__libc_init_array>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	4d0d      	ldr	r5, [pc, #52]	; (8001bc8 <__libc_init_array+0x38>)
 8001b94:	4c0d      	ldr	r4, [pc, #52]	; (8001bcc <__libc_init_array+0x3c>)
 8001b96:	1b64      	subs	r4, r4, r5
 8001b98:	10a4      	asrs	r4, r4, #2
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	42a6      	cmp	r6, r4
 8001b9e:	d109      	bne.n	8001bb4 <__libc_init_array+0x24>
 8001ba0:	4d0b      	ldr	r5, [pc, #44]	; (8001bd0 <__libc_init_array+0x40>)
 8001ba2:	4c0c      	ldr	r4, [pc, #48]	; (8001bd4 <__libc_init_array+0x44>)
 8001ba4:	f000 f818 	bl	8001bd8 <_init>
 8001ba8:	1b64      	subs	r4, r4, r5
 8001baa:	10a4      	asrs	r4, r4, #2
 8001bac:	2600      	movs	r6, #0
 8001bae:	42a6      	cmp	r6, r4
 8001bb0:	d105      	bne.n	8001bbe <__libc_init_array+0x2e>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb8:	4798      	blx	r3
 8001bba:	3601      	adds	r6, #1
 8001bbc:	e7ee      	b.n	8001b9c <__libc_init_array+0xc>
 8001bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc2:	4798      	blx	r3
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	e7f2      	b.n	8001bae <__libc_init_array+0x1e>
 8001bc8:	08001e08 	.word	0x08001e08
 8001bcc:	08001e08 	.word	0x08001e08
 8001bd0:	08001e08 	.word	0x08001e08
 8001bd4:	08001e0c 	.word	0x08001e0c

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
