
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019d8  080019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080019e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000350  20000004  080019e4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000354  080019e4  00020354  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002b4e  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000bc6  00000000  00000000  00022b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000238  00000000  00000000  00023748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001a0  00000000  00000000  00023980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e61b  00000000  00000000  00023b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00003523  00000000  00000000  0003213b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050532  00000000  00000000  0003565e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00085b90  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000620  00000000  00000000  00085be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080017b0 	.word	0x080017b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080017b0 	.word	0x080017b0

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	080017c8 	.word	0x080017c8

08000334 <CRC16>:

/*************************	 Code	*************************/



unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen ){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

unsigned char uchCRCHi = 0xFF ; 			/* high byte of CRC initialized */
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	73fb      	strb	r3, [r7, #15]
unsigned char uchCRCLo = 0xFF ; 			/* low byte of CRC initialized */
 8000344:	23ff      	movs	r3, #255	; 0xff
 8000346:	73bb      	strb	r3, [r7, #14]
unsigned uIndex ; 							/* will index into CRC lookup table */
while (usDataLen--){ 						/* pass through message buffer */
 8000348:	e013      	b.n	8000372 <CRC16+0x3e>
uIndex = uchCRCLo ^ *puchMsg++; 			/* calculate the CRC */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	7bbb      	ldrb	r3, [r7, #14]
 8000354:	4053      	eors	r3, r2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	60bb      	str	r3, [r7, #8]
uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <CRC16+0x64>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	4413      	add	r3, r2
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	4053      	eors	r3, r2
 8000366:	73bb      	strb	r3, [r7, #14]
uchCRCHi = auchCRCLo[uIndex];
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <CRC16+0x68>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
while (usDataLen--){ 						/* pass through message buffer */
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	807a      	strh	r2, [r7, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1e6      	bne.n	800034a <CRC16+0x16>
}
return (uchCRCHi << 8 | uchCRCLo);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	b21a      	sxth	r2, r3
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	b21b      	sxth	r3, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	b21b      	sxth	r3, r3
 800038a:	b29b      	uxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	080017d8 	.word	0x080017d8
 800039c:	080018d8 	.word	0x080018d8

080003a0 <InitI2C1>:
uint8_t I2C1NumberOfTransaction;						//	количество текущих передач по I2C (по совместимости адрес первого элемента буфера)
uint8_t I2C1SendBuferLenght;							//	длина перевадаемого буфера

/*************************	 Code	*************************/

void InitI2C1 (void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

/* I2C1 GPIO Configuration */

	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 80003a4:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <InitI2C1+0x180>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a5d      	ldr	r2, [pc, #372]	; (8000520 <InitI2C1+0x180>)
 80003aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1;				// Configuring the I / O Direction Mode for the Alternate Function
 80003b0:	4b5b      	ldr	r3, [pc, #364]	; (8000520 <InitI2C1+0x180>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a5a      	ldr	r2, [pc, #360]	; (8000520 <InitI2C1+0x180>)
 80003b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT6;					// Configuring the output type of the open-drain
 80003bc:	4b58      	ldr	r3, [pc, #352]	; (8000520 <InitI2C1+0x180>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a57      	ldr	r2, [pc, #348]	; (8000520 <InitI2C1+0x180>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED6;
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <InitI2C1+0x180>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a54      	ldr	r2, [pc, #336]	; (8000520 <InitI2C1+0x180>)
 80003ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003d2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED6_0;			// Configuring the output speed is low
 80003d4:	4b52      	ldr	r3, [pc, #328]	; (8000520 <InitI2C1+0x180>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a51      	ldr	r2, [pc, #324]	; (8000520 <InitI2C1+0x180>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003de:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD6;
 80003e0:	4b4f      	ldr	r3, [pc, #316]	; (8000520 <InitI2C1+0x180>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a4e      	ldr	r2, [pc, #312]	; (8000520 <InitI2C1+0x180>)
 80003e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003ea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD6_0;					// Configuring the I / O pull-up
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <InitI2C1+0x180>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a4b      	ldr	r2, [pc, #300]	; (8000520 <InitI2C1+0x180>)
 80003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f6:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL6;					// Enable AF4 (I2C1...3) on port PB6
 80003f8:	4b49      	ldr	r3, [pc, #292]	; (8000520 <InitI2C1+0x180>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a48      	ldr	r2, [pc, #288]	; (8000520 <InitI2C1+0x180>)
 80003fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000402:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL6_2;
 8000404:	4b46      	ldr	r3, [pc, #280]	; (8000520 <InitI2C1+0x180>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a45      	ldr	r2, [pc, #276]	; (8000520 <InitI2C1+0x180>)
 800040a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800040e:	6213      	str	r3, [r2, #32]

	GPIOB->MODER &= ~GPIO_MODER_MODER7;
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <InitI2C1+0x180>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a42      	ldr	r2, [pc, #264]	; (8000520 <InitI2C1+0x180>)
 8000416:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER7_1;				// Configuring the I / O Direction Mode for the Alternate Function
 800041c:	4b40      	ldr	r3, [pc, #256]	; (8000520 <InitI2C1+0x180>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a3f      	ldr	r2, [pc, #252]	; (8000520 <InitI2C1+0x180>)
 8000422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000426:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT7;					// Configuring the output type of the open-drain
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <InitI2C1+0x180>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <InitI2C1+0x180>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED7;
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <InitI2C1+0x180>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <InitI2C1+0x180>)
 800043a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800043e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED7_0;			// Configuring the output speed is low
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <InitI2C1+0x180>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a36      	ldr	r2, [pc, #216]	; (8000520 <InitI2C1+0x180>)
 8000446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800044a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD7;
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <InitI2C1+0x180>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <InitI2C1+0x180>)
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD7_0;					// Configuring the I / O pull-up
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <InitI2C1+0x180>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <InitI2C1+0x180>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL7;					// Enable AF4 (I2C1...3) on port PB6
 8000464:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <InitI2C1+0x180>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <InitI2C1+0x180>)
 800046a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800046e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL7_2;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <InitI2C1+0x180>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <InitI2C1+0x180>)
 8000476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800047a:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;					// Enable I2C1 clocking
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <InitI2C1+0x184>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <InitI2C1+0x184>)
 8000482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->OAR2 &= ~I2C_OAR2_ENDUAL;						// Disable Dual addressing mode
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <InitI2C1+0x188>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <InitI2C1+0x188>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 &= ~I2C_CR1_ENGC;							// Disable General call
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <InitI2C1+0x188>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a23      	ldr	r2, [pc, #140]	; (8000528 <InitI2C1+0x188>)
 800049a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;					// Enable clock stretching
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <InitI2C1+0x188>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <InitI2C1+0x188>)
 80004a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004aa:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_SMBUS;						// Enable I2C mode
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <InitI2C1+0x188>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <InitI2C1+0x188>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6013      	str	r3, [r2, #0]

	I2C1->CR2 &= ~I2C_CR2_FREQ;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <InitI2C1+0x188>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <InitI2C1+0x188>)
 80004be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004c2:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= 48;									// Set 48 MHz frequency
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <InitI2C1+0x188>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <InitI2C1+0x188>)
 80004ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004ce:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~I2C_CCR_FS;							// Sm mode I2C
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <InitI2C1+0x188>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <InitI2C1+0x188>)
 80004d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004da:	61d3      	str	r3, [r2, #28]

	I2C1->CCR &= ~I2C_CCR_CCR;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <InitI2C1+0x188>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <InitI2C1+0x188>)
 80004e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80004e6:	f023 030f 	bic.w	r3, r3, #15
 80004ea:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 240;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <InitI2C1+0x188>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <InitI2C1+0x188>)
 80004f2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80004f6:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE = 3;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <InitI2C1+0x188>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	621a      	str	r2, [r3, #32]

	I2C1->CR2 |= I2C_CR2_ITEVTEN;						// Разрешаем прерывания по событиям отравки и др. (Event interrupt enable)
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <InitI2C1+0x188>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <InitI2C1+0x188>)
 8000504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000508:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= I2C_CR1_PE;							// I2C1 Enable
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <InitI2C1+0x188>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <InitI2C1+0x188>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]

}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400
 8000524:	40023800 	.word	0x40023800
 8000528:	40005400 	.word	0x40005400

0800052c <InitI2C1FSM>:

void InitI2C1FSM (void){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	InitI2C1();
 8000530:	f7ff ff36 	bl	80003a0 <InitI2C1>

	i2cSendStates = 0;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <InitI2C1FSM+0x24>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	_i2cSendStates = 0;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <InitI2C1FSM+0x28>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	I2C1NumberOfTransaction = 0;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <InitI2C1FSM+0x2c>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]

	ClearI2C1DataBufer();
 8000546:	f000 f8bb 	bl	80006c0 <ClearI2C1DataBufer>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000006a 	.word	0x2000006a
 8000554:	20000022 	.word	0x20000022
 8000558:	20000021 	.word	0x20000021

0800055c <ProcessI2CWriteFSM>:

void ProcessI2CWriteFSM (void){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

	if ( i2cSendStates != _i2cSendStates) i2cEntry = 1; else i2cEntry = 0;
 8000560:	4b30      	ldr	r3, [pc, #192]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4b30      	ldr	r3, [pc, #192]	; (8000628 <ProcessI2CWriteFSM+0xcc>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	429a      	cmp	r2, r3
 800056a:	d003      	beq.n	8000574 <ProcessI2CWriteFSM+0x18>
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <ProcessI2CWriteFSM+0xd0>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	e002      	b.n	800057a <ProcessI2CWriteFSM+0x1e>
 8000574:	4b2d      	ldr	r3, [pc, #180]	; (800062c <ProcessI2CWriteFSM+0xd0>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]

	_i2cSendStates = i2cSendStates;
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <ProcessI2CWriteFSM+0xcc>)
 8000580:	701a      	strb	r2, [r3, #0]

	switch (i2cSendStates){
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d84a      	bhi.n	8000620 <ProcessI2CWriteFSM+0xc4>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <ProcessI2CWriteFSM+0x34>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005b5 	.word	0x080005b5
 8000598:	080005f1 	.word	0x080005f1
 800059c:	0800060d 	.word	0x0800060d

	case 0:

		if (GetMessage(I2C1StartTransaction)){
 80005a0:	200a      	movs	r0, #10
 80005a2:	f000 fa3d 	bl	8000a20 <GetMessage>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d036      	beq.n	800061a <ProcessI2CWriteFSM+0xbe>
			i2cSendStates = 1;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005b2:	e032      	b.n	800061a <ProcessI2CWriteFSM+0xbe>

	case 1:

		if (i2cEntry == 1){
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <ProcessI2CWriteFSM+0xd0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d105      	bne.n	80005c8 <ProcessI2CWriteFSM+0x6c>
			I2C1->CR1 |= I2C_CR1_START;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <ProcessI2CWriteFSM+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <ProcessI2CWriteFSM+0xd4>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
		}

		if (GetGTimerVal(I2C1Timer) >= 2000){
 80005c8:	2001      	movs	r0, #1
 80005ca:	f001 f893 	bl	80016f4 <GetGTimerVal>
 80005ce:	4603      	mov	r3, r0
 80005d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005d4:	d302      	bcc.n	80005dc <ProcessI2CWriteFSM+0x80>
			i2cSendStates = 3;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 80005d8:	2203      	movs	r2, #3
 80005da:	701a      	strb	r2, [r3, #0]
		}

		if (GetMessage(I2CAddrOk)){
 80005dc:	200b      	movs	r0, #11
 80005de:	f000 fa1f 	bl	8000a20 <GetMessage>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d01a      	beq.n	800061e <ProcessI2CWriteFSM+0xc2>
			i2cSendStates = 2;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005ee:	e016      	b.n	800061e <ProcessI2CWriteFSM+0xc2>

	case 2:

		if (I2C1NumberOfTransaction == I2C1SendBuferLenght){
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <ProcessI2CWriteFSM+0xd8>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <ProcessI2CWriteFSM+0xdc>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d103      	bne.n	8000604 <ProcessI2CWriteFSM+0xa8>
			i2cSendStates = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
		}
		else {
			i2cSendStates = 1;
		}
		break;
 8000602:	e00d      	b.n	8000620 <ProcessI2CWriteFSM+0xc4>
			i2cSendStates = 1;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ProcessI2CWriteFSM+0xc8>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e009      	b.n	8000620 <ProcessI2CWriteFSM+0xc4>

	case 3:

		GPIOC->BSRR |= GPIO_BSRR_BS15;
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <ProcessI2CWriteFSM+0xe0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <ProcessI2CWriteFSM+0xe0>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	6193      	str	r3, [r2, #24]
		break;
 8000618:	e002      	b.n	8000620 <ProcessI2CWriteFSM+0xc4>
		break;
 800061a:	bf00      	nop
 800061c:	e000      	b.n	8000620 <ProcessI2CWriteFSM+0xc4>
		break;
 800061e:	bf00      	nop
	}

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000006a 	.word	0x2000006a
 8000628:	20000022 	.word	0x20000022
 800062c:	20000020 	.word	0x20000020
 8000630:	40005400 	.word	0x40005400
 8000634:	20000021 	.word	0x20000021
 8000638:	2000006b 	.word	0x2000006b
 800063c:	40020800 	.word	0x40020800

08000640 <I2C1_EV_IRQHandler>:



/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/

void I2C1_EV_IRQHandler (void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

	if (I2C1->SR1 & I2C_SR1_SB){
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <I2C1_EV_IRQHandler+0x20>
		(void) I2C1->SR1;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 8000652:	695b      	ldr	r3, [r3, #20]
		StartGTimer(I2C1Timer);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 f821 	bl	800169c <StartGTimer>
		I2C1->DR = AddrDevice;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800065c:	224e      	movs	r2, #78	; 0x4e
 800065e:	611a      	str	r2, [r3, #16]
	}

	if (I2C1->SR1 & I2C_SR1_ADDR){
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00f      	beq.n	800068c <I2C1_EV_IRQHandler+0x4c>
		(void) I2C1->SR1;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800066e:	695b      	ldr	r3, [r3, #20]
		(void) I2C1->SR2;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
		SendMessage(I2CAddrOk, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	200b      	movs	r0, #11
 800067a:	f000 f92d 	bl	80008d8 <SendMessage>
		I2C1->DR = I2C1Data[I2C1NumberOfTransaction];
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <I2C1_EV_IRQHandler+0x78>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <I2C1_EV_IRQHandler+0x7c>)
 8000686:	5c9a      	ldrb	r2, [r3, r2]
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800068a:	611a      	str	r2, [r3, #16]
	}

	if (I2C1->SR1 & I2C_SR1_BTF){
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00b      	beq.n	80006b0 <I2C1_EV_IRQHandler+0x70>
		I2C1->CR1 |= I2C_CR1_STOP;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <I2C1_EV_IRQHandler+0x74>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a2:	6013      	str	r3, [r2, #0]
		I2C1NumberOfTransaction++;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <I2C1_EV_IRQHandler+0x78>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <I2C1_EV_IRQHandler+0x78>)
 80006ae:	701a      	strb	r2, [r3, #0]
	}

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40005400 	.word	0x40005400
 80006b8:	20000021 	.word	0x20000021
 80006bc:	20000024 	.word	0x20000024

080006c0 <ClearI2C1DataBufer>:

void ClearI2C1DataBufer (void){
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
	for (uint8_t Clear = 0; Clear < I2C1DataBuferLenght; Clear++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	e006      	b.n	80006da <ClearI2C1DataBufer+0x1a>
		I2C1Data[Clear] = 0x00;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <ClearI2C1DataBufer+0x2c>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t Clear = 0; Clear < I2C1DataBuferLenght; Clear++){
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	3301      	adds	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b45      	cmp	r3, #69	; 0x45
 80006de:	d9f5      	bls.n	80006cc <ClearI2C1DataBufer+0xc>
	}
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000024 	.word	0x20000024

080006f0 <InitLedFSM>:
uint8_t _statePis;				// Переменная предыдущего состояния автомата
uint8_t entryPis1;				// Флаг перехода в новое состояние

/*************************	 Code	*************************/

void InitLedFSM (void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

	statePis = _statePis = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <InitLedFSM+0x20>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <InitLedFSM+0x20>)
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <InitLedFSM+0x24>)
 8000700:	701a      	strb	r2, [r3, #0]
	entryPis1 = 0;
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <InitLedFSM+0x28>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]

}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	2000006e 	.word	0x2000006e
 8000714:	2000006c 	.word	0x2000006c
 8000718:	2000006d 	.word	0x2000006d

0800071c <ProcessLedFSM>:

void ProcessLedFSM (void){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

	if (statePis != _statePis) entryPis1 = 1; else entryPis1 = 0;
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <ProcessLedFSM+0xcc>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b31      	ldr	r3, [pc, #196]	; (80007ec <ProcessLedFSM+0xd0>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d003      	beq.n	8000734 <ProcessLedFSM+0x18>
 800072c:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <ProcessLedFSM+0xd4>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e002      	b.n	800073a <ProcessLedFSM+0x1e>
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <ProcessLedFSM+0xd4>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]

	_statePis = statePis;
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <ProcessLedFSM+0xcc>)
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <ProcessLedFSM+0xd0>)
 8000740:	701a      	strb	r2, [r3, #0]

	switch (statePis){
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ProcessLedFSM+0xcc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d02b      	beq.n	80007a2 <ProcessLedFSM+0x86>
 800074a:	2b02      	cmp	r3, #2
 800074c:	dc49      	bgt.n	80007e2 <ProcessLedFSM+0xc6>
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <ProcessLedFSM+0x3c>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d00a      	beq.n	800076c <ProcessLedFSM+0x50>
			StopGTimer(LEDTimer);
		}
		break;
	}

}
 8000756:	e044      	b.n	80007e2 <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f961 	bl	8000a20 <GetMessage>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d039      	beq.n	80007d8 <ProcessLedFSM+0xbc>
			statePis = 1;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ProcessLedFSM+0xcc>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
		break;
 800076a:	e035      	b.n	80007d8 <ProcessLedFSM+0xbc>
		if (entryPis1 == 1){
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <ProcessLedFSM+0xd4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d108      	bne.n	8000786 <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <ProcessLedFSM+0xd8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <ProcessLedFSM+0xd8>)
 800077a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077e:	6193      	str	r3, [r2, #24]
			StartGTimer(LEDTimer);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 ff8b 	bl	800169c <StartGTimer>
		if (GetGTimerVal(LEDTimer) >= 2000){
 8000786:	2003      	movs	r0, #3
 8000788:	f000 ffb4 	bl	80016f4 <GetGTimerVal>
 800078c:	4603      	mov	r3, r0
 800078e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000792:	d323      	bcc.n	80007dc <ProcessLedFSM+0xc0>
			statePis = 2;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <ProcessLedFSM+0xcc>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
			StopGTimer(LEDTimer);
 800079a:	2003      	movs	r0, #3
 800079c:	f000 ff9a 	bl	80016d4 <StopGTimer>
		break;
 80007a0:	e01c      	b.n	80007dc <ProcessLedFSM+0xc0>
		if (entryPis1 == 1){
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <ProcessLedFSM+0xd4>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d108      	bne.n	80007bc <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <ProcessLedFSM+0xd8>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <ProcessLedFSM+0xd8>)
 80007b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007b4:	6193      	str	r3, [r2, #24]
			StartGTimer(LEDTimer);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 ff70 	bl	800169c <StartGTimer>
		if (GetGTimerVal(LEDTimer) >= 2000){
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 ff99 	bl	80016f4 <GetGTimerVal>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007c8:	d30a      	bcc.n	80007e0 <ProcessLedFSM+0xc4>
			statePis = 1;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <ProcessLedFSM+0xcc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
			StopGTimer(LEDTimer);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 ff7f 	bl	80016d4 <StopGTimer>
		break;
 80007d6:	e003      	b.n	80007e0 <ProcessLedFSM+0xc4>
		break;
 80007d8:	bf00      	nop
 80007da:	e002      	b.n	80007e2 <ProcessLedFSM+0xc6>
		break;
 80007dc:	bf00      	nop
 80007de:	e000      	b.n	80007e2 <ProcessLedFSM+0xc6>
		break;
 80007e0:	bf00      	nop
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000006c 	.word	0x2000006c
 80007ec:	2000006e 	.word	0x2000006e
 80007f0:	2000006d 	.word	0x2000006d
 80007f4:	40020800 	.word	0x40020800

080007f8 <main>:



/*************************	 Code	*************************/

int main (void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	InitGPIO();
 80007fc:	f000 fe36 	bl	800146c <InitGPIO>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <main+0x78>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <main+0x78>)
 8000806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800080a:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BR15;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <main+0x78>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <main+0x78>)
 8000812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000816:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <main+0x78>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <main+0x78>)
 800081e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000822:	6193      	str	r3, [r2, #24]
	InitRCC();
 8000824:	f000 fd34 	bl	8001290 <InitRCC>
	UpdateNVICActiveAndPriority();
 8000828:	f000 fdd8 	bl	80013dc <UpdateNVICActiveAndPriority>
	InitGTimer();
 800082c:	f000 ff1e 	bl	800166c <InitGTimer>
	InitTIM10();
 8000830:	f000 fea4 	bl	800157c <InitTIM10>
	InitMessage();
 8000834:	f000 f81e 	bl	8000874 <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 8000838:	f242 7314 	movw	r3, #10004	; 0x2714
 800083c:	f242 7213 	movw	r2, #10003	; 0x2713
 8000840:	f242 7110 	movw	r1, #10000	; 0x2710
 8000844:	f242 7010 	movw	r0, #10000	; 0x2710
 8000848:	f000 fa1a 	bl	8000c80 <InitModbusFSM>
	InitLedFSM();
 800084c:	f7ff ff50 	bl	80006f0 <InitLedFSM>
	SendMessage(LedOnMsg, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2001      	movs	r0, #1
 8000856:	f000 f83f 	bl	80008d8 <SendMessage>

	InitI2C1FSM();
 800085a:	f7ff fe67 	bl	800052c <InitI2C1FSM>

	while(1){

		ProcessI2CWriteFSM();
 800085e:	f7ff fe7d 	bl	800055c <ProcessI2CWriteFSM>

		ProcessModbusSlaveFSM();
 8000862:	f000 fbc3 	bl	8000fec <ProcessModbusSlaveFSM>
		ProcessLedFSM();
 8000866:	f7ff ff59 	bl	800071c <ProcessLedFSM>
		ProcessMessage();
 800086a:	f000 f86d 	bl	8000948 <ProcessMessage>
		ProcessI2CWriteFSM();
 800086e:	e7f6      	b.n	800085e <main+0x66>
 8000870:	40020800 	.word	0x40020800

08000874 <InitMessage>:

MSG Messages [MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	e01f      	b.n	80008c0 <InitMessage+0x4c>
		Messages[i].Msg = '0';
 8000880:	4914      	ldr	r1, [pc, #80]	; (80008d4 <InitMessage+0x60>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	440b      	add	r3, r1
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	701a      	strb	r2, [r3, #0]
		Messages[i].ParamOne = 0;
 8000892:	4910      	ldr	r1, [pc, #64]	; (80008d4 <InitMessage+0x60>)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	440b      	add	r3, r1
 80008a0:	3302      	adds	r3, #2
 80008a2:	2200      	movs	r2, #0
 80008a4:	801a      	strh	r2, [r3, #0]
		Messages[i].ParamTwo = 0;
 80008a6:	490b      	ldr	r1, [pc, #44]	; (80008d4 <InitMessage+0x60>)
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	440b      	add	r3, r1
 80008b4:	3304      	adds	r3, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b1d      	cmp	r3, #29
 80008c4:	dddc      	ble.n	8000880 <InitMessage+0xc>
	}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000070 	.word	0x20000070

080008d8 <SendMessage>:

void SendMessage (uint16_t Message, uint16_t ParametrOne, uint16_t ParametrTwo){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	4613      	mov	r3, r2
 80008e8:	807b      	strh	r3, [r7, #2]

	if (Messages[Message].Msg == '0'){
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	4915      	ldr	r1, [pc, #84]	; (8000944 <SendMessage+0x6c>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	440b      	add	r3, r1
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b30      	cmp	r3, #48	; 0x30
 80008fc:	d11c      	bne.n	8000938 <SendMessage+0x60>

		Messages[Message].Msg = '1';
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	4910      	ldr	r1, [pc, #64]	; (8000944 <SendMessage+0x6c>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	440b      	add	r3, r1
 800090c:	2231      	movs	r2, #49	; 0x31
 800090e:	701a      	strb	r2, [r3, #0]
		Messages[Message].ParamOne = ParametrOne;
 8000910:	88fa      	ldrh	r2, [r7, #6]
 8000912:	490c      	ldr	r1, [pc, #48]	; (8000944 <SendMessage+0x6c>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	440b      	add	r3, r1
 800091e:	3302      	adds	r3, #2
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	801a      	strh	r2, [r3, #0]
		Messages[Message].ParamTwo = ParametrTwo;
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	4907      	ldr	r1, [pc, #28]	; (8000944 <SendMessage+0x6c>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	3304      	adds	r3, #4
 8000934:	887a      	ldrh	r2, [r7, #2]
 8000936:	801a      	strh	r2, [r3, #0]
	}
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000070 	.word	0x20000070

08000948 <ProcessMessage>:

void ProcessMessage (void){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < MaxNumbMessages; i++){
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e05a      	b.n	8000a0a <ProcessMessage+0xc2>

		if(Messages[i].Msg == '2'){
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	4931      	ldr	r1, [pc, #196]	; (8000a1c <ProcessMessage+0xd4>)
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	440b      	add	r3, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b32      	cmp	r3, #50	; 0x32
 8000966:	d11c      	bne.n	80009a2 <ProcessMessage+0x5a>
			Messages[i].Msg = '0';
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	492c      	ldr	r1, [pc, #176]	; (8000a1c <ProcessMessage+0xd4>)
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	440b      	add	r3, r1
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	701a      	strb	r2, [r3, #0]
			Messages[i].ParamOne = 0;
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	4927      	ldr	r1, [pc, #156]	; (8000a1c <ProcessMessage+0xd4>)
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	440b      	add	r3, r1
 8000988:	3302      	adds	r3, #2
 800098a:	2200      	movs	r2, #0
 800098c:	801a      	strh	r2, [r3, #0]
			Messages[i].ParamTwo = 0;
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	4922      	ldr	r1, [pc, #136]	; (8000a1c <ProcessMessage+0xd4>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	440b      	add	r3, r1
 800099c:	3304      	adds	r3, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
		}

		if(Messages[i].Msg == '1')Messages[i].Msg = '2';
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	491d      	ldr	r1, [pc, #116]	; (8000a1c <ProcessMessage+0xd4>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	440b      	add	r3, r1
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b31      	cmp	r3, #49	; 0x31
 80009b4:	d108      	bne.n	80009c8 <ProcessMessage+0x80>
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	4918      	ldr	r1, [pc, #96]	; (8000a1c <ProcessMessage+0xd4>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	440b      	add	r3, r1
 80009c4:	2232      	movs	r2, #50	; 0x32
 80009c6:	701a      	strb	r2, [r3, #0]

		if(Messages[i].Msg == '0'){
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	4914      	ldr	r1, [pc, #80]	; (8000a1c <ProcessMessage+0xd4>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	440b      	add	r3, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b30      	cmp	r3, #48	; 0x30
 80009da:	d113      	bne.n	8000a04 <ProcessMessage+0xbc>
			Messages[i].ParamOne = 0;
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	490f      	ldr	r1, [pc, #60]	; (8000a1c <ProcessMessage+0xd4>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	440b      	add	r3, r1
 80009ea:	3302      	adds	r3, #2
 80009ec:	2200      	movs	r2, #0
 80009ee:	801a      	strh	r2, [r3, #0]
			Messages[i].ParamTwo = 0;
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	490a      	ldr	r1, [pc, #40]	; (8000a1c <ProcessMessage+0xd4>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	440b      	add	r3, r1
 80009fe:	3304      	adds	r3, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < MaxNumbMessages; i++){
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	3301      	adds	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b1d      	cmp	r3, #29
 8000a0e:	d9a1      	bls.n	8000954 <ProcessMessage+0xc>
		}
	}
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000070 	.word	0x20000070

08000a20 <GetMessage>:

uint8_t GetMessage (uint8_t Message){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]

	if(Messages[Message].Msg == '2'){
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <GetMessage+0x40>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	440b      	add	r3, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b32      	cmp	r3, #50	; 0x32
 8000a3c:	d10a      	bne.n	8000a54 <GetMessage+0x34>
		Messages[Message].Msg = '0';
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	4907      	ldr	r1, [pc, #28]	; (8000a60 <GetMessage+0x40>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	440b      	add	r3, r1
 8000a4c:	2230      	movs	r2, #48	; 0x30
 8000a4e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <GetMessage+0x36>
	}
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000070 	.word	0x20000070

08000a64 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 8000a72:	4b58      	ldr	r3, [pc, #352]	; (8000bd4 <InitModbusUSART+0x170>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a57      	ldr	r2, [pc, #348]	; (8000bd4 <InitModbusUSART+0x170>)
 8000a78:	f043 0320 	orr.w	r3, r3, #32
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4a55      	ldr	r2, [pc, #340]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a88:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 8000a8a:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a94:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a4f      	ldr	r2, [pc, #316]	; (8000bd8 <InitModbusUSART+0x174>)
 8000a9c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000aa0:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <InitModbusUSART+0x174>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <InitModbusUSART+0x174>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 8000aae:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a49      	ldr	r2, [pc, #292]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ab4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ab8:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <InitModbusUSART+0x174>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a46      	ldr	r2, [pc, #280]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ac4:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4a43      	ldr	r2, [pc, #268]	; (8000bd8 <InitModbusUSART+0x174>)
 8000acc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ad0:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a40      	ldr	r2, [pc, #256]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000adc:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	4a3d      	ldr	r2, [pc, #244]	; (8000bd8 <InitModbusUSART+0x174>)
 8000ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae8:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <InitModbusUSART+0x174>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a3a      	ldr	r2, [pc, #232]	; (8000bd8 <InitModbusUSART+0x174>)
 8000af0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000af4:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <InitModbusUSART+0x174>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a37      	ldr	r2, [pc, #220]	; (8000bd8 <InitModbusUSART+0x174>)
 8000afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b00:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f242 7214 	movw	r2, #10004	; 0x2714
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d15e      	bne.n	8000bca <InitModbusUSART+0x166>

		USART->BRR = Speed;													// Установка скорости
 8000b0c:	4a33      	ldr	r2, [pc, #204]	; (8000bdc <InitModbusUSART+0x178>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <InitModbusUSART+0x178>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <InitModbusUSART+0x178>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	60d3      	str	r3, [r2, #12]

		if(ParityControl == ParityControlOn){
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d10b      	bne.n	8000b40 <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <InitModbusUSART+0x178>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	; (8000bdc <InitModbusUSART+0x178>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <InitModbusUSART+0x178>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <InitModbusUSART+0x178>)
 8000b3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b3e:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d105      	bne.n	8000b56 <InitModbusUSART+0xf2>
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <InitModbusUSART+0x178>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <InitModbusUSART+0x178>)
 8000b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b54:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f242 7212 	movw	r2, #10002	; 0x2712
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d105      	bne.n	8000b6c <InitModbusUSART+0x108>
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <InitModbusUSART+0x178>)
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <InitModbusUSART+0x178>)
 8000b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b6a:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f242 7213 	movw	r2, #10003	; 0x2713
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10b      	bne.n	8000b8e <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <InitModbusUSART+0x178>)
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <InitModbusUSART+0x178>)
 8000b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b80:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <InitModbusUSART+0x178>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <InitModbusUSART+0x178>)
 8000b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8c:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <InitModbusUSART+0x178>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <InitModbusUSART+0x178>)
 8000b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b98:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <InitModbusUSART+0x178>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <InitModbusUSART+0x178>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <InitModbusUSART+0x178>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <InitModbusUSART+0x178>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	60d3      	str	r3, [r2, #12]

		USART->CR3 |= USART_CR3_DMAT;										// Разрешаем запросы к DMA от модуля USART
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <InitModbusUSART+0x178>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <InitModbusUSART+0x178>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6153      	str	r3, [r2, #20]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <InitModbusUSART+0x178>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <InitModbusUSART+0x178>)
 8000bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc8:	60d3      	str	r3, [r2, #12]

	}

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40011400 	.word	0x40011400

08000be0 <InitDMAforUSART>:

void InitDMAforUSART (void){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <InitDMAforUSART+0x90>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <InitDMAforUSART+0x90>)
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream7->CR |= DMA_SxCR_CHSEL_0 |
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <InitDMAforUSART+0x94>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <InitDMAforUSART+0x94>)
 8000bf6:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8000bfa:	6013      	str	r3, [r2, #0]
						DMA_SxCR_CHSEL_2;

	DMA2_Stream7->PAR = (uint32_t) & USART->DR;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <InitDMAforUSART+0x94>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <InitDMAforUSART+0x98>)
 8000c00:	609a      	str	r2, [r3, #8]
	DMA2_Stream7->M0AR = (uint32_t) & ModbusSendData[0];
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <InitDMAforUSART+0x9c>)
 8000c06:	60da      	str	r2, [r3, #12]

	DMA2_Stream7->CR &= ~DMA_SxCR_MSIZE;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c0e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c12:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PSIZE;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c1a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c1e:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_MINC;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_PINC;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_PL;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c3e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c42:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR |= DMA_SxCR_DIR_0;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4e:	6013      	str	r3, [r2, #0]
	DMA2_Stream7->CR &= ~DMA_SxCR_CIRC;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]

	DMA2_Stream7->CR |= DMA_SxCR_TCIE;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <InitDMAforUSART+0x94>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]

}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40023800 	.word	0x40023800
 8000c74:	400264b8 	.word	0x400264b8
 8000c78:	40011404 	.word	0x40011404
 8000c7c:	20000130 	.word	0x20000130

08000c80 <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff fee5 	bl	8000a64 <InitModbusUSART>
	InitDMAforUSART();
 8000c9a:	f7ff ffa1 	bl	8000be0 <InitDMAforUSART>
	state = _state = 0;
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <InitModbusFSM+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <InitModbusFSM+0x54>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <InitModbusFSM+0x58>)
 8000caa:	701a      	strb	r2, [r3, #0]
	entry = 0;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <InitModbusFSM+0x5c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <InitModbusFSM+0x60>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <InitModbusFSM+0x60>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <InitModbusFSM+0x64>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <InitModbusFSM+0x68>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <InitModbusFSM+0x6c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000126 	.word	0x20000126
 8000cd8:	2000012a 	.word	0x2000012a
 8000cdc:	20000124 	.word	0x20000124
 8000ce0:	20000125 	.word	0x20000125
 8000ce4:	2000012b 	.word	0x2000012b
 8000ce8:	20000335 	.word	0x20000335
 8000cec:	20000334 	.word	0x20000334

08000cf0 <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000cf6:	4b5d      	ldr	r3, [pc, #372]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d003      	beq.n	8000d0a <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 8000d02:	4b5c      	ldr	r3, [pc, #368]	; (8000e74 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e002      	b.n	8000d10 <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

	_state = state;
 8000d10:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	4b56      	ldr	r3, [pc, #344]	; (8000e70 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000d16:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	f200 80a0 	bhi.w	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000d83 	.word	0x08000d83
 8000d34:	08000dc1 	.word	0x08000dc1
 8000d38:	08000e4b 	.word	0x08000e4b

	case 0:

		if (entry == 1){
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d102      	bne.n	8000d4a <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 8000d44:	4b4c      	ldr	r3, [pc, #304]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		}

		if(GetMessage(ModbusReciveSymbol)){
 8000d4a:	2016      	movs	r0, #22
 8000d4c:	f7ff fe68 	bl	8000a20 <GetMessage>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8082 	beq.w	8000e5c <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>
			state = 1;
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000d5e:	e07d      	b.n	8000e5c <ProcessSlaveModbusMessageReceptionRTUFSM+0x16c>

	case 1:

		if (entry == 1){
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d102      	bne.n	8000d6e <ProcessSlaveModbusMessageReceptionRTUFSM+0x7e>
			ReceptionStatus = ReceptionEnabled;
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8000d6a:	2264      	movs	r2, #100	; 0x64
 8000d6c:	801a      	strh	r2, [r3, #0]
		if(CurrentItemOfBuf >= ModbusBufSize){

			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 8000d6e:	2017      	movs	r0, #23
 8000d70:	f7ff fe56 	bl	8000a20 <GetMessage>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d072      	beq.n	8000e60 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>
			state = 2;
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000d80:	e06e      	b.n	8000e60 <ProcessSlaveModbusMessageReceptionRTUFSM+0x170>

	case 2:

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d003      	beq.n	8000d92 <ProcessSlaveModbusMessageReceptionRTUFSM+0xa2>
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <ProcessSlaveModbusMessageReceptionRTUFSM+0xaa>
			state = 3;
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d94:	2203      	movs	r2, #3
 8000d96:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 8000d98:	e063      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	e006      	b.n	8000db4 <ProcessSlaveModbusMessageReceptionRTUFSM+0xc4>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4a35      	ldr	r2, [pc, #212]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3301      	adds	r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3f3      	bcc.n	8000da6 <ProcessSlaveModbusMessageReceptionRTUFSM+0xb6>
		break;
 8000dbe:	e050      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>

	case 3:

		CRCVal = 0;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
		CRCRecVal = 0;
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <ProcessSlaveModbusMessageReceptionRTUFSM+0x198>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	801a      	strh	r2, [r3, #0]

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf - 2);					// Вычисляем CRC16
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4829      	ldr	r0, [pc, #164]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000dda:	f7ff faab 	bl	8000334 <CRC16>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 8000de4:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3b02      	subs	r3, #2
 8000dec:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <ProcessSlaveModbusMessageReceptionRTUFSM+0x198>)
 8000e10:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <ProcessSlaveModbusMessageReceptionRTUFSM+0x198>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d10c      	bne.n	8000e38 <ProcessSlaveModbusMessageReceptionRTUFSM+0x148>
			SendMessage(ModbusMessageReceived, 0, 0);						// Сообщение Modbus получено
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201b      	movs	r0, #27
 8000e24:	f7ff fd58 	bl	80008d8 <SendMessage>
			_CurrentItemOfBuf = CurrentItemOfBuf;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <ProcessSlaveModbusMessageReceptionRTUFSM+0x19c>)
 8000e2e:	701a      	strb	r2, [r3, #0]
			state = 0;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
		else {
			SendMessage(ModbusCRCNotOk, 0, 0);
			state = 4;
		}

		break;
 8000e36:	e014      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>
			SendMessage(ModbusCRCNotOk, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	201a      	movs	r0, #26
 8000e3e:	f7ff fd4b 	bl	80008d8 <SendMessage>
			state = 4;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	701a      	strb	r2, [r3, #0]
		break;
 8000e48:	e00b      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>

	case 4:

		SendMessage(ModbusError, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2015      	movs	r0, #21
 8000e50:	f7ff fd42 	bl	80008d8 <SendMessage>
		state = 0;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

		break;
 8000e5a:	e002      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e000      	b.n	8000e62 <ProcessSlaveModbusMessageReceptionRTUFSM+0x172>
		break;
 8000e60:	bf00      	nop

	}

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000012a 	.word	0x2000012a
 8000e70:	20000126 	.word	0x20000126
 8000e74:	20000124 	.word	0x20000124
 8000e78:	20000334 	.word	0x20000334
 8000e7c:	20000350 	.word	0x20000350
 8000e80:	20000234 	.word	0x20000234
 8000e84:	20000128 	.word	0x20000128
 8000e88:	20000230 	.word	0x20000230
 8000e8c:	2000012c 	.word	0x2000012c

08000e90 <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 8000e96:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d003      	beq.n	8000eaa <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 8000ea2:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e002      	b.n	8000eb0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000eb2:	781a      	ldrb	r2, [r3, #0]
 8000eb4:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <ProcessMessageGenerationSlaveModbusRTUFSM+0x13c>)
 8000eb6:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d87e      	bhi.n	8000fbe <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x38>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000f13 	.word	0x08000f13
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f8b 	.word	0x08000f8b

	case 0:
		if (entryMessageGenSlave == 1){
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10e      	bne.n	8000efe <ProcessMessageGenerationSlaveModbusRTUFSM+0x6e>

			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	e006      	b.n	8000ef4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x64>

				ModbusSendData[i] = 0;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < _CurrentItemOfBuf; i++){
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3f3      	bcc.n	8000ee6 <ProcessMessageGenerationSlaveModbusRTUFSM+0x56>

			}

		}

		if (GetMessage(ModbusMessageReceived)){
 8000efe:	201b      	movs	r0, #27
 8000f00:	f7ff fd8e 	bl	8000a20 <GetMessage>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d054      	beq.n	8000fb4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>
			stateMessageGenSlave = 1;
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
		}
			break;
 8000f10:	e050      	b.n	8000fb4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>

	case 1:

		if (ModbusData[1] == 0x05){
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <ProcessMessageGenerationSlaveModbusRTUFSM+0x14c>)
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d14e      	bne.n	8000fb8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

			WriteSingleCoil();
 8000f1a:	f000 f8c1 	bl	80010a0 <WriteSingleCoil>
		}

		break;
 8000f1e:	e04b      	b.n	8000fb8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>

	case 2:

		CRCRecVal = CRC16(ModbusSendData, _CurrentItemOfBuf - 2);
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3b02      	subs	r3, #2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000f2e:	f7ff fa01 	bl	8000334 <CRC16>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000f38:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-2] |= CRCRecVal;
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000f42:	5cd1      	ldrb	r1, [r2, r3]
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	430a      	orrs	r2, r1
 8000f52:	b2d1      	uxtb	r1, r2
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000f56:	54d1      	strb	r1, [r2, r3]

		CRCRecVal = CRCRecVal >> 8;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000f62:	801a      	strh	r2, [r3, #0]

		ModbusSendData[_CurrentItemOfBuf-1] |= CRCRecVal;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000f6c:	5cd1      	ldrb	r1, [r2, r3]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x150>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	b2d1      	uxtb	r1, r2
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x144>)
 8000f80:	54d1      	strb	r1, [r2, r3]

		stateMessageGenSlave = 3;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x138>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	701a      	strb	r2, [r3, #0]

		break;
 8000f88:	e019      	b.n	8000fbe <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>

	case 3:


		if (entryMessageGenSlave == 1){
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <ProcessMessageGenerationSlaveModbusRTUFSM+0x140>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>

			USART->SR &= ~USART_SR_TC;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x154>)
 8000f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f9c:	6013      	str	r3, [r2, #0]

			DMA2_Stream7->NDTR = _CurrentItemOfBuf;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x148>)
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000fa4:	605a      	str	r2, [r3, #4]

			DMA2_Stream7->CR |= DMA_SxCR_EN;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <ProcessMessageGenerationSlaveModbusRTUFSM+0x158>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]

		}

		break;
 8000fb2:	e003      	b.n	8000fbc <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>
			break;
 8000fb4:	bf00      	nop
 8000fb6:	e002      	b.n	8000fbe <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000fb8:	bf00      	nop
 8000fba:	e000      	b.n	8000fbe <ProcessMessageGenerationSlaveModbusRTUFSM+0x12e>
		break;
 8000fbc:	bf00      	nop

	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000012b 	.word	0x2000012b
 8000fcc:	20000125 	.word	0x20000125
 8000fd0:	20000335 	.word	0x20000335
 8000fd4:	20000130 	.word	0x20000130
 8000fd8:	2000012c 	.word	0x2000012c
 8000fdc:	20000234 	.word	0x20000234
 8000fe0:	20000230 	.word	0x20000230
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	400264b8 	.word	0x400264b8

08000fec <ProcessModbusSlaveFSM>:


void ProcessModbusSlaveFSM (void){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	ProcessSlaveModbusMessageReceptionRTUFSM();
 8000ff0:	f7ff fe7e 	bl	8000cf0 <ProcessSlaveModbusMessageReceptionRTUFSM>
	ProcessMessageGenerationSlaveModbusRTUFSM();
 8000ff4:	f7ff ff4c 	bl	8000e90 <ProcessMessageGenerationSlaveModbusRTUFSM>

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <USART6_IRQHandler>:


/*************************	 IRQ_Handler (Обработчики прерываний)	*************************/


void ModbusUSART_IRQHandler (void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <USART6_IRQHandler+0x58>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	2b00      	cmp	r3, #0
 800100a:	d018      	beq.n	800103e <USART6_IRQHandler+0x42>

		ReceptionStatus = ReceptionEnabled;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <USART6_IRQHandler+0x5c>)
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	801a      	strh	r2, [r3, #0]
		MRTUcount = 0;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <USART6_IRQHandler+0x60>)
 8001014:	2200      	movs	r2, #0
 8001016:	801a      	strh	r2, [r3, #0]

		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <USART6_IRQHandler+0x58>)
 800101a:	6859      	ldr	r1, [r3, #4]
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <USART6_IRQHandler+0x64>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	b2c9      	uxtb	r1, r1
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <USART6_IRQHandler+0x68>)
 8001026:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <USART6_IRQHandler+0x64>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <USART6_IRQHandler+0x64>)
 8001032:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol, 0, 0);					// Активируем сообщение ModbusReciveSymbol
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2016      	movs	r0, #22
 800103a:	f7ff fc4d 	bl	80008d8 <SendMessage>
	}

	if (USART->SR & USART_SR_ORE){
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <USART6_IRQHandler+0x58>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <USART6_IRQHandler+0x54>
		state = 4;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <USART6_IRQHandler+0x6c>)
 800104c:	2204      	movs	r2, #4
 800104e:	701a      	strb	r2, [r3, #0]
	}

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40011400 	.word	0x40011400
 8001058:	20000350 	.word	0x20000350
 800105c:	20000338 	.word	0x20000338
 8001060:	20000334 	.word	0x20000334
 8001064:	20000234 	.word	0x20000234
 8001068:	2000012a 	.word	0x2000012a

0800106c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler (void){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

	if (DMA2->HISR & DMA_HISR_TCIF7){
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <DMA2_Stream7_IRQHandler+0x2c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <DMA2_Stream7_IRQHandler+0x22>

		stateMessageGenSlave = 0;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <DMA2_Stream7_IRQHandler+0x30>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]

		DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <DMA2_Stream7_IRQHandler+0x2c>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <DMA2_Stream7_IRQHandler+0x2c>)
 8001088:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800108c:	60d3      	str	r3, [r2, #12]

	}

}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40026400 	.word	0x40026400
 800109c:	2000012b 	.word	0x2000012b

080010a0 <WriteSingleCoil>:

/*************************	 Modbus Function (Modbus функции)	*************************/


/* Запись состояния одного выхода (Код функции 0x05) */
void WriteSingleCoil (void){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0

	if (ModbusData[3] == 0x50){
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <WriteSingleCoil+0xa4>)
 80010a8:	78db      	ldrb	r3, [r3, #3]
 80010aa:	2b50      	cmp	r3, #80	; 0x50
 80010ac:	d145      	bne.n	800113a <WriteSingleCoil+0x9a>

		if (ModbusData[4] == 0xff && ModbusData[5] == 0x00){
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <WriteSingleCoil+0xa4>)
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d11e      	bne.n	80010f4 <WriteSingleCoil+0x54>
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <WriteSingleCoil+0xa4>)
 80010b8:	795b      	ldrb	r3, [r3, #5]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11a      	bne.n	80010f4 <WriteSingleCoil+0x54>

			GPIOC->BSRR |= GPIO_BSRR_BS14;
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <WriteSingleCoil+0xa8>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <WriteSingleCoil+0xa8>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e008      	b.n	80010e2 <WriteSingleCoil+0x42>
				ModbusSendData[i] = ModbusData[i];
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	491b      	ldr	r1, [pc, #108]	; (8001144 <WriteSingleCoil+0xa4>)
 80010d6:	5c89      	ldrb	r1, [r1, r2]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <WriteSingleCoil+0xac>)
 80010da:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	3301      	adds	r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <WriteSingleCoil+0xb0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3b02      	subs	r3, #2
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbf0      	blt.n	80010d0 <WriteSingleCoil+0x30>
			}
				stateMessageGenSlave = 2;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <WriteSingleCoil+0xb4>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	701a      	strb	r2, [r3, #0]
			}

			if (ModbusData[4] == 0x00 && ModbusData[5] == 0xff){
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <WriteSingleCoil+0xa4>)
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11e      	bne.n	800113a <WriteSingleCoil+0x9a>
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <WriteSingleCoil+0xa4>)
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	2bff      	cmp	r3, #255	; 0xff
 8001102:	d11a      	bne.n	800113a <WriteSingleCoil+0x9a>

			GPIOC->BSRR |= GPIO_BSRR_BR14;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <WriteSingleCoil+0xa8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <WriteSingleCoil+0xa8>)
 800110a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800110e:	6193      	str	r3, [r2, #24]

			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	71bb      	strb	r3, [r7, #6]
 8001114:	e008      	b.n	8001128 <WriteSingleCoil+0x88>
				ModbusSendData[i] = ModbusData[i];
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <WriteSingleCoil+0xa4>)
 800111c:	5c89      	ldrb	r1, [r1, r2]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <WriteSingleCoil+0xac>)
 8001120:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < _CurrentItemOfBuf - 2; i++){
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	3301      	adds	r3, #1
 8001126:	71bb      	strb	r3, [r7, #6]
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <WriteSingleCoil+0xb0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b02      	subs	r3, #2
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <WriteSingleCoil+0x76>
			}
				stateMessageGenSlave = 2;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <WriteSingleCoil+0xb4>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
			}

	}

}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000234 	.word	0x20000234
 8001148:	40020800 	.word	0x40020800
 800114c:	20000130 	.word	0x20000130
 8001150:	2000012c 	.word	0x2000012c
 8001154:	2000012b 	.word	0x2000012b

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4906      	ldr	r1, [pc, #24]	; (80011d4 <__NVIC_EnableIRQ+0x34>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <InitRCC+0x140>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <InitRCC+0x140>)
 800129a:	f023 030f 	bic.w	r3, r3, #15
 800129e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <InitRCC+0x140>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <InitRCC+0x140>)
 80012a6:	f043 0303 	orr.w	r3, r3, #3
 80012aa:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 80012ac:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <InitRCC+0x144>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <InitRCC+0x144>)
 80012b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b6:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 80012b8:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <InitRCC+0x148>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <InitRCC+0x148>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 80012c4:	bf00      	nop
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <InitRCC+0x148>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <InitRCC+0x148>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <InitRCC+0x148>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <InitRCC+0x148>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <InitRCC+0x148>)
 80012e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <InitRCC+0x148>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a3a      	ldr	r2, [pc, #232]	; (80013d8 <InitRCC+0x148>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <InitRCC+0x148>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a37      	ldr	r2, [pc, #220]	; (80013d8 <InitRCC+0x148>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8001302:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <InitRCC+0x148>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <InitRCC+0x148>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <InitRCC+0x148>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <InitRCC+0x148>)
 8001314:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800131c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <InitRCC+0x148>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <InitRCC+0x148>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <InitRCC+0x148>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <InitRCC+0x148>)
 8001330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001334:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <InitRCC+0x148>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <InitRCC+0x148>)
 800133c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001340:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <InitRCC+0x148>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <InitRCC+0x148>)
 8001348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134c:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 800134e:	bf00      	nop
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <InitRCC+0x148>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f9      	beq.n	8001350 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <InitRCC+0x148>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <InitRCC+0x148>)
 8001362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001366:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <InitRCC+0x148>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <InitRCC+0x148>)
 800136e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001372:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <InitRCC+0x148>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <InitRCC+0x148>)
 800137a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137e:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <InitRCC+0x148>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <InitRCC+0x148>)
 8001386:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800138a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <InitRCC+0x148>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <InitRCC+0x148>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <InitRCC+0x148>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <InitRCC+0x148>)
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <InitRCC+0x148>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <InitRCC+0x148>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 80013ac:	bf00      	nop
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <InitRCC+0x148>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d1f9      	bne.n	80013ae <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <InitRCC+0x148>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <InitRCC+0x148>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 80013c6:	f7fe ff35 	bl	8000234 <SystemCoreClockUpdate>

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00
 80013d4:	40007000 	.word	0x40007000
 80013d8:	40023800 	.word	0x40023800

080013dc <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

	__NVIC_SetPriorityGrouping(4);											// 16 групп прерываний и 16 подгрупп
 80013e0:	2004      	movs	r0, #4
 80013e2:	f7ff feb9 	bl	8001158 <__NVIC_SetPriorityGrouping>

	__NVIC_EnableIRQ(USART6_IRQn);											// Разрешаем прерывания от USART для Modbus
 80013e6:	2047      	movs	r0, #71	; 0x47
 80013e8:	f7ff feda 	bl	80011a0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);									// Разрешаем прерывания от 10-го таймера
 80013ec:	2019      	movs	r0, #25
 80013ee:	f7ff fed7 	bl	80011a0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA2_Stream7_IRQn);									// Разрешаем прерывания от DMA обслуживающего USART Modbus
 80013f2:	2046      	movs	r0, #70	; 0x46
 80013f4:	f7ff fed4 	bl	80011a0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(I2C1_EV_IRQn);											// Разрешаем прерывания событий I2C1
 80013f8:	201f      	movs	r0, #31
 80013fa:	f7ff fed1 	bl	80011a0 <__NVIC_EnableIRQ>
	__NVIC_EnableIRQ(DMA1_Stream1_IRQn);									// Разрешаем прерывания от DMA1_Stream1, обслуживающего I2C1
 80013fe:	200c      	movs	r0, #12
 8001400:	f7ff fece 	bl	80011a0 <__NVIC_EnableIRQ>

	__NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(1, 0, 2));			// Устанавливаем Modbus прерывание в первую группу, первым приоритетом
 8001404:	2202      	movs	r2, #2
 8001406:	2100      	movs	r1, #0
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ff0f 	bl	800122c <NVIC_EncodePriority>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	2047      	movs	r0, #71	; 0x47
 8001414:	f7ff fee0 	bl	80011d8 <__NVIC_SetPriority>
	__NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(2, 1, 3));	// Прервания 10го таймера за прерыванием Modbus
 8001418:	2203      	movs	r2, #3
 800141a:	2101      	movs	r1, #1
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ff05 	bl	800122c <NVIC_EncodePriority>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	2019      	movs	r0, #25
 8001428:	f7ff fed6 	bl	80011d8 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(1, 1, 3));
 800142c:	2203      	movs	r2, #3
 800142e:	2101      	movs	r1, #1
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fefb 	bl	800122c <NVIC_EncodePriority>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	2046      	movs	r0, #70	; 0x46
 800143c:	f7ff fecc 	bl	80011d8 <__NVIC_SetPriority>
	__NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(3, 0, 2));
 8001440:	2202      	movs	r2, #2
 8001442:	2100      	movs	r1, #0
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fef1 	bl	800122c <NVIC_EncodePriority>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	200c      	movs	r0, #12
 8001450:	f7ff fec2 	bl	80011d8 <__NVIC_SetPriority>
	__NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(3, 2, 3));
 8001454:	2203      	movs	r2, #3
 8001456:	2102      	movs	r1, #2
 8001458:	2003      	movs	r0, #3
 800145a:	f7ff fee7 	bl	800122c <NVIC_EncodePriority>
 800145e:	4603      	mov	r3, r0
 8001460:	4619      	mov	r1, r3
 8001462:	201f      	movs	r0, #31
 8001464:	f7ff feb8 	bl	80011d8 <__NVIC_SetPriority>

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <InitGPIO>:

void InitGPIO (void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <InitGPIO+0x108>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a3f      	ldr	r2, [pc, #252]	; (8001574 <InitGPIO+0x108>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <InitGPIO+0x108>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a3c      	ldr	r2, [pc, #240]	; (8001574 <InitGPIO+0x108>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <InitGPIO+0x108>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a39      	ldr	r2, [pc, #228]	; (8001574 <InitGPIO+0x108>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <InitGPIO+0x10c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a37      	ldr	r2, [pc, #220]	; (8001578 <InitGPIO+0x10c>)
 800149a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800149e:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <InitGPIO+0x10c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a34      	ldr	r2, [pc, #208]	; (8001578 <InitGPIO+0x10c>)
 80014a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014aa:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 80014ac:	4b32      	ldr	r3, [pc, #200]	; (8001578 <InitGPIO+0x10c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a31      	ldr	r2, [pc, #196]	; (8001578 <InitGPIO+0x10c>)
 80014b2:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80014b6:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <InitGPIO+0x10c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <InitGPIO+0x10c>)
 80014be:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014c2:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <InitGPIO+0x10c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <InitGPIO+0x10c>)
 80014ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014ce:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <InitGPIO+0x10c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a28      	ldr	r2, [pc, #160]	; (8001578 <InitGPIO+0x10c>)
 80014d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014da:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <InitGPIO+0x10c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <InitGPIO+0x10c>)
 80014e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014e6:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <InitGPIO+0x10c>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a22      	ldr	r2, [pc, #136]	; (8001578 <InitGPIO+0x10c>)
 80014ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014f2:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <InitGPIO+0x10c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <InitGPIO+0x10c>)
 80014fa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80014fe:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <InitGPIO+0x10c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <InitGPIO+0x10c>)
 8001506:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800150a:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <InitGPIO+0x10c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <InitGPIO+0x10c>)
 8001512:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001516:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <InitGPIO+0x10c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a16      	ldr	r2, [pc, #88]	; (8001578 <InitGPIO+0x10c>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT15;						// Настройка порта PC15 на выход push-pull
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <InitGPIO+0x10c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <InitGPIO+0x10c>)
 800152a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800152e:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <InitGPIO+0x10c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <InitGPIO+0x10c>)
 8001536:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800153a:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15;				// Настройка на высокую выходную скорость
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <InitGPIO+0x10c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <InitGPIO+0x10c>)
 8001542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001546:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD15;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <InitGPIO+0x10c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <InitGPIO+0x10c>)
 800154e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001552:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE15;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <InitGPIO+0x10c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <InitGPIO+0x10c>)
 800155a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800155e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE15_0;					// Настройка порта PC15 на выход
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <InitGPIO+0x10c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <InitGPIO+0x10c>)
 8001566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	40020800 	.word	0x40020800

0800157c <InitTIM10>:

/*************************	 Code	*************************/

/*************************	 Функции аппаратной инициализации таймера	*************************/

void InitTIM10 (void){
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <InitTIM10+0x58>)
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <InitTIM10+0x58>)
 8001586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158a:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->PSC = 96 - 1;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <InitTIM10+0x5c>)
 800158e:	225f      	movs	r2, #95	; 0x5f
 8001590:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->ARR = 500;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <InitTIM10+0x5c>)
 8001594:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM10->DIER |= TIM_DIER_UIE;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <InitTIM10+0x5c>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <InitTIM10+0x5c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	60d3      	str	r3, [r2, #12]

	MRTUcount = 0;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <InitTIM10+0x60>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
	ReceptionStatus = ReceptionStopped;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <InitTIM10+0x64>)
 80015ae:	2232      	movs	r2, #50	; 0x32
 80015b0:	801a      	strh	r2, [r3, #0]

	TIM10->CR1 |= TIM_CR1_CEN;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <InitTIM10+0x5c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <InitTIM10+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

	TIM10->EGR |= TIM_EGR_UG;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <InitTIM10+0x5c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <InitTIM10+0x5c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6153      	str	r3, [r2, #20]

}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40014400 	.word	0x40014400
 80015dc:	20000338 	.word	0x20000338
 80015e0:	20000350 	.word	0x20000350

080015e4 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

		for (uint8_t i = 0; i <= MaxGTimers; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e00f      	b.n	8001610 <TIM1_UP_TIM10_IRQHandler+0x2c>

				if (GTimerState[i] == TimerRunning){
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x74>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <TIM1_UP_TIM10_IRQHandler+0x26>

					GTimerVal[i]++;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x78>)
 80015fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001602:	3201      	adds	r2, #1
 8001604:	4915      	ldr	r1, [pc, #84]	; (800165c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t i = 0; i <= MaxGTimers; i++){
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	3301      	adds	r3, #1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d9ec      	bls.n	80015f0 <TIM1_UP_TIM10_IRQHandler+0xc>
				}
			}

	if (ReceptionStatus == ReceptionEnabled){
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d111      	bne.n	8001642 <TIM1_UP_TIM10_IRQHandler+0x5e>

		MRTUcount++;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001628:	801a      	strh	r2, [r3, #0]

		if (MRTUcount >= 5){
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <TIM1_UP_TIM10_IRQHandler+0x80>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d907      	bls.n	8001642 <TIM1_UP_TIM10_IRQHandler+0x5e>
			SendMessage(ModbusRTUTimeOut, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2017      	movs	r0, #23
 8001638:	f7ff f94e 	bl	80008d8 <SendMessage>
			ReceptionStatus = ReceptionStopped;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800163e:	2232      	movs	r2, #50	; 0x32
 8001640:	801a      	strh	r2, [r3, #0]
		}

	}

	TIM10->SR &= ~TIM_SR_UIF;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6113      	str	r3, [r2, #16]

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000034c 	.word	0x2000034c
 800165c:	2000033c 	.word	0x2000033c
 8001660:	20000350 	.word	0x20000350
 8001664:	20000338 	.word	0x20000338
 8001668:	40014400 	.word	0x40014400

0800166c <InitGTimer>:

/*************************	 Функции глобальных таймеров	*************************/

void InitGTimer(void){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	e006      	b.n	8001686 <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <InitGTimer+0x2c>)
 800167c:	2100      	movs	r1, #0
 800167e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MaxGTimers; i++){
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	3301      	adds	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d9f5      	bls.n	8001678 <InitGTimer+0xc>
	}

}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000034c 	.word	0x2000034c

0800169c <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4a08      	ldr	r2, [pc, #32]	; (80016cc <StartGTimer+0x30>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <StartGTimer+0x34>)
 80016b4:	2100      	movs	r1, #0
 80016b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <StartGTimer+0x30>)
 80016be:	2101      	movs	r1, #1
 80016c0:	54d1      	strb	r1, [r2, r3]
	}

}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	2000034c 	.word	0x2000034c
 80016d0:	2000033c 	.word	0x2000033c

080016d4 <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <StopGTimer+0x1c>)
 80016e2:	2100      	movs	r1, #0
 80016e4:	54d1      	strb	r1, [r2, r3]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	2000034c 	.word	0x2000034c

080016f4 <GetGTimerVal>:
		GTimerState[GTimerID] = TimerRunning;
	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <GetGTimerVal+0x1c>)
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	2000033c 	.word	0x2000033c

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr  r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173e:	f7fe fd4b 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f000 f811 	bl	8001768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f857 	bl	80007f8 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001750:	080019e0 	.word	0x080019e0
  ldr  r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001758:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800175c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001760:	20000354 	.word	0x20000354

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <__libc_init_array>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4d0d      	ldr	r5, [pc, #52]	; (80017a0 <__libc_init_array+0x38>)
 800176c:	4c0d      	ldr	r4, [pc, #52]	; (80017a4 <__libc_init_array+0x3c>)
 800176e:	1b64      	subs	r4, r4, r5
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	2600      	movs	r6, #0
 8001774:	42a6      	cmp	r6, r4
 8001776:	d109      	bne.n	800178c <__libc_init_array+0x24>
 8001778:	4d0b      	ldr	r5, [pc, #44]	; (80017a8 <__libc_init_array+0x40>)
 800177a:	4c0c      	ldr	r4, [pc, #48]	; (80017ac <__libc_init_array+0x44>)
 800177c:	f000 f818 	bl	80017b0 <_init>
 8001780:	1b64      	subs	r4, r4, r5
 8001782:	10a4      	asrs	r4, r4, #2
 8001784:	2600      	movs	r6, #0
 8001786:	42a6      	cmp	r6, r4
 8001788:	d105      	bne.n	8001796 <__libc_init_array+0x2e>
 800178a:	bd70      	pop	{r4, r5, r6, pc}
 800178c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001790:	4798      	blx	r3
 8001792:	3601      	adds	r6, #1
 8001794:	e7ee      	b.n	8001774 <__libc_init_array+0xc>
 8001796:	f855 3b04 	ldr.w	r3, [r5], #4
 800179a:	4798      	blx	r3
 800179c:	3601      	adds	r6, #1
 800179e:	e7f2      	b.n	8001786 <__libc_init_array+0x1e>
 80017a0:	080019d8 	.word	0x080019d8
 80017a4:	080019d8 	.word	0x080019d8
 80017a8:	080019d8 	.word	0x080019d8
 80017ac:	080019dc 	.word	0x080019dc

080017b0 <_init>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	bf00      	nop
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr

080017bc <_fini>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr
