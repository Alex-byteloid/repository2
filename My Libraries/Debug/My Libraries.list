
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000025c  20000004  08000fec  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000260  08000fec  00020260  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001d02  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000008c7  00000000  00000000  00021d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001a0  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000128  00000000  00000000  00022798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e250  00000000  00000000  000228c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000027ff  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00050200  00000000  00000000  0003330f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0008350f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000448  00000000  00000000  00083564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000db8 	.word	0x08000db8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000db8 	.word	0x08000db8

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	08000dd0 	.word	0x08000dd0

08000334 <CRC16>:
};
/* Конец таблиц для расчёта CRC16 */

/*************************	 Code	*************************/

uint16_t CRC16(uint8_t *p, uint16_t len){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]

	uint8_t crc_hi;
	uint8_t crc_lo;
	uint8_t n;

	if (len > 256) return (0);
 8000340:	887b      	ldrh	r3, [r7, #2]
 8000342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000346:	d901      	bls.n	800034c <CRC16+0x18>
 8000348:	2300      	movs	r3, #0
 800034a:	e025      	b.n	8000398 <CRC16+0x64>

	n = (uint8_t)len;
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	737b      	strb	r3, [r7, #13]

	crc_hi = 0xFF;   									// high byte of CRC initialized
 8000350:	23ff      	movs	r3, #255	; 0xff
 8000352:	73fb      	strb	r3, [r7, #15]
	crc_lo = 0xFF;   									// low byte of CRC initialized
 8000354:	23ff      	movs	r3, #255	; 0xff
 8000356:	73bb      	strb	r3, [r7, #14]

	do{
		uint8_t i = crc_hi ^ *p++;        				// will index into CRC lookup table
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	4053      	eors	r3, r2
 8000364:	733b      	strb	r3, [r7, #12]
		crc_hi = crc_lo ^ (uint8_t)(&auchCRCHi[i]);    	// calculate the CRC
 8000366:	7b3b      	ldrb	r3, [r7, #12]
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <CRC16+0x70>)
 800036a:	4413      	add	r3, r2
 800036c:	b2da      	uxtb	r2, r3
 800036e:	7bbb      	ldrb	r3, [r7, #14]
 8000370:	4053      	eors	r3, r2
 8000372:	73fb      	strb	r3, [r7, #15]
		crc_lo =          (uint8_t)(&auchCRCLo[i]);
 8000374:	7b3b      	ldrb	r3, [r7, #12]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <CRC16+0x74>)
 8000378:	4413      	add	r3, r2
 800037a:	73bb      	strb	r3, [r7, #14]
	}
	while (--n);         								// pass through message buffer (max 256 items)
 800037c:	7b7b      	ldrb	r3, [r7, #13]
 800037e:	3b01      	subs	r3, #1
 8000380:	737b      	strb	r3, [r7, #13]
 8000382:	7b7b      	ldrb	r3, [r7, #13]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1e7      	bne.n	8000358 <CRC16+0x24>

	return ((crc_lo << 8) | crc_hi);
 8000388:	7bbb      	ldrb	r3, [r7, #14]
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	b21a      	sxth	r2, r3
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	b21b      	sxth	r3, r3
 8000392:	4313      	orrs	r3, r2
 8000394:	b21b      	sxth	r3, r3
 8000396:	b29b      	uxth	r3, r3

	}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	08000de0 	.word	0x08000de0
 80003a8:	08000ee0 	.word	0x08000ee0

080003ac <main>:



/*************************	 Code	*************************/

int main (void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	InitGPIO();
 80003b0:	f000 fbf4 	bl	8000b9c <InitGPIO>
	InitRCC();
 80003b4:	f000 fb42 	bl	8000a3c <InitRCC>
	InitGTimer();
 80003b8:	f000 fc98 	bl	8000cec <InitGTimer>
	UpdateNVICActiveAndPriority();
 80003bc:	f000 fbe4 	bl	8000b88 <UpdateNVICActiveAndPriority>
	InitHardwareTimer();
 80003c0:	f000 fc4a 	bl	8000c58 <InitHardwareTimer>
	InitMessage();
 80003c4:	f000 f81a 	bl	80003fc <InitMessage>
	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
 80003c8:	f242 7314 	movw	r3, #10004	; 0x2714
 80003cc:	f242 7213 	movw	r2, #10003	; 0x2713
 80003d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80003d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80003d8:	f000 f936 	bl	8000648 <InitModbusFSM>
	GPIOC->BSRR |= GPIO_BSRR_BR14;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <main+0x4c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <main+0x4c>)
 80003e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003e6:	6193      	str	r3, [r2, #24]
//	SendMessage(LedOnMsg);

	while(1){

		ProcessSlaveModbusMessageReceptionRTUFSM();
 80003e8:	f000 f964 	bl	80006b4 <ProcessSlaveModbusMessageReceptionRTUFSM>
		ProcessMessageGenerationSlaveModbusRTUFSM();
 80003ec:	f000 fa32 	bl	8000854 <ProcessMessageGenerationSlaveModbusRTUFSM>
//		ProcessLedFSM();
		ProcessMessage();
 80003f0:	f000 f82e 	bl	8000450 <ProcessMessage>
		ProcessSlaveModbusMessageReceptionRTUFSM();
 80003f4:	e7f8      	b.n	80003e8 <main+0x3c>
 80003f6:	bf00      	nop
 80003f8:	40020800 	.word	0x40020800

080003fc <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e007      	b.n	8000418 <InitMessage+0x1c>
		Messages[i] = '0';
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <InitMessage+0x30>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	2230      	movs	r2, #48	; 0x30
 8000410:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b1d      	cmp	r3, #29
 800041c:	ddf4      	ble.n	8000408 <InitMessage+0xc>
	}
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000020 	.word	0x20000020

08000430 <SendMessage>:

void SendMessage (int Msg){
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

	Messages[Msg] = '1';
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <SendMessage+0x1c>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	2231      	movs	r2, #49	; 0x31
 8000440:	701a      	strb	r2, [r3, #0]

/*	if (Messages[Msg] == '0'){

		Messages[Msg] = '1';
	}*/
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000020 	.word	0x20000020

08000450 <ProcessMessage>:

void ProcessMessage (void){
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e018      	b.n	800048e <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <ProcessMessage+0x50>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b32      	cmp	r3, #50	; 0x32
 8000466:	d104      	bne.n	8000472 <ProcessMessage+0x22>
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <ProcessMessage+0x50>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	2230      	movs	r2, #48	; 0x30
 8000470:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <ProcessMessage+0x50>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4413      	add	r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b31      	cmp	r3, #49	; 0x31
 800047c:	d104      	bne.n	8000488 <ProcessMessage+0x38>
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <ProcessMessage+0x50>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	2232      	movs	r2, #50	; 0x32
 8000486:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b1d      	cmp	r3, #29
 8000492:	dde3      	ble.n	800045c <ProcessMessage+0xc>
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000020 	.word	0x20000020

080004a4 <GetMessage>:

uint8_t GetMessage (int Msg){
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 80004ac:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <GetMessage+0x30>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b32      	cmp	r3, #50	; 0x32
 80004b6:	d106      	bne.n	80004c6 <GetMessage+0x22>
		Messages[Msg] = '0';
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <GetMessage+0x30>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	2230      	movs	r2, #48	; 0x30
 80004c0:	701a      	strb	r2, [r3, #0]
		return 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e000      	b.n	80004c8 <GetMessage+0x24>
	}
	return 0;
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000020 	.word	0x20000020

080004d8 <InitModbusUSART>:
uint16_t CRCVal;							// Вычисленное значение контрольной суммы
uint16_t CRCRecVal;							// Принятое значение контрольной суммы

/*************************	 Code	*************************/

void InitModbusUSART(uint32_t Speed, uint32_t ParityControl, uint32_t StopBit, uint32_t ModbusMode){
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]

	/**Включение тактирования модуля USART**/

	RCC->USARTBus |= USARTClock;
 80004e6:	4b55      	ldr	r3, [pc, #340]	; (800063c <InitModbusUSART+0x164>)
 80004e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ea:	4a54      	ldr	r2, [pc, #336]	; (800063c <InitModbusUSART+0x164>)
 80004ec:	f043 0320 	orr.w	r3, r3, #32
 80004f0:	6453      	str	r3, [r2, #68]	; 0x44

	/**Настройка TX на выход альтернативный пуш-пулл**/

	Gpio->PUPDR &= ~TXPinPUPDR;
 80004f2:	4b53      	ldr	r3, [pc, #332]	; (8000640 <InitModbusUSART+0x168>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	4a52      	ldr	r2, [pc, #328]	; (8000640 <InitModbusUSART+0x168>)
 80004f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80004fc:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~TXPinOTYPER;
 80004fe:	4b50      	ldr	r3, [pc, #320]	; (8000640 <InitModbusUSART+0x168>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4a4f      	ldr	r2, [pc, #316]	; (8000640 <InitModbusUSART+0x168>)
 8000504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000508:	6053      	str	r3, [r2, #4]
	Gpio->OSPEEDR |= TXPinOSPEEDR;
 800050a:	4b4d      	ldr	r3, [pc, #308]	; (8000640 <InitModbusUSART+0x168>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	4a4c      	ldr	r2, [pc, #304]	; (8000640 <InitModbusUSART+0x168>)
 8000510:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000514:	6093      	str	r3, [r2, #8]
	Gpio->AFR[1] |= TXPinAFRH;
 8000516:	4b4a      	ldr	r3, [pc, #296]	; (8000640 <InitModbusUSART+0x168>)
 8000518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051a:	4a49      	ldr	r2, [pc, #292]	; (8000640 <InitModbusUSART+0x168>)
 800051c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000520:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~TXPinMODER;
 8000522:	4b47      	ldr	r3, [pc, #284]	; (8000640 <InitModbusUSART+0x168>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a46      	ldr	r2, [pc, #280]	; (8000640 <InitModbusUSART+0x168>)
 8000528:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800052c:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= TXPinMODER1;
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <InitModbusUSART+0x168>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a43      	ldr	r2, [pc, #268]	; (8000640 <InitModbusUSART+0x168>)
 8000534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000538:	6013      	str	r3, [r2, #0]

	/**Настройка RX на OD вход альт. функции**/

	Gpio->PUPDR &= ~RXPinPUPDR;
 800053a:	4b41      	ldr	r3, [pc, #260]	; (8000640 <InitModbusUSART+0x168>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	4a40      	ldr	r2, [pc, #256]	; (8000640 <InitModbusUSART+0x168>)
 8000540:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000544:	60d3      	str	r3, [r2, #12]
	Gpio->OTYPER &= ~RXPinOTYPER;
 8000546:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <InitModbusUSART+0x168>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	4a3d      	ldr	r2, [pc, #244]	; (8000640 <InitModbusUSART+0x168>)
 800054c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000550:	6053      	str	r3, [r2, #4]
	Gpio->AFR[1] |= RXPinAFRH;
 8000552:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <InitModbusUSART+0x168>)
 8000554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000556:	4a3a      	ldr	r2, [pc, #232]	; (8000640 <InitModbusUSART+0x168>)
 8000558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800055c:	6253      	str	r3, [r2, #36]	; 0x24
	Gpio->MODER &= ~RXPinMODER;
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <InitModbusUSART+0x168>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <InitModbusUSART+0x168>)
 8000564:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000568:	6013      	str	r3, [r2, #0]
	Gpio->MODER |= RXPinMODER1;
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <InitModbusUSART+0x168>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a34      	ldr	r2, [pc, #208]	; (8000640 <InitModbusUSART+0x168>)
 8000570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000574:	6013      	str	r3, [r2, #0]

	/**Настройка модуля USART**/

	if (ModbusMode == RTUMode){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	f242 7214 	movw	r2, #10004	; 0x2714
 800057c:	4293      	cmp	r3, r2
 800057e:	d158      	bne.n	8000632 <InitModbusUSART+0x15a>

		USART->BRR = Speed;													// Установка скорости
 8000580:	4a30      	ldr	r2, [pc, #192]	; (8000644 <InitModbusUSART+0x16c>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6093      	str	r3, [r2, #8]

		USART->CR1 |= USART_CR1_RXNEIE;										// Разрешаем прерывание по приёму
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <InitModbusUSART+0x16c>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a2e      	ldr	r2, [pc, #184]	; (8000644 <InitModbusUSART+0x16c>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= USART_CR1_TXEIE;										// Разрешаем прерывание по передаче

		if(ParityControl == ParityControlOn){
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	f242 7211 	movw	r2, #10001	; 0x2711
 8000598:	4293      	cmp	r3, r2
 800059a:	d10b      	bne.n	80005b4 <InitModbusUSART+0xdc>
			USART->CR1 |= USART_CR1_PCE;									// Включение бита контроля чётности
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <InitModbusUSART+0x16c>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <InitModbusUSART+0x16c>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	60d3      	str	r3, [r2, #12]
			USART->CR1 &= ~USART_CR1_PS;									// Включена "Чётная" чётность :)))))
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <InitModbusUSART+0x16c>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a25      	ldr	r2, [pc, #148]	; (8000644 <InitModbusUSART+0x16c>)
 80005ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005b2:	60d3      	str	r3, [r2, #12]
		}

		if(ParityControl == ParityControlOff)USART->CR1 &= ~USART_CR1_PCE;	// Выключение контроля чётности
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d105      	bne.n	80005ca <InitModbusUSART+0xf2>
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <InitModbusUSART+0x16c>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <InitModbusUSART+0x16c>)
 80005c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005c8:	60d3      	str	r3, [r2, #12]

		if(StopBit == OneStopBit)USART->CR2 &= ~USART_CR2_STOP;				// Один стоп-бит
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f242 7212 	movw	r2, #10002	; 0x2712
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d105      	bne.n	80005e0 <InitModbusUSART+0x108>
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <InitModbusUSART+0x16c>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <InitModbusUSART+0x16c>)
 80005da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005de:	6113      	str	r3, [r2, #16]

		if(StopBit == TwoStopBit){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f242 7213 	movw	r2, #10003	; 0x2713
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10b      	bne.n	8000602 <InitModbusUSART+0x12a>
			USART->CR2 &= ~USART_CR2_STOP;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <InitModbusUSART+0x16c>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <InitModbusUSART+0x16c>)
 80005f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005f4:	6113      	str	r3, [r2, #16]
			USART->CR2 |= USART_CR2_STOP_1;									// Два стоп-бита
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <InitModbusUSART+0x16c>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <InitModbusUSART+0x16c>)
 80005fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000600:	6113      	str	r3, [r2, #16]
		}

		USART->CR1 &= ~USART_CR1_M;											// Структура слова: 1 Start bit, 8 Data bits, n Stop bit
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <InitModbusUSART+0x16c>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <InitModbusUSART+0x16c>)
 8000608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800060c:	60d3      	str	r3, [r2, #12]
//		USART->CR1 |= ~USART_CR1_M;											// Структура слова: 1 Start bit, 9 Data bits, n Stop bit


//		USART->CR1 |= USART_CR1_IDLEIE;										// Включаем детектирование свободной линии
		USART->CR1 |= USART_CR1_RE;											// Включаем приемник
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <InitModbusUSART+0x16c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <InitModbusUSART+0x16c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	60d3      	str	r3, [r2, #12]
		USART->CR1 |= USART_CR1_TE;											// Включаем передатчик
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <InitModbusUSART+0x16c>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <InitModbusUSART+0x16c>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	60d3      	str	r3, [r2, #12]

		USART->CR1 |= USART_CR1_UE;											// Включаем модуль USART в работу
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <InitModbusUSART+0x16c>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <InitModbusUSART+0x16c>)
 800062c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000630:	60d3      	str	r3, [r2, #12]

	}

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	40011400 	.word	0x40011400

08000648 <InitModbusFSM>:

void InitModbusFSM (uint32_t Baud, uint32_t Parity, uint32_t StopBit,uint32_t ModbusMode){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]

	InitModbusUSART(Baud, Parity, StopBit, ModbusMode);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff3b 	bl	80004d8 <InitModbusUSART>
	state = _state = 0;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <InitModbusFSM+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <InitModbusFSM+0x50>)
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <InitModbusFSM+0x54>)
 800066e:	701a      	strb	r2, [r3, #0]
	entry = 0;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <InitModbusFSM+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	stateMessageGenSlave = _stateMessageGenSlave = 0;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <InitModbusFSM+0x5c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <InitModbusFSM+0x5c>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <InitModbusFSM+0x60>)
 8000682:	701a      	strb	r2, [r3, #0]
	entryMessageGenSlave = 0;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <InitModbusFSM+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	CurrentItemOfBuf = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <InitModbusFSM+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000042 	.word	0x20000042
 800069c:	20000046 	.word	0x20000046
 80006a0:	20000040 	.word	0x20000040
 80006a4:	20000041 	.word	0x20000041
 80006a8:	20000047 	.word	0x20000047
 80006ac:	2000024d 	.word	0x2000024d
 80006b0:	2000024c 	.word	0x2000024c

080006b4 <ProcessSlaveModbusMessageReceptionRTUFSM>:

void ProcessSlaveModbusMessageReceptionRTUFSM (void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 80006ba:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	4b5b      	ldr	r3, [pc, #364]	; (800082c <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d003      	beq.n	80006ce <ProcessSlaveModbusMessageReceptionRTUFSM+0x1a>
 80006c6:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e002      	b.n	80006d4 <ProcessSlaveModbusMessageReceptionRTUFSM+0x20>
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

	_state = state;
 80006d4:	4b54      	ldr	r3, [pc, #336]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b54      	ldr	r3, [pc, #336]	; (800082c <ProcessSlaveModbusMessageReceptionRTUFSM+0x178>)
 80006da:	701a      	strb	r2, [r3, #0]

	switch (state){
 80006dc:	4b52      	ldr	r3, [pc, #328]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	f200 809c 	bhi.w	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <ProcessSlaveModbusMessageReceptionRTUFSM+0x38>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	08000701 	.word	0x08000701
 80006f0:	08000723 	.word	0x08000723
 80006f4:	08000737 	.word	0x08000737
 80006f8:	0800079b 	.word	0x0800079b
 80006fc:	0800080b 	.word	0x0800080b

	case 0:

		if (entry == 1){
 8000700:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d102      	bne.n	800070e <ProcessSlaveModbusMessageReceptionRTUFSM+0x5a>
			CurrentItemOfBuf = 0;
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		}
//		SendMessage(ModbusWaitingMessage);
		if(GetMessage(ModbusReciveSymbol)){
 800070e:	2016      	movs	r0, #22
 8000710:	f7ff fec8 	bl	80004a4 <GetMessage>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d07e      	beq.n	8000818 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>

			state = 1;
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000720:	e07a      	b.n	8000818 <ProcessSlaveModbusMessageReceptionRTUFSM+0x164>
		if(CurrentItemOfBuf >= ModbusBufSize){
//			SendMessage(ModbusOverflowError);
			state = 4;
		}

		if(GetMessage(ModbusRTUTimeOut)){
 8000722:	2017      	movs	r0, #23
 8000724:	f7ff febe 	bl	80004a4 <GetMessage>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d076      	beq.n	800081c <ProcessSlaveModbusMessageReceptionRTUFSM+0x168>
			state = 2;
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000734:	e072      	b.n	800081c <ProcessSlaveModbusMessageReceptionRTUFSM+0x168>

	case 2:

		GPIOC->BSRR |= GPIO_BSRR_BS14;
 8000736:	4b40      	ldr	r3, [pc, #256]	; (8000838 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a3f      	ldr	r2, [pc, #252]	; (8000838 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6193      	str	r3, [r2, #24]

		if (entry == 1){
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <ProcessSlaveModbusMessageReceptionRTUFSM+0x17c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d108      	bne.n	800075c <ProcessSlaveModbusMessageReceptionRTUFSM+0xa8>
//			__enable_fault_irq();
			SysTickHandlerState = 0;					// Обработчик прерывания системного таймера в состоянии 0
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <ProcessSlaveModbusMessageReceptionRTUFSM+0x188>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

				SysTick->LOAD = 95999;						// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 1 мс.
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8000752:	4a3c      	ldr	r2, [pc, #240]	; (8000844 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 8000754:	605a      	str	r2, [r3, #4]
				SysTick->VAL = 95999;						// Обнуляем таймер и флаги.
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <ProcessSlaveModbusMessageReceptionRTUFSM+0x18c>)
 8000758:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <ProcessSlaveModbusMessageReceptionRTUFSM+0x190>)
 800075a:	609a      	str	r2, [r3, #8]
			//InitHardwareTimer();
//			ReleaseGTimer(GTimer1);
		}

		if (ModbusData[0] == ModbusSlaveAdress || ModbusData[0] == 0x00){	// Если адрес совпал, переходим в состояние 3 (вычисление CRC)
 800075c:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b12      	cmp	r3, #18
 8000762:	d003      	beq.n	800076c <ProcessSlaveModbusMessageReceptionRTUFSM+0xb8>
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <ProcessSlaveModbusMessageReceptionRTUFSM+0xc0>
			state = 3;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 800076e:	2203      	movs	r2, #3
 8000770:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
			}
		}

		break;
 8000772:	e054      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>
			state = 0;														// Eсли адрес не совпадает с адресом устройства или широковещательным, переходим в состояние 0 (ожидание приёма сообщения)
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e006      	b.n	800078e <ProcessSlaveModbusMessageReceptionRTUFSM+0xda>
				ModbusData[i] = 0;											// Затираем принятое сообщение Modbus
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 8000784:	2100      	movs	r1, #0
 8000786:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < CurrentItemOfBuf; i++){
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3f3      	bcc.n	8000780 <ProcessSlaveModbusMessageReceptionRTUFSM+0xcc>
		break;
 8000798:	e041      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>

	case 3:

		CRCVal = CRC16(ModbusData, CurrentItemOfBuf);						// Вычисляем CRC16
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	4829      	ldr	r0, [pc, #164]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 80007a4:	f7ff fdc6 	bl	8000334 <CRC16>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <ProcessSlaveModbusMessageReceptionRTUFSM+0x198>)
 80007ae:	801a      	strh	r2, [r3, #0]

		uint8_t CrcHi;
		uint8_t CrcLo;

		CrcHi = ModbusData [CurrentItemOfBuf - 2];
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3b02      	subs	r3, #2
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	71bb      	strb	r3, [r7, #6]
		CrcLo = ModbusData [CurrentItemOfBuf - 1];
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <ProcessSlaveModbusMessageReceptionRTUFSM+0x180>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	4a21      	ldr	r2, [pc, #132]	; (8000848 <ProcessSlaveModbusMessageReceptionRTUFSM+0x194>)
 80007c4:	5cd3      	ldrb	r3, [r2, r3]
 80007c6:	717b      	strb	r3, [r7, #5]

		CRCRecVal = ((CrcHi << 8) | CrcLo);									// Записываем во временную переменную значение принятой контрольной суммы
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ProcessSlaveModbusMessageReceptionRTUFSM+0x19c>)
 80007da:	801a      	strh	r2, [r3, #0]

		if (CRCVal == CRCRecVal) {											// Сравниваем значения контрольных сумм
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <ProcessSlaveModbusMessageReceptionRTUFSM+0x198>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <ProcessSlaveModbusMessageReceptionRTUFSM+0x19c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d103      	bne.n	80007f0 <ProcessSlaveModbusMessageReceptionRTUFSM+0x13c>
			SendMessage(ModbusMessageReceived);								// Сообщение Modbus получено
 80007e8:	201b      	movs	r0, #27
 80007ea:	f7ff fe21 	bl	8000430 <SendMessage>
			state = 4;
			GPIOC->BSRR |= GPIO_BSRR_BS13;

		}

		break;
 80007ee:	e016      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>
			SendMessage(ModbusCRCNotOk);
 80007f0:	201a      	movs	r0, #26
 80007f2:	f7ff fe1d 	bl	8000430 <SendMessage>
			state = 4;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	701a      	strb	r2, [r3, #0]
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <ProcessSlaveModbusMessageReceptionRTUFSM+0x184>)
 8000802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000806:	6193      	str	r3, [r2, #24]
		break;
 8000808:	e009      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>

	case 4:

		SendMessage(ModbusError);
 800080a:	2015      	movs	r0, #21
 800080c:	f7ff fe10 	bl	8000430 <SendMessage>
		//GPIOC->BSRR |= GPIO_BSRR_BS14;
		state = 0;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <ProcessSlaveModbusMessageReceptionRTUFSM+0x174>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]

		break;
 8000816:	e002      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>
		break;
 8000818:	bf00      	nop
 800081a:	e000      	b.n	800081e <ProcessSlaveModbusMessageReceptionRTUFSM+0x16a>
		break;
 800081c:	bf00      	nop

	}

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000046 	.word	0x20000046
 800082c:	20000042 	.word	0x20000042
 8000830:	20000040 	.word	0x20000040
 8000834:	2000024c 	.word	0x2000024c
 8000838:	40020800 	.word	0x40020800
 800083c:	2000025f 	.word	0x2000025f
 8000840:	e000e010 	.word	0xe000e010
 8000844:	000176ff 	.word	0x000176ff
 8000848:	2000014c 	.word	0x2000014c
 800084c:	20000044 	.word	0x20000044
 8000850:	20000148 	.word	0x20000148

08000854 <ProcessMessageGenerationSlaveModbusRTUFSM>:

void ProcessMessageGenerationSlaveModbusRTUFSM (void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

	if (stateMessageGenSlave != _stateMessageGenSlave) entryMessageGenSlave = 1; else entryMessageGenSlave = 0;
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <ProcessMessageGenerationSlaveModbusRTUFSM+0x11c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d003      	beq.n	800086e <ProcessMessageGenerationSlaveModbusRTUFSM+0x1a>
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <ProcessMessageGenerationSlaveModbusRTUFSM+0x120>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e002      	b.n	8000874 <ProcessMessageGenerationSlaveModbusRTUFSM+0x20>
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <ProcessMessageGenerationSlaveModbusRTUFSM+0x120>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

	_stateMessageGenSlave = stateMessageGenSlave;
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <ProcessMessageGenerationSlaveModbusRTUFSM+0x11c>)
 800087a:	701a      	strb	r2, [r3, #0]

	switch (stateMessageGenSlave){
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d04f      	beq.n	8000924 <ProcessMessageGenerationSlaveModbusRTUFSM+0xd0>
 8000884:	2b02      	cmp	r3, #2
 8000886:	dc6d      	bgt.n	8000964 <ProcessMessageGenerationSlaveModbusRTUFSM+0x110>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <ProcessMessageGenerationSlaveModbusRTUFSM+0x3e>
 800088c:	2b01      	cmp	r3, #1
 800088e:	d00a      	beq.n	80008a6 <ProcessMessageGenerationSlaveModbusRTUFSM+0x52>

		stateMessageGenSlave = 0;
		break;

	}
}
 8000890:	e068      	b.n	8000964 <ProcessMessageGenerationSlaveModbusRTUFSM+0x110>
		if (GetMessage(ModbusMessageReceived)){
 8000892:	201b      	movs	r0, #27
 8000894:	f7ff fe06 	bl	80004a4 <GetMessage>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d05d      	beq.n	800095a <ProcessMessageGenerationSlaveModbusRTUFSM+0x106>
			stateMessageGenSlave = 1;
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
			break;
 80008a4:	e059      	b.n	800095a <ProcessMessageGenerationSlaveModbusRTUFSM+0x106>
		if (ModbusData[1] == 0x05){
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d157      	bne.n	800095e <ProcessMessageGenerationSlaveModbusRTUFSM+0x10a>
			if (ModbusData[3] == 0x50){
 80008ae:	4b32      	ldr	r3, [pc, #200]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	2b50      	cmp	r3, #80	; 0x50
 80008b4:	d153      	bne.n	800095e <ProcessMessageGenerationSlaveModbusRTUFSM+0x10a>
				if (ModbusData[4] == 0xff){
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	2bff      	cmp	r3, #255	; 0xff
 80008bc:	d113      	bne.n	80008e6 <ProcessMessageGenerationSlaveModbusRTUFSM+0x92>
					for (uint8_t i = 0; i < CurrentItemOfBuf; i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	e008      	b.n	80008d6 <ProcessMessageGenerationSlaveModbusRTUFSM+0x82>
						ModbusSendData[i] = ModbusData[i];
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	492b      	ldr	r1, [pc, #172]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 80008ca:	5c89      	ldrb	r1, [r1, r2]
 80008cc:	4a2b      	ldr	r2, [pc, #172]	; (800097c <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>)
 80008ce:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < CurrentItemOfBuf; i++){
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	3301      	adds	r3, #1
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d3f1      	bcc.n	80008c4 <ProcessMessageGenerationSlaveModbusRTUFSM+0x70>
					stateMessageGenSlave = 2;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	701a      	strb	r2, [r3, #0]
				if (ModbusData[4] == 0x00){
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d139      	bne.n	8000962 <ProcessMessageGenerationSlaveModbusRTUFSM+0x10e>
					GPIOC->BSRR |= GPIO_BSRR_BS13;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <ProcessMessageGenerationSlaveModbusRTUFSM+0x130>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a24      	ldr	r2, [pc, #144]	; (8000984 <ProcessMessageGenerationSlaveModbusRTUFSM+0x130>)
 80008f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f8:	6193      	str	r3, [r2, #24]
					for (uint8_t i = 0; i < CurrentItemOfBuf; i++){
 80008fa:	2300      	movs	r3, #0
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	e008      	b.n	8000912 <ProcessMessageGenerationSlaveModbusRTUFSM+0xbe>
						ModbusSendData[i] = ModbusData[i];
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	491c      	ldr	r1, [pc, #112]	; (8000978 <ProcessMessageGenerationSlaveModbusRTUFSM+0x124>)
 8000906:	5c89      	ldrb	r1, [r1, r2]
 8000908:	4a1c      	ldr	r2, [pc, #112]	; (800097c <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>)
 800090a:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < CurrentItemOfBuf; i++){
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	3301      	adds	r3, #1
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3f1      	bcc.n	8000900 <ProcessMessageGenerationSlaveModbusRTUFSM+0xac>
					stateMessageGenSlave = 2;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 800091e:	2202      	movs	r2, #2
 8000920:	701a      	strb	r2, [r3, #0]
				break;
 8000922:	e01e      	b.n	8000962 <ProcessMessageGenerationSlaveModbusRTUFSM+0x10e>
		for(uint8_t i = 0; i < CurrentItemOfBuf; ){
 8000924:	2300      	movs	r3, #0
 8000926:	717b      	strb	r3, [r7, #5]
 8000928:	e00e      	b.n	8000948 <ProcessMessageGenerationSlaveModbusRTUFSM+0xf4>
			while (!(USART->SR & USART_SR_TC));
 800092a:	bf00      	nop
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <ProcessMessageGenerationSlaveModbusRTUFSM+0x134>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0f9      	beq.n	800092c <ProcessMessageGenerationSlaveModbusRTUFSM+0xd8>
				USART->DR = ModbusSendData[i];
 8000938:	797b      	ldrb	r3, [r7, #5]
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <ProcessMessageGenerationSlaveModbusRTUFSM+0x128>)
 800093c:	5cd2      	ldrb	r2, [r2, r3]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <ProcessMessageGenerationSlaveModbusRTUFSM+0x134>)
 8000940:	605a      	str	r2, [r3, #4]
				i++;
 8000942:	797b      	ldrb	r3, [r7, #5]
 8000944:	3301      	adds	r3, #1
 8000946:	717b      	strb	r3, [r7, #5]
		for(uint8_t i = 0; i < CurrentItemOfBuf; ){
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <ProcessMessageGenerationSlaveModbusRTUFSM+0x12c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	797a      	ldrb	r2, [r7, #5]
 800094e:	429a      	cmp	r2, r3
 8000950:	d3eb      	bcc.n	800092a <ProcessMessageGenerationSlaveModbusRTUFSM+0xd6>
		stateMessageGenSlave = 0;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <ProcessMessageGenerationSlaveModbusRTUFSM+0x118>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
		break;
 8000958:	e004      	b.n	8000964 <ProcessMessageGenerationSlaveModbusRTUFSM+0x110>
			break;
 800095a:	bf00      	nop
 800095c:	e002      	b.n	8000964 <ProcessMessageGenerationSlaveModbusRTUFSM+0x110>
		break;
 800095e:	bf00      	nop
 8000960:	e000      	b.n	8000964 <ProcessMessageGenerationSlaveModbusRTUFSM+0x110>
				break;
 8000962:	bf00      	nop
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000047 	.word	0x20000047
 8000970:	20000041 	.word	0x20000041
 8000974:	2000024d 	.word	0x2000024d
 8000978:	2000014c 	.word	0x2000014c
 800097c:	20000048 	.word	0x20000048
 8000980:	2000024c 	.word	0x2000024c
 8000984:	40020800 	.word	0x40020800
 8000988:	40011400 	.word	0x40011400

0800098c <USART6_IRQHandler>:
	ProcessMessageGenerationSlaveModbusRTUFSM();

}


void USART6_IRQHandler (void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	if (USART6->SR & USART_SR_RXNE){
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <USART6_IRQHandler+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	2b00      	cmp	r3, #0
 800099a:	d019      	beq.n	80009d0 <USART6_IRQHandler+0x44>
//		SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
		SysTick->LOAD = 150000;									// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 1 мс.
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <USART6_IRQHandler+0x60>)
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <USART6_IRQHandler+0x64>)
 80009a0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 150000;									// Обнуляем таймер и флаги.
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <USART6_IRQHandler+0x60>)
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <USART6_IRQHandler+0x64>)
 80009a6:	609a      	str	r2, [r3, #8]
		SysTickHandlerState = 1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <USART6_IRQHandler+0x68>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <USART6_IRQHandler+0x5c>)
 80009b0:	6859      	ldr	r1, [r3, #4]
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <USART6_IRQHandler+0x6c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <USART6_IRQHandler+0x70>)
 80009bc:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <USART6_IRQHandler+0x6c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <USART6_IRQHandler+0x6c>)
 80009c8:	701a      	strb	r2, [r3, #0]
		SendMessage(ModbusReciveSymbol);
 80009ca:	2016      	movs	r0, #22
 80009cc:	f7ff fd30 	bl	8000430 <SendMessage>
		state = 2;
		GPIOC->BSRR |= GPIO_BSRR_BS13;
		USART->SR;
	}
*/
	if (USART->SR & USART_SR_ORE){
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <USART6_IRQHandler+0x5c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <USART6_IRQHandler+0x56>
		state = 4;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <USART6_IRQHandler+0x74>)
 80009de:	2204      	movs	r2, #4
 80009e0:	701a      	strb	r2, [r3, #0]
	}

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40011400 	.word	0x40011400
 80009ec:	e000e010 	.word	0xe000e010
 80009f0:	000249f0 	.word	0x000249f0
 80009f4:	2000025f 	.word	0x2000025f
 80009f8:	2000024c 	.word	0x2000024c
 80009fc:	2000014c 	.word	0x2000014c
 8000a00:	20000046 	.word	0x20000046

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4906      	ldr	r1, [pc, #24]	; (8000a38 <__NVIC_EnableIRQ+0x34>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000a40:	4b4e      	ldr	r3, [pc, #312]	; (8000b7c <InitRCC+0x140>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a4d      	ldr	r2, [pc, #308]	; (8000b7c <InitRCC+0x140>)
 8000a46:	f023 030f 	bic.w	r3, r3, #15
 8000a4a:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <InitRCC+0x140>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a4a      	ldr	r2, [pc, #296]	; (8000b7c <InitRCC+0x140>)
 8000a52:	f043 0303 	orr.w	r3, r3, #3
 8000a56:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 8000a58:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <InitRCC+0x144>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <InitRCC+0x144>)
 8000a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a62:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <InitRCC+0x148>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a46      	ldr	r2, [pc, #280]	; (8000b84 <InitRCC+0x148>)
 8000a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6e:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 8000a70:	bf00      	nop
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <InitRCC+0x148>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f9      	beq.n	8000a72 <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <InitRCC+0x148>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4a40      	ldr	r2, [pc, #256]	; (8000b84 <InitRCC+0x148>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a88:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <InitRCC+0x148>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	; (8000b84 <InitRCC+0x148>)
 8000a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a94:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <InitRCC+0x148>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <InitRCC+0x148>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <InitRCC+0x148>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <InitRCC+0x148>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <InitRCC+0x148>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4a34      	ldr	r2, [pc, #208]	; (8000b84 <InitRCC+0x148>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <InitRCC+0x148>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <InitRCC+0x148>)
 8000ac0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ac8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <InitRCC+0x148>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <InitRCC+0x148>)
 8000ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <InitRCC+0x148>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <InitRCC+0x148>)
 8000adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae0:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <InitRCC+0x148>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <InitRCC+0x148>)
 8000ae8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000aec:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <InitRCC+0x148>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <InitRCC+0x148>)
 8000af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af8:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 8000afa:	bf00      	nop
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <InitRCC+0x148>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f9      	beq.n	8000afc <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <InitRCC+0x148>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <InitRCC+0x148>)
 8000b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b12:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <InitRCC+0x148>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <InitRCC+0x148>)
 8000b1a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000b1e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <InitRCC+0x148>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <InitRCC+0x148>)
 8000b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b2a:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <InitRCC+0x148>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <InitRCC+0x148>)
 8000b32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b36:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <InitRCC+0x148>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <InitRCC+0x148>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <InitRCC+0x148>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <InitRCC+0x148>)
 8000b46:	f023 0303 	bic.w	r3, r3, #3
 8000b4a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <InitRCC+0x148>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <InitRCC+0x148>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 8000b58:	bf00      	nop
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <InitRCC+0x148>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d1f9      	bne.n	8000b5a <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <InitRCC+0x148>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <InitRCC+0x148>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 8000b72:	f7ff fb5f 	bl	8000234 <SystemCoreClockUpdate>

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00
 8000b80:	40007000 	.word	0x40007000
 8000b84:	40023800 	.word	0x40023800

08000b88 <UpdateNVICActiveAndPriority>:

void UpdateNVICActiveAndPriority (void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8c:	b662      	cpsie	i
}
 8000b8e:	bf00      	nop

//	__NVIC_SetPriorityGrouping(3);									// 16 групп прерываний и 16 подгрупп
//	__NVIC_SetPriority(IRQModbus, NVIC_EncodePriority(0, 0, 1));	// Устанавливаем Modbus прерывание в первую группу, первым приоритетом

	__enable_irq();
	__NVIC_EnableIRQ(IRQModbus);									// Разрешаем прерывания от USART
 8000b90:	2047      	movs	r0, #71	; 0x47
 8000b92:	f7ff ff37 	bl	8000a04 <__NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <InitGPIO>:

void InitGPIO (void){
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <InitGPIO+0xb4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a2a      	ldr	r2, [pc, #168]	; (8000c50 <InitGPIO+0xb4>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <InitGPIO+0xb4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <InitGPIO+0xb4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <InitGPIO+0xb8>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <InitGPIO+0xb8>)
 8000bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bc2:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <InitGPIO+0xb8>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <InitGPIO+0xb8>)
 8000bca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000bce:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <InitGPIO+0xb8>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <InitGPIO+0xb8>)
 8000bd6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000bda:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <InitGPIO+0xb8>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <InitGPIO+0xb8>)
 8000be2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000be6:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <InitGPIO+0xb8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <InitGPIO+0xb8>)
 8000bee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000bf2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <InitGPIO+0xb8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <InitGPIO+0xb8>)
 8000bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bfe:	6013      	str	r3, [r2, #0]

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT14;						// Настройка порта PC14 на выход push-pull
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <InitGPIO+0xb8>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <InitGPIO+0xb8>)
 8000c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c0a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <InitGPIO+0xb8>)
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <InitGPIO+0xb8>)
 8000c12:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c16:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <InitGPIO+0xb8>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <InitGPIO+0xb8>)
 8000c1e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c22:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <InitGPIO+0xb8>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <InitGPIO+0xb8>)
 8000c2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c2e:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <InitGPIO+0xb8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <InitGPIO+0xb8>)
 8000c36:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c3a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <InitGPIO+0xb8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <InitGPIO+0xb8>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6013      	str	r3, [r2, #0]

}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800

08000c58 <InitHardwareTimer>:

uint8_t SysTickHandlerState;					// Переменная состаяния обработчика прерывания системного таймера для работы с Modbus

/*************************	 Code	*************************/

void InitHardwareTimer (void){
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

	SysTickHandlerState = 0;					// Обработчик прерывания системного таймера в состоянии 0
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <InitHardwareTimer+0x24>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

	SysTick->LOAD = 95999;						// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 1 мс.
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <InitHardwareTimer+0x28>)
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <InitHardwareTimer+0x2c>)
 8000c66:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 95999;						// Обнуляем таймер и флаги.
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <InitHardwareTimer+0x28>)
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <InitHardwareTimer+0x2c>)
 8000c6c:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <InitHardwareTimer+0x28>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk |
					SysTick_CTRL_ENABLE_Msk;

}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	2000025f 	.word	0x2000025f
 8000c80:	e000e010 	.word	0xe000e010
 8000c84:	000176ff 	.word	0x000176ff

08000c88 <SysTick_Handler>:

void SysTick_Handler(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

	switch (SysTickHandlerState){
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <SysTick_Handler+0x58>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <SysTick_Handler+0x14>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d017      	beq.n	8000cca <SysTick_Handler+0x42>
		SysTickHandlerState = 0;
		break;

	}

}
 8000c9a:	e01d      	b.n	8000cd8 <SysTick_Handler+0x50>
		for(uint8_t i = 0; i < MaxGTimers; i++){
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Handler+0x3a>
			if (GTimerState[i] == TimerRunning){
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <SysTick_Handler+0x5c>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d107      	bne.n	8000cbc <SysTick_Handler+0x34>
				GTimerVal[i]++;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <SysTick_Handler+0x60>)
 8000cb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <SysTick_Handler+0x60>)
 8000cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < MaxGTimers; i++){
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d9ec      	bls.n	8000ca2 <SysTick_Handler+0x1a>
		break;
 8000cc8:	e006      	b.n	8000cd8 <SysTick_Handler+0x50>
		SendMessage(ModbusRTUTimeOut);
 8000cca:	2017      	movs	r0, #23
 8000ccc:	f7ff fbb0 	bl	8000430 <SendMessage>
		SysTickHandlerState = 0;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SysTick_Handler+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		break;
 8000cd6:	bf00      	nop
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000025f 	.word	0x2000025f
 8000ce4:	2000025c 	.word	0x2000025c
 8000ce8:	20000250 	.word	0x20000250

08000cec <InitGTimer>:


void InitGTimer(void){
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0

	uint8_t i;

	for (i = 0; i < MaxGTimers; i++){
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	e006      	b.n	8000d06 <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <InitGTimer+0x2c>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MaxGTimers; i++){
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	3301      	adds	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d9f5      	bls.n	8000cf8 <InitGTimer+0xc>
	}

}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	2000025c 	.word	0x2000025c

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d22:	e003      	b.n	8000d2c <LoopCopyDataInit>

08000d24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d2a:	3104      	adds	r1, #4

08000d2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d34:	d3f6      	bcc.n	8000d24 <CopyDataInit>
  ldr  r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d38:	e002      	b.n	8000d40 <LoopFillZerobss>

08000d3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d3c:	f842 3b04 	str.w	r3, [r2], #4

08000d40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d44:	d3f9      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d46:	f7ff fa47 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f000 f811 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fb2d 	bl	80003ac <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d58:	08000fe8 	.word	0x08000fe8
  ldr  r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d60:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000d64:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000d68:	20000260 	.word	0x20000260

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4d0d      	ldr	r5, [pc, #52]	; (8000da8 <__libc_init_array+0x38>)
 8000d74:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d76:	1b64      	subs	r4, r4, r5
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	2600      	movs	r6, #0
 8000d7c:	42a6      	cmp	r6, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	4d0b      	ldr	r5, [pc, #44]	; (8000db0 <__libc_init_array+0x40>)
 8000d82:	4c0c      	ldr	r4, [pc, #48]	; (8000db4 <__libc_init_array+0x44>)
 8000d84:	f000 f818 	bl	8000db8 <_init>
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	10a4      	asrs	r4, r4, #2
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	42a6      	cmp	r6, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d98:	4798      	blx	r3
 8000d9a:	3601      	adds	r6, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da2:	4798      	blx	r3
 8000da4:	3601      	adds	r6, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08000fe0 	.word	0x08000fe0
 8000dac:	08000fe0 	.word	0x08000fe0
 8000db0:	08000fe0 	.word	0x08000fe0
 8000db4:	08000fe4 	.word	0x08000fe4

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
