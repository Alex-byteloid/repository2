
My Libraries.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000784  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800091c  0800091c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  20000004  08000938  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002a8  08000938  000202a8  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001cb5  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000008a9  00000000  00000000  00021ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001a8  00000000  00000000  00022590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000130  00000000  00000000  00022738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000e2ab  00000000  00000000  00022868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000282e  00000000  00000000  00030b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0005021a  00000000  00000000  00033341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0008355b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000464  00000000  00000000  000835b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000904 	.word	0x08000904

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000904 	.word	0x08000904

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x50>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <SystemInit+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <SystemInit+0x50>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x50>)
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x50>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x54>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <SystemInit+0x50>)
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
 8000242:	2302      	movs	r3, #2
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 030c 	and.w	r3, r3, #12
 8000256:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b08      	cmp	r3, #8
 800025c:	d011      	beq.n	8000282 <SystemCoreClockUpdate+0x4e>
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2b08      	cmp	r3, #8
 8000262:	d844      	bhi.n	80002ee <SystemCoreClockUpdate+0xba>
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <SystemCoreClockUpdate+0x3e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d004      	beq.n	800027a <SystemCoreClockUpdate+0x46>
 8000270:	e03d      	b.n	80002ee <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e03d      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	; (800032c <SystemCoreClockUpdate+0xf8>)
 800027e:	601a      	str	r2, [r3, #0]
      break;
 8000280:	e039      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	0d9b      	lsrs	r3, r3, #22
 8000288:	f003 0301 	and.w	r3, r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <SystemCoreClockUpdate+0xec>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000296:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xf8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002a8:	6852      	ldr	r2, [r2, #4]
 80002aa:	0992      	lsrs	r2, r2, #6
 80002ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002b0:	fb02 f303 	mul.w	r3, r2, r3
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	e00b      	b.n	80002d0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	4a17      	ldr	r2, [pc, #92]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	0992      	lsrs	r2, r2, #6
 80002c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	3301      	adds	r3, #1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002ea:	6013      	str	r3, [r2, #0]
      break;
 80002ec:	e003      	b.n	80002f6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xf4>)
 80002f2:	601a      	str	r2, [r3, #0]
      break;
 80002f4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <SystemCoreClockUpdate+0xec>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xfc>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	fa22 f303 	lsr.w	r3, r2, r3
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <SystemCoreClockUpdate+0xf0>)
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	371c      	adds	r7, #28
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	20000000 	.word	0x20000000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	017d7840 	.word	0x017d7840
 8000330:	0800091c 	.word	0x0800091c

08000334 <ProcessLedFSM>:
	state = _state = 0;
	entry = 0;

}

void ProcessLedFSM (void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	if (state != _state) entry = 1; else entry = 0;
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <ProcessLedFSM+0xcc>)
 800033a:	781a      	ldrb	r2, [r3, #0]
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <ProcessLedFSM+0xd0>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d003      	beq.n	800034c <ProcessLedFSM+0x18>
 8000344:	4b30      	ldr	r3, [pc, #192]	; (8000408 <ProcessLedFSM+0xd4>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e002      	b.n	8000352 <ProcessLedFSM+0x1e>
 800034c:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <ProcessLedFSM+0xd4>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]

	_state = state;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <ProcessLedFSM+0xcc>)
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <ProcessLedFSM+0xd0>)
 8000358:	701a      	strb	r2, [r3, #0]

	switch (state){
 800035a:	4b29      	ldr	r3, [pc, #164]	; (8000400 <ProcessLedFSM+0xcc>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d02b      	beq.n	80003ba <ProcessLedFSM+0x86>
 8000362:	2b02      	cmp	r3, #2
 8000364:	dc49      	bgt.n	80003fa <ProcessLedFSM+0xc6>
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <ProcessLedFSM+0x3c>
 800036a:	2b01      	cmp	r3, #1
 800036c:	d00a      	beq.n	8000384 <ProcessLedFSM+0x50>
			StopGTimer(GTimer1);
		}
		break;
	}

}
 800036e:	e044      	b.n	80003fa <ProcessLedFSM+0xc6>
		if (GetMessage(LedOnMsg)){
 8000370:	2000      	movs	r0, #0
 8000372:	f000 f8bb 	bl	80004ec <GetMessage>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d039      	beq.n	80003f0 <ProcessLedFSM+0xbc>
			state = 1;
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <ProcessLedFSM+0xcc>)
 800037e:	2201      	movs	r2, #1
 8000380:	701a      	strb	r2, [r3, #0]
		break;
 8000382:	e035      	b.n	80003f0 <ProcessLedFSM+0xbc>
		if (entry == 1){
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <ProcessLedFSM+0xd4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d108      	bne.n	800039e <ProcessLedFSM+0x6a>
			GPIOC->BSRR |= GPIO_BSRR_BS13;
 800038c:	4b1f      	ldr	r3, [pc, #124]	; (800040c <ProcessLedFSM+0xd8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a1e      	ldr	r2, [pc, #120]	; (800040c <ProcessLedFSM+0xd8>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000396:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer1);
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fa29 	bl	80007f0 <StartGTimer>
		if (GetGTimerVal(GTimer1) >= 1000){
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fa52 	bl	8000848 <GetGTimerVal>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003aa:	d323      	bcc.n	80003f4 <ProcessLedFSM+0xc0>
			state = 2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <ProcessLedFSM+0xcc>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 fa38 	bl	8000828 <StopGTimer>
		break;
 80003b8:	e01c      	b.n	80003f4 <ProcessLedFSM+0xc0>
		if (entry == 1){
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <ProcessLedFSM+0xd4>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d108      	bne.n	80003d4 <ProcessLedFSM+0xa0>
			GPIOC->BSRR |= GPIO_BSRR_BR13;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <ProcessLedFSM+0xd8>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a11      	ldr	r2, [pc, #68]	; (800040c <ProcessLedFSM+0xd8>)
 80003c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80003cc:	6193      	str	r3, [r2, #24]
			StartGTimer(GTimer1);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fa0e 	bl	80007f0 <StartGTimer>
		if (GetGTimerVal(GTimer1) >= 1000){
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fa37 	bl	8000848 <GetGTimerVal>
 80003da:	4603      	mov	r3, r0
 80003dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003e0:	d30a      	bcc.n	80003f8 <ProcessLedFSM+0xc4>
			state = 1;
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <ProcessLedFSM+0xcc>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
			StopGTimer(GTimer1);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fa1d 	bl	8000828 <StopGTimer>
		break;
 80003ee:	e003      	b.n	80003f8 <ProcessLedFSM+0xc4>
		break;
 80003f0:	bf00      	nop
 80003f2:	e002      	b.n	80003fa <ProcessLedFSM+0xc6>
		break;
 80003f4:	bf00      	nop
 80003f6:	e000      	b.n	80003fa <ProcessLedFSM+0xc6>
		break;
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000022 	.word	0x20000022
 8000404:	20000021 	.word	0x20000021
 8000408:	20000020 	.word	0x20000020
 800040c:	40020800 	.word	0x40020800

08000410 <main>:


/*************************	 Code	*************************/


int main (void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

	InitGPIO();
 8000414:	f000 f962 	bl	80006dc <InitGPIO>
	InitRCC();
 8000418:	f000 f8ba 	bl	8000590 <InitRCC>
	InitGTimer();
 800041c:	f000 f9d0 	bl	80007c0 <InitGTimer>
//	UpdateNVICActiveAndPriority();
	InitHardwareTimer();
 8000420:	f000 f996 	bl	8000750 <InitHardwareTimer>
	InitMessage();
 8000424:	f000 f808 	bl	8000438 <InitMessage>
//	InitModbusFSM(Baud9600, ParityControlOff, TwoStopBit, RTUMode);
//	GPIOC->BSRR |= GPIO_BSRR_BR14;
	SendMessage(LedOnMsg);
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f81f 	bl	800046c <SendMessage>

	while(1){

//		ProcessModbusSlaveFSM();
		ProcessLedFSM();
 800042e:	f7ff ff81 	bl	8000334 <ProcessLedFSM>
		ProcessMessage();
 8000432:	f000 f831 	bl	8000498 <ProcessMessage>
		ProcessLedFSM();
 8000436:	e7fa      	b.n	800042e <main+0x1e>

08000438 <InitMessage>:

char Messages[MaxNumbMessages];

/*************************	 Code	*************************/

void InitMessage (void){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0

	int i;

	for (i = 0; i < MaxNumbMessages; i++){
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e007      	b.n	8000454 <InitMessage+0x1c>
		Messages[i] = '0';
 8000444:	4a08      	ldr	r2, [pc, #32]	; (8000468 <InitMessage+0x30>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	2230      	movs	r2, #48	; 0x30
 800044c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MaxNumbMessages; i++){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b63      	cmp	r3, #99	; 0x63
 8000458:	ddf4      	ble.n	8000444 <InitMessage+0xc>
	}
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000024 	.word	0x20000024

0800046c <SendMessage>:

void SendMessage (int Msg){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	if (Messages[Msg] == '0'){
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <SendMessage+0x28>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b30      	cmp	r3, #48	; 0x30
 800047e:	d104      	bne.n	800048a <SendMessage+0x1e>

		Messages[Msg] = '1';
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <SendMessage+0x28>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	2231      	movs	r2, #49	; 0x31
 8000488:	701a      	strb	r2, [r3, #0]
	}
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000024 	.word	0x20000024

08000498 <ProcessMessage>:

void ProcessMessage (void){
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < MaxNumbMessages; i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	e018      	b.n	80004d6 <ProcessMessage+0x3e>

		if(Messages[i] == '2')Messages[i]='0';
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <ProcessMessage+0x50>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b32      	cmp	r3, #50	; 0x32
 80004ae:	d104      	bne.n	80004ba <ProcessMessage+0x22>
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <ProcessMessage+0x50>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	2230      	movs	r2, #48	; 0x30
 80004b8:	701a      	strb	r2, [r3, #0]
		if(Messages[i] == '1')Messages[i]='2';
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <ProcessMessage+0x50>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b31      	cmp	r3, #49	; 0x31
 80004c4:	d104      	bne.n	80004d0 <ProcessMessage+0x38>
 80004c6:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <ProcessMessage+0x50>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	2232      	movs	r2, #50	; 0x32
 80004ce:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MaxNumbMessages; i++){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3301      	adds	r3, #1
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b63      	cmp	r3, #99	; 0x63
 80004da:	dde3      	ble.n	80004a4 <ProcessMessage+0xc>
	}
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	20000024 	.word	0x20000024

080004ec <GetMessage>:

uint8_t GetMessage (int Msg){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

	if(Messages[Msg] == '2'){
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <GetMessage+0x30>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b32      	cmp	r3, #50	; 0x32
 80004fe:	d106      	bne.n	800050e <GetMessage+0x22>
		Messages[Msg] = '0';
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <GetMessage+0x30>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	701a      	strb	r2, [r3, #0]
		return 1;
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <GetMessage+0x24>
	}
	return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000024 	.word	0x20000024

08000520 <USART6_IRQHandler>:
	ProcessMessageGenerationSlaveModbusRTUFSM();

}


void USART6_IRQHandler (void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

	if (USART->SR & USART_SR_RXNE){
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <USART6_IRQHandler+0x5c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0320 	and.w	r3, r3, #32
 800052c:	2b00      	cmp	r3, #0
 800052e:	d018      	beq.n	8000562 <USART6_IRQHandler+0x42>
//		SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
		SysTick->LOAD = 29999;									// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 1 мс.
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <USART6_IRQHandler+0x60>)
 8000532:	f247 522f 	movw	r2, #29999	; 0x752f
 8000536:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 29999;									// Обнуляем таймер и флаги.
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <USART6_IRQHandler+0x60>)
 800053a:	f247 522f 	movw	r2, #29999	; 0x752f
 800053e:	609a      	str	r2, [r3, #8]
//		SysTickHandlerState = 1;
		ModbusData[CurrentItemOfBuf] = USART->DR;				// Помещаем содержимое регистра данных USART  буфер сообщения Modbus
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <USART6_IRQHandler+0x5c>)
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <USART6_IRQHandler+0x64>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	b2c9      	uxtb	r1, r1
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <USART6_IRQHandler+0x68>)
 800054e:	5499      	strb	r1, [r3, r2]
		CurrentItemOfBuf++;										// Инкрементируем указатель на текущий элемент буфера
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <USART6_IRQHandler+0x64>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <USART6_IRQHandler+0x64>)
 800055a:	701a      	strb	r2, [r3, #0]
		state = 1;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <USART6_IRQHandler+0x6c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
//		SysTick->CTRL = SysTick_CTRL_TICKINT_Msk;
//		state = 2;
		USART->SR;
	}
*/
	if (USART->SR & USART_SR_ORE){
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <USART6_IRQHandler+0x5c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <USART6_IRQHandler+0x54>
		state = 4;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <USART6_IRQHandler+0x6c>)
 8000570:	2204      	movs	r2, #4
 8000572:	701a      	strb	r2, [r3, #0]
	}

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40011400 	.word	0x40011400
 8000580:	e000e010 	.word	0xe000e010
 8000584:	20000294 	.word	0x20000294
 8000588:	20000194 	.word	0x20000194
 800058c:	20000022 	.word	0x20000022

08000590 <InitRCC>:



/*************************	 Code	*************************/

void InitRCC (void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	/*Функция настройки тактовой частоты системной шины процессора на 96 MHz*/

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000594:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <InitRCC+0x140>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a4d      	ldr	r2, [pc, #308]	; (80006d0 <InitRCC+0x140>)
 800059a:	f023 030f 	bic.w	r3, r3, #15
 800059e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_3WS;					// Настройка задержки чтения флеш памяти в зависимости от частоты МК
 80005a0:	4b4b      	ldr	r3, [pc, #300]	; (80006d0 <InitRCC+0x140>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <InitRCC+0x140>)
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	6013      	str	r3, [r2, #0]

	PWR->CR |= PWR_CR_VOS;									// Настройка внутреннего регулятора напряжения на режим 1 (Scale 1)
 80005ac:	4b49      	ldr	r3, [pc, #292]	; (80006d4 <InitRCC+0x144>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a48      	ldr	r2, [pc, #288]	; (80006d4 <InitRCC+0x144>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;								// Включение HSE
 80005b8:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <InitRCC+0x148>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a46      	ldr	r2, [pc, #280]	; (80006d8 <InitRCC+0x148>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));						// Ожидание готовности HSE
 80005c4:	bf00      	nop
 80005c6:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <InitRCC+0x148>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <InitRCC+0x36>

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;					// Выбор генератора HSE в качестве источника тактирования PLL
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <InitRCC+0x148>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4a40      	ldr	r2, [pc, #256]	; (80006d8 <InitRCC+0x148>)
 80005d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005dc:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;						// Обнуляем регистр делителя PLL
 80005de:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <InitRCC+0x148>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4a3d      	ldr	r2, [pc, #244]	; (80006d8 <InitRCC+0x148>)
 80005e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005e8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;						// Значение делителя PLL равно 25 (PLLM = 25)
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <InitRCC+0x148>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a3a      	ldr	r2, [pc, #232]	; (80006d8 <InitRCC+0x148>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 80005f6:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <InitRCC+0x148>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a37      	ldr	r2, [pc, #220]	; (80006d8 <InitRCC+0x148>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_4;
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <InitRCC+0x148>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <InitRCC+0x148>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;						// Обнуляем регистр множителя PLL
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <InitRCC+0x148>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4a31      	ldr	r2, [pc, #196]	; (80006d8 <InitRCC+0x148>)
 8000614:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800061c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_6;						// Значение множителя PLL равно 192
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <InitRCC+0x148>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4a2d      	ldr	r2, [pc, #180]	; (80006d8 <InitRCC+0x148>)
 8000624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000628:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_7;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <InitRCC+0x148>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <InitRCC+0x148>)
 8000630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000634:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;						// Обнуляем регист делителя на выходе PLL, значение делителя на выходе равно 2
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <InitRCC+0x148>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <InitRCC+0x148>)
 800063c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000640:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// Включаем модуль PLL
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <InitRCC+0x148>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <InitRCC+0x148>)
 8000648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800064c:	6013      	str	r3, [r2, #0]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0);					// Ожидание готовности модуля PLL
 800064e:	bf00      	nop
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <InitRCC+0x148>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f9      	beq.n	8000650 <InitRCC+0xc0>

	RCC->CFGR &= ~RCC_CFGR_HPRE;							// Частота шины AHB = 96 MHz
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <InitRCC+0x148>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <InitRCC+0x148>)
 8000662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000666:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <InitRCC+0x148>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <InitRCC+0x148>)
 800066e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000672:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;						// Частота шины APB1 = 48 MHz
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <InitRCC+0x148>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <InitRCC+0x148>)
 800067a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800067e:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <InitRCC+0x148>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <InitRCC+0x148>)
 8000686:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800068a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;						// Частота шины APB2 = 96 MHz
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <InitRCC+0x148>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <InitRCC+0x148>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_SW;								// Обнуляем регистр выбора источника тактирования системной шины
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <InitRCC+0x148>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <InitRCC+0x148>)
 800069a:	f023 0303 	bic.w	r3, r3, #3
 800069e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;							// Выбираем в качестве источника тактирования системной шины PLL
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <InitRCC+0x148>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <InitRCC+0x148>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Ожидание установки модуля PLL в качестве источника частоты сист. шины
 80006ac:	bf00      	nop
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <InitRCC+0x148>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f003 030c 	and.w	r3, r3, #12
 80006b6:	2b08      	cmp	r3, #8
 80006b8:	d1f9      	bne.n	80006ae <InitRCC+0x11e>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;						// Вкдючение тактирования Power interface
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <InitRCC+0x148>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <InitRCC+0x148>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40

	SystemCoreClockUpdate();
 80006c6:	f7ff fdb5 	bl	8000234 <SystemCoreClockUpdate>

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023c00 	.word	0x40023c00
 80006d4:	40007000 	.word	0x40007000
 80006d8:	40023800 	.word	0x40023800

080006dc <InitGPIO>:
	__enable_irq();
	__NVIC_EnableIRQ(IRQModbus);									// Разрешаем прерывания от USART

}

void InitGPIO (void){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;					// Включение тактирования порта ввода-вывода C
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <InitGPIO+0x6c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <InitGPIO+0x6c>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;					// Включение тактирования порта ввода-вывода B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;					// Включение тактирования порта ввода-вывода A
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <InitGPIO+0x6c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a15      	ldr	r2, [pc, #84]	; (8000748 <InitGPIO+0x6c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->OTYPER &= ~GPIO_OTYPER_OT13;						// Настройка порта PC13 на выход push-pull
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <InitGPIO+0x70>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <InitGPIO+0x70>)
 80006fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000702:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <InitGPIO+0x70>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <InitGPIO+0x70>)
 800070a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800070e:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13;				// Настройка на высокую выходную скорость
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <InitGPIO+0x70>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <InitGPIO+0x70>)
 8000716:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800071a:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;						// No pull, no down (без подтяжки к плюсу или минусу питания)
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <InitGPIO+0x70>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <InitGPIO+0x70>)
 8000722:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000726:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~GPIO_MODER_MODE13;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <InitGPIO+0x70>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <InitGPIO+0x70>)
 800072e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000732:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE13_0;					// Настройка порта PC13 на выход
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <InitGPIO+0x70>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <InitGPIO+0x70>)
 800073a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073e:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14;				// Настройка на высокую выходную скорость
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD14;						// No pull, no down (без подтяжки к плюсу или минусу питания)
	GPIOC->MODER &= ~GPIO_MODER_MODE14;
	GPIOC->MODER |= GPIO_MODER_MODE14_0;					// Настройка порта PC14 на выход
*/
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800

08000750 <InitHardwareTimer>:

//uint8_t SysTickHandlerState;					// Переменная состаяния обработчика прерывания системного таймера для работы с Modbus

/*************************	 Code	*************************/

void InitHardwareTimer (void){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

//	SysTickHandlerState = 0;					// Обработчик прерывания системного таймера в состоянии 0

	SysTick->LOAD = 95999;						// Загрузка значения перезагрузки. При 96 МГц, данное занечение соотвествует прерыванию каждые 1 мс.
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <InitHardwareTimer+0x20>)
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <InitHardwareTimer+0x24>)
 8000758:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 95999;						// Обнуляем таймер и флаги.
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <InitHardwareTimer+0x20>)
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <InitHardwareTimer+0x24>)
 800075e:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <InitHardwareTimer+0x20>)
 8000762:	2207      	movs	r2, #7
 8000764:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_TICKINT_Msk |
					SysTick_CTRL_ENABLE_Msk;

}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010
 8000774:	000176ff 	.word	0x000176ff

08000778 <SysTick_Handler>:

void SysTick_Handler(void){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

//	switch (SysTickHandlerState){

//	case 0:
		for(uint8_t i = 0; i < MaxGTimers; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	e00f      	b.n	80007a4 <SysTick_Handler+0x2c>

			if (GTimerState[i] == TimerRunning){
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <SysTick_Handler+0x40>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d107      	bne.n	800079e <SysTick_Handler+0x26>
				GTimerVal[i]++;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SysTick_Handler+0x44>)
 8000792:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000796:	3201      	adds	r2, #1
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <SysTick_Handler+0x44>)
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < MaxGTimers; i++){
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	3301      	adds	r3, #1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d9ec      	bls.n	8000784 <SysTick_Handler+0xc>
		SendMessage(ModbusRTUTimeOut);
		GPIOC->BSRR |= GPIO_BSRR_BS13;
		break;
	}
*/
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200002a4 	.word	0x200002a4
 80007bc:	20000298 	.word	0x20000298

080007c0 <InitGTimer>:


void InitGTimer(void){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0

	uint8_t i;

	for (i = 0; i < MaxGTimers; i++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	e006      	b.n	80007da <InitGTimer+0x1a>
		GTimerState[i] = TimerStopped;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <InitGTimer+0x2c>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MaxGTimers; i++){
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	3301      	adds	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d9f5      	bls.n	80007cc <InitGTimer+0xc>
	}

}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	200002a4 	.word	0x200002a4

080007f0 <StartGTimer>:

void StartGTimer(uint8_t GTimerID){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]

	if (GTimerState[GTimerID] == TimerStopped){
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <StartGTimer+0x30>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d108      	bne.n	8000816 <StartGTimer+0x26>

		GTimerVal[GTimerID] = 0;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4a07      	ldr	r2, [pc, #28]	; (8000824 <StartGTimer+0x34>)
 8000808:	2100      	movs	r1, #0
 800080a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTimerState[GTimerID] = TimerRunning;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <StartGTimer+0x30>)
 8000812:	2101      	movs	r1, #1
 8000814:	54d1      	strb	r1, [r2, r3]
	}

}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	200002a4 	.word	0x200002a4
 8000824:	20000298 	.word	0x20000298

08000828 <StopGTimer>:

void StopGTimer(uint8_t GTimerID){
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]

	GTimerState[GTimerID] = TimerStopped;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <StopGTimer+0x1c>)
 8000836:	2100      	movs	r1, #0
 8000838:	54d1      	strb	r1, [r2, r3]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	200002a4 	.word	0x200002a4

08000848 <GetGTimerVal>:

	}

}

uint32_t GetGTimerVal(uint8_t GTimerID){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]

	return GTimerVal[GTimerID];
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a03      	ldr	r2, [pc, #12]	; (8000864 <GetGTimerVal+0x1c>)
 8000856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000298 	.word	0x20000298

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800086c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800086e:	e003      	b.n	8000878 <LoopCopyDataInit>

08000870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000876:	3104      	adds	r1, #4

08000878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800087c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800087e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000880:	d3f6      	bcc.n	8000870 <CopyDataInit>
  ldr  r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000884:	e002      	b.n	800088c <LoopFillZerobss>

08000886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000888:	f842 3b04 	str.w	r3, [r2], #4

0800088c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800088e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000890:	d3f9      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000892:	f7ff fca1 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f000 f811 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fdb9 	bl	8000410 <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008a4:	08000934 	.word	0x08000934
  ldr  r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008ac:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80008b0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80008b4:	200002a8 	.word	0x200002a8

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	; (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	; (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	; (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	; (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 f818 	bl	8000904 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	0800092c 	.word	0x0800092c
 80008f8:	0800092c 	.word	0x0800092c
 80008fc:	0800092c 	.word	0x0800092c
 8000900:	08000930 	.word	0x08000930

08000904 <_init>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr

08000910 <_fini>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr
